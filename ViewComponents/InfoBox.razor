@namespace Website.Pages
@using VedAstro.Library;
@using System.Xml.Linq

<div @onclick="OnClick" class="@(FullWidth?"":"")" style="@InlineStyle">
    <div class="alert alert-primary d-flex align-items-center vstack" role="alert" style="background-color: @Color !important; ">
        <div class="hstack mb-2">
            <span class="iconify bi flex-shrink-0 me-2" data-icon="@IconName" data-width="50"></span>
            <div style="@AppData.DescriptionFont line-break: auto;">
                <strong>@Title</strong><br />
                @Description
                @DescriptionHTML
            </div>
        </div>
        @ImageHTML
    </div>
</div>




@code {

    /// <summary>
    /// custom color code exp: #ffbdf7
    /// Default : primary
    /// </summary>
    [Parameter]
    public string? Color { get; set; } = "";

    /// <summary>
    /// Special icon name from icon-sets.iconify.design
    /// </summary>
    [Parameter]
    public string? IconName { get; set; }

    [Parameter]
    public string? Title { get; set; }

    [Parameter]
    public string? Description { get; set; }

    public string? InlineStyle
    {
        get
        {
            var final = "";
            final += IsClickMode || IsCallMode ? PointerCursorStyle : "";
            final += MaxWidth == null ? "" : MaxWidthStyle;
            final += Width == null ? "" : WidthStyle;
            return final;
        }
    }

    [Parameter]
    public RenderFragment? DescriptionHTML { get; set; }

    [Parameter]
    public RenderFragment? ImageHTML { get; set; }


    /// <summary>
    /// If URL is provided, on button click will navigate to URL
    /// </summary>
    [Parameter]
    public string? ClickUrl { get; set; } = ""; //default empty to detect

    /// <summary>
    /// Related to ClickURL, if set true opens in new tab, default is false
    /// </summary>
    [Parameter]
    public bool IsNewTabOpen { get; set; } = false;


    /// <summary>
    /// Checks if click URL has been specified
    /// </summary>
    public bool IsClickMode => !string.IsNullOrEmpty(ClickUrl);

    /// <summary>
    /// Checks if click URL has been specified
    /// </summary>
    public bool IsCallMode => OnClickCallback.HasDelegate;


    /// <summary>
    /// If set true, class w-50 will be removed
    /// default false, with w-50
    /// </summary>
    [Parameter]
    public bool FullWidth { get; set; } = false;

    /// <summary>
    /// Note: Needs to be nullable so that can detect if was set
    /// </summary>
    [Parameter]
    public double? MaxWidth { get; set; }

    /// <summary>
    /// Note: Needs to be nullable so that can detect if was set
    /// </summary>
    [Parameter]
    public double? Width { get; set; }

    /// <summary>
    /// used to make class applied in style attribute
    /// </summary>
    private string MaxWidthStyle => $" max-width:{MaxWidth}px;";
    private string WidthStyle => $" width:{Width}px !important;";
    private string PointerCursorStyle => $" cursor: pointer;";

    /// <summary>
    /// Function that is called on click of button
    /// Note: using delegate so that can change function based on page mode
    /// </summary>
    [Parameter]
    public EventCallback<MouseEventArgs> OnClickCallback { get; set; }



    private async Task OnClick(MouseEventArgs obj)
    {

        //log this
        await WebLogger.Data($"InfoBox Click : {Title}");

        //if custom onclick has been specified than use that
        if (IsCallMode) { await OnClickCallback.InvokeAsync(obj); }

        //else if URL has been specified use that
        else if (IsClickMode)
        {
            //if specified opens link in new tab
            if (IsNewTabOpen)
            {
                _jsRuntime.OpenNewTab(ClickUrl);
            }
            else
            {
                AppData.Go(ClickUrl);
            }
        }
    }

}
