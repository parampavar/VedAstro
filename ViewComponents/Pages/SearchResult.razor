@namespace Website.Pages
@using VedAstro.Library
@using System.Xml.Linq
@attribute [Route(PageRoute.SearchResult)]

<PageTitle>@_pageTitle</PageTitle>

<PageTop Title="Search Astrology" IconName="flat-color-icons:fine-print" IconSize="60">
    <Description>Search all astrological combination or predictions that have been programmed into VedAstro</Description>
</PageTop>

@if (_resultReady)
{

    <h4 class="mb-3">Found "@resultCount" results for "@SearchText"</h4>

    <div class="gap-3" style="max-width:@GR.W667px">

        <ArticleBlock IconName="flat-color-icons:department">
            <TitleHTML>
                Muhurtha Events <HelpIconTooltip HelpText="@HelpText.SearchEvents" SmallIcon="true" /> - @foundEvents.Count()
            </TitleHTML>
            <TextHTML>
                @foreach (var prediction in foundEvents)
                {
                    <div class="card shadow mt-2">
                        <div class="card-header hstack">
                            <h6 class="mb-0">
                                @prediction.FormattedName
                            </h6>
                            <span class="fw-light mx-3" style="font-size: 13px;">
                                @prediction.Nature @prediction.SpecializedSummary
                            </span>
                        </div>
                        <div class="card-body">
                            <p class="card-text">@prediction.Description</p>
                        </div>
                    </div>
                }
            </TextHTML>
        </ArticleBlock>

        <ArticleBlock IconName="flat-color-icons:manager">
            <TitleHTML>
                Horoscope Predictions <HelpIconTooltip HelpText="@HelpText.SearchPredictions" SmallIcon="true" /> - @foundPrediction.Count()
            </TitleHTML>
            <TextHTML>
                @foreach (var prediction in foundPrediction)
                {
                    <div class="card shadow mt-2">
                        <div class="card-header hstack">
                            <h6 class="mb-0">
                                @prediction.FormattedName
                            </h6>
                            <span class="fw-light mx-3" style="font-size: 13px;">
                                @prediction.Nature
                            </span>
                        </div>
                        <div class="card-body">
                            <p class="card-text">@prediction.Description</p>
                        </div>
                    </div>
                }
            </TextHTML>
        </ArticleBlock>

        <ArticleBlock IconName="flat-color-icons:biotech">
            <TitleHTML>
                Reference <HelpIconTooltip HelpText="@HelpText.SearchReference" SmallIcon="true" /> - @foundReference.Count()
            </TitleHTML>

            <TextHTML>
                @foreach (var prediction in foundReference)
                {
                    @*only generate if got desc*@

                    <div class="card shadow mt-2">
                        <div class="card-header hstack">
                            <h6 class="mb-0">
                                @Format.FormatName(prediction.Element("Name")?.Value)
                            </h6>
                            <span class="fw-light mx-3" style="font-size: 13px;">
                                @prediction.Element("Source")?.Value
                            </span>
                        </div>
                        <div class="card-body">
                            <p class="card-text">@prediction.Element("Description")?.Value</p>
                        </div>
                    </div>
                }

            </TextHTML>
        </ArticleBlock>

    </div>

}
else
{
    <h4>No results found. Try fewer keywords for more results.</h4>
}


@code {

    private string _pageTitle = "Search";


    public string? SearchText = "";

    private int resultCount = 0;
    private bool _resultReady = false;


    IEnumerable<HoroscopeData> foundPrediction = new List<HoroscopeData>();
    IEnumerable<EventData> foundEvents = new List<EventData>();
    IEnumerable<XElement> foundReference = new List<XElement>();


    //makes this page instance available to others
    protected override void OnInitialized() => AppData.SearchPage = this;



    /// <summary>
    /// does the search
    /// </summary>
    public async Task Search(string searchText)
    {
        await _jsRuntime.ShowLoading();

        //log it
        WebLogger.Data($"Seacrch:{searchText}");

        //only load the xml files if not yet loaded
        //this is set here, so on 2nd search in same session it will use back
        if (!AppData.SearchFilesLoaded) { await AppData.LoadSearchFiles(); }

        //little time for loading to pop
        //note: without it, no loading
        await Task.Delay(250);

        //show search text
        //put search text into tab title for easy multi-tabbing
        SearchText = searchText;
        _pageTitle = $"Search | {SearchText}";

        //search dictionaries
        foundPrediction =  HoroscopeDataListStatic.Rows.Where(data => data.Contains(SearchText));
        foundEvents = EventDataListStatic.Rows.Where(data => data.Contains(SearchText));
        foundReference = AppData.ReferenceList.Where(IsFound);

        //show search result count
        resultCount = foundPrediction.Count() + foundEvents.Count();

        //mark as ready to show user
        _resultReady = true;

        //needed to make changes appear
        StateHasChanged();

        _jsRuntime.HideLoading();

    }


    /// <summary>
    /// checks x element for matching keyword
    /// search word in global variable
    /// note: for speed purposes we stick with xelement
    /// </summary>
    private bool IsFound(XElement inputElement)
    {
        //convert the event data to string form
        //note: all 1st level children are converted
        var evenDataXmlString = "";
        foreach (var xElement in inputElement.Elements())
        {
            //only name make format it first
            var text = "";
            if (xElement.Name == "Name")
            {
                text = Format.FormatName(xElement?.Value ?? "");
            }
            else
            {
                text = $" {xElement.Value}";
            }
            evenDataXmlString += text;
        }

        //convert to lower case and do basic word match
        return evenDataXmlString.ToLower().Contains(SearchText.ToLower());
    }


}
