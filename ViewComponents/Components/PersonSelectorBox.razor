@*⠀⠀⠀⠀⠀⠀⠀⢠⣶⣿⣶⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⢀⣴⣾⣶⣄⠘⢿⣿⣿⣿⣷⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠈⢿⣿⣿⣿⣷⣄⠙⢿⣿⣿⣿⣷⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠙⢿⣿⣿⣿⣷⣄⠙⢿⣿⣿⣿⣷⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠙⢿⣿⣿⣿⣷⣄⠙⢿⣿⣿⣿⣷⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠙⢿⣿⣿⣿⣿⣾⣿⣿⣿⠿⠿⠓⢀⣀⣠⣤⣤⣄⠀⠀⠀
⠀⣀⣤⡀⠀⠀⢀⣤⣶⣤⡙⢿⣿⣿⣿⡟⣩⣶⣶⣿⣿⣿⣿⣿⣿⣿⣿⣷⣄⠀
⢸⣿⣿⣿⣦⡀⠸⣿⣿⣿⣿⣦⡙⢿⣿⡇⣿⣿⣿⣿⣿⣿⠿⠿⠿⢿⣿⣿⣿⡆
⠈⠻⣿⣿⣿⣿⣦⡉⢿⣿⣿⣿⣿⣦⡙⢿⣬⣉⣩⣭⣤⣴⣶⣿⣿⣿⣿⣿⣿⣧
⠀⠀⠈⠻⣿⣿⣿⣿⣦⡉⠻⣿⣿⣿⣿⣦⡙⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡟
⠀⠀⠀⠀⠈⠻⣿⣿⣿⣿⣷⣍⠻⣿⣿⣿⠇⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠇
⠀⠀⠀⠀⠀⠀⠈⠻⣿⣿⣿⣿⣷⣬⣭⣥⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡟⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠈⠻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠏⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠟⠁⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠛⠻⠿⣿⣿⣿⡿⠿⠿⠛⠉⠀⠀⠀⠀⠀⠀
KEEP IT REAL
*@



@namespace Website.Pages
@using VedAstro.Library;
@using System.Xml.Linq
@using System.Collections
@using Newtonsoft.Json.Linq

@*Component shows combo box with people list*@


<div class="@ExtraClass">
    @* LABEL *@
    @if (!HideTitle) @*only show if no hide*@
    {
        <label class="form-label">@Label</label>
    }
    <div class="hstack">

        <div class="btn-group" style="width:@Width;">

            @* DROPDOWN BUTTON *@
            <button type="button" @onclick="OnClickTrigger" class="btn dropdown-toggle btn-outline-primary text-start" data-bs-toggle="dropdown" aria-expanded="false">
                @if (IsReady && !SelectedPerson.Equals(Person.Empty))
                {
                    <PersonTooltip Person="@SelectedPerson" />
                }
                else
                {
                    @("Select Person")
                }
            </button>

            @* DROPDOWN SECTION *@
            <ul class="dropdown-menu ps-2 pe-3" style="height: @GR.W412px; overflow-y: scroll; overflow-x: clip;">

                @* SEARCH *@
                <div class="hstack gap-2">
                    <input @ref="_searchInput" @onkeyup="OnKeyUpSearchBar" type="text" class="form-control ms-0 mb-2 ps-3" placeholder="Search...">
                    <Icon ExtraClass="mb-2" ExtraStyle="cursor: pointer;" TooltipText="View List" IconName="pepicons-pop:list" OnClickCallback="@(() => AppData.Go(PageRoute.PersonList))" />
                </div>

                @* LIST OF PEOPLE *@
                @if (IsReady)
                {
                    @foreach (var person in PersonListDisplay)
                    {
                        <li class="dropdown-item" @onclick="@(() => OnClickPersonName(person))" style="cursor: pointer;">@person.DisplayName</li>
                    }
                    <li><hr class="dropdown-divider"></li>
                    @* DIVIDER *@
                    <div class="ms-3 d-flex justify-content-between">
                        <IconText FontColor="@AppData.Grey" IconName="material-symbols:demography-rounded">
                            Examples
                        </IconText>
                    </div>
                    <li><hr class="dropdown-divider"></li>
                    @foreach (var person in PublicPersonListDisplay)
                    {
                        <li class="dropdown-item" @onclick="@(() => OnClickPersonName(person))" style="cursor: pointer;">@person.DisplayName</li>
                    }
                }
                @* LOADING ICON *@
                @* loading icon when list is being made, no loading popup because reduces user UX *@
                else
                {
                    <div class="d-flex flex-column align-items-center mt-5">
                        <strong>Loading...</strong>
                        <div class="spinner-border" role="status" aria-hidden="true"></div>
                    </div>
                }


            </ul>

        </div>


        @*add person icon*@
        <IconButton ExtraClass="ms-2" TooltipText="Add New Person" IconName="ant-design:user-add-outlined" ClickUrl="@PageRoute.AddPerson" />
    </div>
</div>

@code {

    private ElementReference _searchInput;

    //DEFAULTS
    const string DefaultLabel = "Person";
    private MarkupString DropDownOptionsHtml { get; set; } = new("");
    private const string NotSelectedPersonId = "0"; //needed to detect empty
    private string _selectedPersonId = NotSelectedPersonId;
    public Person SelectedPerson { get; set; } = Person.Empty;
    //PARAMETERS

    /// <summary>
    /// If specified extra, added directly to button class attribute
    /// </summary>
    [Parameter]
    public string? ExtraClass { get; set; }

    /// <summary>
    /// default is GR.W255px, can set string like 100% or 100px
    /// </summary>
    [Parameter]
    public string? Width { get; set; } = GR.W255px;


    /// <summary>
    /// Get selected person name
    /// </summary>
    [Parameter]
    public string SelectedPersonId
    {
        get => _selectedPersonId;
        set
        {

            if (!(string.IsNullOrEmpty(value)))
            {
                //this stops update loops
                if (_selectedPersonId == value) return;

                //log this, don't await to reduce lag
                WebLogger.Data($"Selected Person:{value}");

                _selectedPersonId = value;
                //update value in parent page (for parent to listen in)
                SelectedPersonIdChanged.InvokeAsync(value);
            }
        }
    }


    //below prop needed for 2-way binding between page & component to work
    [Parameter]
    public EventCallback<string> SelectedPersonIdChanged { get; set; }


    /// <summary>
    /// Text that is shown above list
    /// </summary>
    [Parameter]
    public string? Label { get; set; } = DefaultLabel;

    /// <summary>
    /// by default show label
    /// </summary>
    [Parameter]
    public bool HideTitle { get; set; } = false;


    /// <summary>
    /// main list that is not effected by search
    /// </summary>
    private List<Person> PersonList { get; set; } = new List<Person>();

    /// <summary>
    /// list that is shown to user and is changed by search
    /// </summary>
    private List<Person> PersonListDisplay { get; set; } = new List<Person>();
    private List<Person> PublicPersonListDisplay { get; set; } = new List<Person>();
    private List<Person> PublicPersonList { get; set; } = new List<Person>();

    /// <summary>
    /// only this way of marking works
    /// </summary>
    private bool IsReady = false;


    //█░░ █ █▀▀ █▀▀ █▀▀ █▄█ █▀▀ █░░ █▀▀   █▀▄▀█ █▀▀ ▀█▀ █░█ █▀█ █▀▄ █▀
    //█▄▄ █ █▀░ ██▄ █▄▄ ░█░ █▄▄ █▄▄ ██▄   █░▀░█ ██▄ ░█░ █▀█ █▄█ █▄▀ ▄█
    //METHODS THAT CAN IMPLEMENT ASYNC ERROR HANDLER

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await FillDropDown();
        }

    }


    //█▀█ █▀█ █ █░█ ▄▀█ ▀█▀ █▀▀   █▀▄▀█ █▀▀ ▀█▀ █░█ █▀█ █▀▄ █▀
    //█▀▀ █▀▄ █ ▀▄▀ █▀█ ░█░ ██▄   █░▀░█ ██▄ ░█░ █▀█ █▄█ █▄▀ ▄█

    /// <summary>
    /// Handle when user uses the Search
    /// </summary>
    private async Task OnKeyUpSearchBar(KeyboardEventArgs keyEventArgs)
    {
        //if arrow keys than obviously don't count
        //if arrow keys, space, or control keys then obviously don't count
        if (keyEventArgs.Code == "ArrowUp" || keyEventArgs.Code == "ArrowDown" ||
            keyEventArgs.Code == "ArrowLeft" || keyEventArgs.Code == "ArrowRight" ||
            keyEventArgs.Code == "Space" || keyEventArgs.Code == "ControlLeft" ||
            keyEventArgs.Code == "ControlRight" || keyEventArgs.Code == "AltLeft" ||
            keyEventArgs.Code == "AltRight" || keyEventArgs.Code == "ShiftLeft" ||
            keyEventArgs.Code == "ShiftRight" || keyEventArgs.Code == "Enter" ||
            keyEventArgs.Code == "Tab" || keyEventArgs.Code == "Escape")
        {
            return;
        }

        //get search text, lower case for more results
        var text = (await _jsRuntime.GetValue(_searchInput)).ToLower();

        //if no search text then show all
        if (string.IsNullOrEmpty(text))
        {
            PersonListDisplay = PersonList;
            PublicPersonListDisplay = PublicPersonList;
        }
        else
        {
            PersonListDisplay = PersonList.FindAll(person => person.DisplayName.ToLower().Contains(text)); //todo possible to search by birth date
            PublicPersonListDisplay = PublicPersonList.FindAll(person => person.DisplayName.ToLower().Contains(text)); //todo possible to search by birth date
        }

    }

    private async Task FillDropDown()
    {
        //only this way of marking works
        IsReady = false;

        //get person list from server or cache and stores reference for later use
        PersonList = await AppData.API.Person.GetPersonList();
        PublicPersonList = await AppData.API.Person.GetPublicPersonList();

        //make visible, do so to support search feature
        PersonListDisplay = PersonList;
        PublicPersonListDisplay = PublicPersonList;

        //try get previously set value from storage for better UX
        //NOTE: update direct to field to avoid duplicate set local storage
        var rawJson = await _jsRuntime.GetProperty("SelectedPerson");
        if (!string.IsNullOrEmpty(rawJson))
        {
            //programmatically select the person
            var fromJson = Person.FromJson(JToken.Parse(rawJson));
            //simulate click
            OnClickPersonName(fromJson);
        }



        IsReady = true;

        //need to propagate changes
        this.StateHasChanged();
    }

    public async Task<Person> GetSelectedPerson() => await WebsiteTools.GetPersonById(SelectedPersonId, _jsRuntime);

    /// <summary>
    /// True if a person has been selected else false
    /// </summary>
    public bool IsPersonSelected => SelectedPersonId != NotSelectedPersonId && SelectedPersonId != null && SelectedPersonId != "" && SelectedPersonId != "101";

    /// <summary>
    /// Programmatically sets a person from ID, as though selected by user
    /// </summary>
    public async Task SetPerson(string personIdUrl)
    {
        //update the internal data
        SelectedPersonId = personIdUrl;
        var inputPerson = await GetSelectedPerson();

        //simulate click
        OnClickPersonName(inputPerson);
    }


    /// <summary>
    /// when a person in tooltip drop down menu is clicked
    /// </summary>
    private async Task OnClickPersonName(Person person)
    {
        //set for later use
        await _jsRuntime.SetProperty("SelectedPerson", person.ToJson().ToString());

        //set tooltip as well
        SelectedPerson = person;

        //save the selected person, we only use ID because in sync with id in URL
        SelectedPersonId = person.Id;

        //needed to make change appear
        StateHasChanged();
    }

    private void OnClickHidePublic()
    {
        PublicPersonList.Clear();
    }

    /// <summary>
    /// When main button is clicked to trigger auto focus to search bar
    /// </summary>
    private void OnClickTrigger()
    {
        _searchInput.FocusAsync();
    }

}
