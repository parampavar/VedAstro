@namespace Website.Pages
@using VedAstro.Library;
@using System.Xml.Linq

<style>
    /*highlights frozen planet column*/
    .PlanetColumn {
        background-color: #1b6ec2 !important;
        color: white;
    }
</style>

<div class="vstack gap-3">
    <div>
        <h4>Planet Info</h4>
        <div class="vstack gap-2">
            <div style="min-height: 150px; width:100%;" class="" id="@PlanetTableId"></div>
            <div style="min-height: 150px; width:100%;" class="" id="@PlanetInfoTableId"></div>
        </div>
    </div>

    <div>
        <h4>House Info</h4>
        <div class="vstack gap-2">
            <div style="min-height: 150px; width:100%;" class="" id="@HouseTableId"></div>
            <div style="min-height: 150px; width:100%;" class="" id="@HouseInfoTableId"></div>
        </div>
    </div>
</div>

@code {

    public Time _time { get; set; }

    const string PlanetTableId = "PlanetDataTable"; //change only needed here
    const string PlanetInfoTableId = "PlanetDataInfoTable"; //change only needed here
    const string HouseTableId = "HouseDataTable"; //change only needed here
    const string HouseInfoTableId = "HouseDataInfoTable"; //change only needed here

    bool _isDirty = false;


    public async Task Show(Person person)
    {
        //set birth time from person
        _time = person.BirthTime;

        //get planet data
        var planetData = GetPlanetData();

        //and calls js code change table directly
        //the data column to show is in js side
        await _jsRuntime.InvokeVoidAsync(JS.generatePlanetDataTable, PlanetTableId, planetData);
        await _jsRuntime.InvokeVoidAsync(JS.generatePlanetDataInfoTable, PlanetInfoTableId, planetData);

        //get house data
        var houseData = GetHouseData();

        //and calls js code change table directly
        await _jsRuntime.InvokeVoidAsync(JS.generateHouseDataTable, HouseTableId, houseData);
        await _jsRuntime.InvokeVoidAsync(JS.generateHouseDataInfoTable, HouseInfoTableId, houseData);

        //if harmful remove
        this.StateHasChanged();

    }

    public List<object> GetHouseData()
    {
        var returnList = new List<object>();

        foreach (var house in House.AllHouses)
        {
            returnList.Add(getData(house));
        }

        return returnList;


        object getData(HouseName houseNumber)
        {
            var lordOfHouse = Calculate.LordOfHouse((HouseName)houseNumber, _time);

            //get house details and save it for view
            var _houseDetails = Calculate.GetHouseTags(houseNumber);
            var _houseLord = lordOfHouse.ToString();
            var _planetsInHouse = Tools.ListToString<PlanetName>(Calculate.PlanetsInHouse(houseNumber, _time));
            var _planetsAspectingHouse = Tools.ListToString<PlanetName>(Calculate.PlanetsAspectingHouse((HouseName)houseNumber, _time));
            var rawHouseStrength = Calculate.HouseStrength((HouseName)houseNumber, _time).ToDouble();
            var _houseStrength = Math.Round(rawHouseStrength, 2).ToString();
            var _houseSign = Calculate.HouseSignName(houseNumber, _time).ToString();
            var _houseNavamsaSign = Calculate.HouseNavamsaSign((HouseName)houseNumber, _time).ToString();

            var _lordExalted = Calculate.IsPlanetExalted(lordOfHouse, _time);
            var _lordDebilitated = Calculate.IsPlanetDebilitated(lordOfHouse, _time);

            var _currentSignDescription = Calculate.GetSignTags(Calculate.HouseSignName(houseNumber, _time));
            var _lordInfo = Calculate.GetPlanetTags(lordOfHouse);

            return new
            {
                House = "House " + houseNumber,
                HouseLord = _houseLord,
                PlanetsInHouse = _planetsInHouse,
                PlanetsAspectingHouse = _planetsAspectingHouse,
                HouseStrength = _houseStrength,
                HouseSign = _houseSign,
                CurrentSignDescription = _currentSignDescription,
                HouseNavamsaSign = _houseNavamsaSign,
                LordExalted = _lordExalted,
                LordDebilitated = _lordDebilitated,
                HouseDetails = _houseDetails,
                LordInfo = _lordInfo

            };
        }


    }

    public List<object> GetPlanetData()
    {

        var returnList = new List<object>();

        foreach (var planet in PlanetName.All9Planets)
        {
            returnList.Add(getData(planet));
        }

        return returnList;

        object getData(PlanetName planetName)
        {
            //find out if planet is rahu or ketu, because not all calculations supported
            var isRahuKetu = planetName == PlanetName.Rahu || planetName == PlanetName.Ketu;

            //get planet details and save it for view
            var _shadbalaPinda = Calculate.PlanetShadbalaPinda(planetName, _time).ToDouble();

            var _positionStrength = isRahuKetu ? 0 : Math.Round(Calculate.PlanetSthanaBala(planetName, _time).ToDouble(), 2);

            var _directionalStrength = isRahuKetu ? 0 : Math.Round(Calculate.PlanetDigBala(planetName, _time).ToDouble(), 2);

            var _motionalStrength = isRahuKetu ? 0 : Math.Round(Calculate.PlanetChestaBala(planetName, _time).ToDouble(), 2);
            var _motionName = Calculate.PlanetMotionName(planetName, _time).ToString();

            var _temporalStrength = isRahuKetu ? 0 : Math.Round(Calculate.PlanetKalaBala(planetName, _time).ToDouble(), 2);

            var _aspectStrength = isRahuKetu ? 0 : Math.Round(Calculate.PlanetDrikBala(planetName, _time).ToDouble(), 2);

            var _permanentStrength = isRahuKetu ? 0 : Math.Round(Calculate.PlanetNaisargikaBala(planetName, _time).ToDouble(), 2);

            var _planetCurrentHouse = Calculate.HousePlanetOccupies(planetName, _time);

            var _planetRasiSign = Calculate.PlanetZodiacSign(planetName, _time);

            var _planetCurrentSign = _planetRasiSign.ToString();

            var _nirayanaLongitude = Math.Round(Calculate.PlanetNirayanaLongitude(planetName, _time).TotalDegrees, 2);
            var _sayanaLongitude = Math.Round(Calculate.PlanetSayanaLongitude(planetName, _time).TotalDegrees, 2);

            var planetNavamsaSign = Calculate.PlanetNavamsaSign(planetName, _time);

            var _planetCurrentNavamsaSign = planetNavamsaSign.ToString();

            var _planetCurrentConstellation = Calculate.PlanetConstellation(planetName, _time).ToString();

            var _currentHouseRelation = isRahuKetu ? 0 : Calculate.PlanetRelationshipWithHouse((HouseName)_planetCurrentHouse, planetName, _time);

            var _navamsaRelation = isRahuKetu ? 0 : Calculate.PlanetRelationshipWithSign(planetName, planetNavamsaSign, _time);

            var _isPlanetAspectedByMaleficPlanets = Calculate.IsPlanetAspectedByMaleficPlanets(planetName, _time);

            var _isPlanetConjunctWithMaleficPlanets = Calculate.IsPlanetConjunctWithMaleficPlanets(planetName, _time);

            var _conjunctPlanets = Tools.ListToString<PlanetName>(Calculate.PlanetsInConjuction(planetName, _time));

            var _aspectingPlanets = Tools.ListToString<PlanetName>(Calculate.PlanetsAspectingPlanet(planetName, _time));

            var _currentSignDescription = Calculate.GetSignTags(_planetRasiSign.GetSignName());

            var _currentHouseDescription = Calculate.GetHouseTags(Calculate.HousePlanetOccupies(planetName, _time));

            var _planetCurrentHouseType = Calculate.GetHouseType(Calculate.HousePlanetOccupies(planetName, _time));

            var _planetInfo = Calculate.GetPlanetTags(planetName);

            var lagna = Calculate.HouseSignName(HouseName.House1, _time);
            var _isPlanetBeneficToLagna = Calculate.IsPlanetBeneficToLagna(planetName, lagna);
            var _isPlanetMaleficToLagna = Calculate.IsPlanetMaleficToLagna(planetName, lagna);
            var _isPlanetYogakarakaToLagna = Calculate.IsPlanetYogakarakaToLagna(planetName, lagna);
            var _isPlanetMarakaToLagna = Calculate.IsPlanetMarakaToLagna(planetName, lagna);

            //todo
            //var _getPlanetStateDescription = AstronomicalCalculator.GetPlanetStateDescription();

            //return as anonymous type, when sent to JS
            //will auto convert to JSON data
            return new
            {
                Planet = planetName.ToString(),
                ShadbalaPinda = _shadbalaPinda,
                PositionStrength = _positionStrength,
                DirectionalStrength = _directionalStrength,
                MotionalStrength = _motionalStrength,
                MotionName = _motionName,
                TemporalStrength = _temporalStrength,
                AspectStrength = _aspectStrength,
                PermanentStrength = _permanentStrength,
                PlanetCurrentHouse = _planetCurrentHouse,
                PlanetCurrentSign = _planetCurrentSign,
                NirayanaLongitude = _nirayanaLongitude,
                SayanaLongitude = _sayanaLongitude,
                CurrentSignDescription = _currentSignDescription,
                PlanetCurrentNavamsaSign = _planetCurrentNavamsaSign,
                PlanetCurrentConstellation = _planetCurrentConstellation,
                HouseRelation = Format.FormatName(_currentHouseRelation.ToString()),
                NavamsaRelation = Format.FormatName(_navamsaRelation.ToString()),
                IsPlanetAspectedByMaleficPlanets = _isPlanetAspectedByMaleficPlanets,
                IsPlanetConjunctWithMaleficPlanets = _isPlanetConjunctWithMaleficPlanets,
                ConjunctPlanets = _conjunctPlanets,
                AspectingPlanets = _aspectingPlanets,
                CurrentHouseDescription = _currentHouseDescription,
                PlanetCurrentHouseType = _planetCurrentHouseType,
                PlanetInfo = _planetInfo,
                IsPlanetBeneficToLagna = _isPlanetBeneficToLagna,
                IsPlanetMaleficToLagna = _isPlanetMaleficToLagna,
                IsPlanetMarakaToLagna = _isPlanetMarakaToLagna,
                IsPlanetYogakarakaToLagna = _isPlanetYogakarakaToLagna,
            };
        }
    }
}
