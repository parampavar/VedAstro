@*SIMPLE BOX TO RENDER HOROSCOPE PREDICTIONS*@

@namespace Website.Pages
@using VedAstro.Library;
@using System.Xml.Linq
@using Newtonsoft.Json


<div class="d-flex justify-content-center gap-3 mb-2">

    @if (ShowFilterOptions)
    {
        @*Planet Name*@
        <div @ref="planetNameSelector" class="form-floating">
            <select @bind="SelectedPlanet" class="form-select" id="planetNameSelector" aria-label="Planet Name Select">
                <option value="" selected>Filter by Planet</option>
                <option value="Sun">Sun</option>
                <option value="Moon">Moon</option>
                <option value="Mars">Mars</option>
                <option value="Mercury">Mercury</option>
                <option value="Jupiter">Jupiter</option>
                <option value="Venus">Venus</option>
                <option value="Saturn">Saturn</option>
                <option value="Rahu">Rahu</option>
                <option value="Ketu">Ketu</option>
            </select>
            <label style="font-weight: 700; color: black;" for="planetNameSelector">Planet</label>
        </div>

        @*House Name*@
        <div @ref="houseNameSelector" class="form-floating">
            <select @bind="SelectedHouse" class="form-select" id="houseNameSelector" aria-label="House Name Select">
                <option value="" selected>Filter by House</option>
                <option value="House1">House 1</option>
                <option value="House2">House 2</option>
                <option value="House3">House 3</option>
                <option value="House4">House 4</option>
                <option value="House5">House 5</option>
                <option value="House6">House 6</option>
                <option value="House7">House 7</option>
                <option value="House8">House 8</option>
                <option value="House9">House 9</option>
                <option value="House10">House 10</option>
                <option value="House11">House 11</option>
                <option value="House12">House 12</option>
            </select>
            <label style="font-weight: 700; color: black;" for="houseNameSelector">House</label>
        </div>

        @*House Name*@
        <div @ref="signNameSelector" class="form-floating">
            <select @bind="SelectedSign" class="form-select" id="signNameSelector" aria-label="Sign Select">
                <option value="" selected>Filter by Sign</option>
                <option value="Aries">House</option>
                <option value="Taurus">Taurus</option>
                <option value="Gemini">Gemini</option>
                <option value="Cancer">Cancer</option>
                <option value="Leo">Leo</option>
                <option value="Virgo">Virgo</option>
                <option value="Libra">Libra</option>
                <option value="Scorpio">Scorpio</option>
                <option value="Sagittarius">Sagittarius</option>
                <option value="Capricorn">Capricorn</option>
                <option value="Aquarius">Aquarius</option>
                <option value="Pisces">Pisces</option>
            </select>
            <label style="font-weight: 700; color: black;" for="houseNameSelector">Sign</label>
        </div>

        @* SEARCH BUTTON *@
        <IconButton ExtraClass="h-auto" ButtonText="Search" IconName="bx:search-alt" OnClickCallback="SearchButtonClicked" />
    }


</div>


@* only print once data is in *@
@if (_filteredHoroscopePredictions.Any())
{
    <table class="table table-bordered table-striped table-hover">
        <thead class="table-dark">
        <tr>
            <th>Name</th>
            <th>Description</th>
            <th style="min-width: 123px;">Tags</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var prediction in _filteredHoroscopePredictions)
        {
            @*log when when user reads a predictions*@
            <tr @onmouseenter="@(() => WebLogger.Data("Mouse Over: " + @prediction.FormattedName))">
                <td>@prediction.FormattedName</td>
                <td>@prediction.Description</td>
                <td>@prediction.RelatedBody</td>
            </tr>
        }
        </tbody>
    </table>
}


@code {

    ///enabled by default, disable to hide filter
    [Parameter]
    public bool ShowFilterOptions { get; set; } = true;

    private string SelectedHouse;
    private string SelectedPlanet;
    private string SelectedSign;

    private ElementReference signNameSelector;
    private ElementReference houseNameSelector;
    private ElementReference planetNameSelector;

    private bool _sunCheckBox, _moonCheckBox, _marsCheckBox, _mercuryCheckBox, _jupiterCheckBox, _venusCheckBox, _saturnCheckBox, _rahuCheckBox, _ketuCheckBox;
    private bool _house1CheckBox, _house2CheckBox, _house3CheckBox, _house4CheckBox, _house5CheckBox, _house6CheckBox, _house7CheckBox, _house8CheckBox, _house9CheckBox, _house10CheckBox, _house11CheckBox, _house12CheckBox;
    private bool _ariesCheckBox, _taurusCheckBox, _geminiCheckBox, _cancerCheckBox, _leoCheckBox, _virgoCheckBox, _libraCheckBox, _scorpioCheckBox, _sagittariusCheckBox, _capricornusCheckBox, _aquariusCheckBox, _piscesCheckBox;
    private string _searchInput = "";


    private List<HoroscopePrediction>? _filteredHoroscopePredictions = new List<HoroscopePrediction>();
    private List<HoroscopePrediction>? _horoscopePredictions = new List<HoroscopePrediction>();


    private async Task _FilterButtonClicked()
    {
        await _jsRuntime.ShowLoading();


        var listToShow = new List<HoroscopePrediction>();
        foreach (var horoPredic in _horoscopePredictions)
        {

            //if there is a match between the prediction's related bodies & the user's selected filter planets,
            //then the prediction meets the planet filter, should be included in list

            //check match planet
            var selectedPlanetFilters = GetSelectedPlanetFilters();
            var matchPlanet = horoPredic.RelatedBody.RelatedPlanets.Intersect(selectedPlanetFilters).ToList().Any();

            //check match house
            var selectedHouseFilters = GetSelectedHouseFilters();
            var matchHouse = horoPredic.RelatedBody.RelatedHouses.Intersect(selectedHouseFilters).ToList().Any();

            //check match zodiac
            var selectedZodiacFilters = GetSelectedZodiacFilters();
            var matchZodiac = horoPredic.RelatedBody.RelatedZodiac.Intersect(selectedZodiacFilters).ToList().Any();

            //add to list if any of the matched passed
            var addInList = matchPlanet || matchHouse || matchZodiac;
            if (addInList) { listToShow.Add(horoPredic); }
        }

        //update view (empty list will be handled by blazor side)
        _filteredHoroscopePredictions = listToShow;

        _jsRuntime.HideLoading();
    }

    private async Task SearchButtonClicked() => await InvokeAsync(async () => await _SearchButtonClicked()).Try(_jsRuntime);


    private async Task _SearchButtonClicked()
    {

        await _jsRuntime.FunFeaturePopUp("Search Reference");

        //todo
        // await _jsRuntime.ShowLoading();

        // //if no search text means reset (no filter applied)
        // if (_searchInput == "") { _filteredHoroscopePredictions = _horoscopePredictions.ToList(); return; }

        // //else search by text
        // _filteredHoroscopePredictions = _horoscopePredictions.FindAll(x => x.Contains(_searchInput));

        // _jsRuntime.HideLoading();
    }

    public async Task ShowPrediction(Person selectedPerson)
    {
        //get horoscope predictions from API server
        //.../Calculate/HoroscopePredictions/Location/Singapore/Time/00:00/16/02/2024/+08:00
        var apiUrl = $"{AppData.URL.HoroscopePredictions}{selectedPerson.BirthTime.ToUrl()}";
        WebResult<Newtonsoft.Json.Linq.JToken> webResult = await Tools.ReadFromServerJsonReply(apiUrl);

        //inject horoscope prediction
        _horoscopePredictions = await Tools.GetListNoPolling(apiUrl, HoroscopePrediction.FromJsonList);

        _filteredHoroscopePredictions = _horoscopePredictions.ToList(); //make a copy for search

        //needed to make visible
        StateHasChanged();

    }

    public async Task ShowPrediction(List<HoroscopePrediction> inputPredictions)
    {
        //get horoscope predictions from API server
        //.../Calculate/HoroscopePredictions/Location/Singapore/Time/00:00/16/02/2024/+08:00
        // var apiUrl = $"{AppData.URL.HoroscopePredictions}{selectedPerson.BirthTime.ToUrl()}";
        // WebResult<Newtonsoft.Json.Linq.JToken> webResult = await Tools.ReadFromServerJsonReply(apiUrl);

        //inject horoscope prediction
        _horoscopePredictions = inputPredictions;

        _filteredHoroscopePredictions = _horoscopePredictions.ToList(); //make a copy for search

        //needed to make visible
        StateHasChanged();

    }


    /// <summary>
    /// Returns a list of zodiac name selected by user
    /// to ONLY include in results
    /// </summary>
    /// <returns></returns>
    private List<ZodiacName> GetSelectedZodiacFilters()
    {
        var returnList = new List<ZodiacName>();

        if (_ariesCheckBox) { returnList.Add(ZodiacName.Aries); }
        if (_taurusCheckBox) { returnList.Add(ZodiacName.Taurus); }
        if (_geminiCheckBox) { returnList.Add(ZodiacName.Gemini); }
        if (_cancerCheckBox) { returnList.Add(ZodiacName.Cancer); }
        if (_leoCheckBox) { returnList.Add(ZodiacName.Leo); }
        if (_virgoCheckBox) { returnList.Add(ZodiacName.Virgo); }
        if (_libraCheckBox) { returnList.Add(ZodiacName.Libra); }
        if (_scorpioCheckBox) { returnList.Add(ZodiacName.Scorpio); }
        if (_sagittariusCheckBox) { returnList.Add(ZodiacName.Sagittarius); }
        if (_capricornusCheckBox) { returnList.Add(ZodiacName.Capricorn); }
        if (_aquariusCheckBox) { returnList.Add(ZodiacName.Aquarius); }
        if (_piscesCheckBox) { returnList.Add(ZodiacName.Pisces); }

        return returnList;
    }

    /// <summary>
    /// Returns a list of planets selected by user
    /// to ONLY include in results
    /// </summary>
    /// <returns></returns>
    private List<PlanetName> GetSelectedPlanetFilters()
    {
        var returnList = new List<PlanetName>();

        if (_sunCheckBox) { returnList.Add(PlanetName.Sun); }
        if (_moonCheckBox) { returnList.Add(PlanetName.Moon); }
        if (_marsCheckBox) { returnList.Add(PlanetName.Mars); }
        if (_mercuryCheckBox) { returnList.Add(PlanetName.Mercury); }
        if (_jupiterCheckBox) { returnList.Add(PlanetName.Jupiter); }
        if (_venusCheckBox) { returnList.Add(PlanetName.Venus); }
        if (_saturnCheckBox) { returnList.Add(PlanetName.Saturn); }
        if (_rahuCheckBox) { returnList.Add(PlanetName.Rahu); }
        if (_ketuCheckBox) { returnList.Add(PlanetName.Ketu); }

        return returnList;
    }

    /// <summary>
    /// Returns a list of houses selected by user
    /// to ONLY include in results
    /// </summary>
    /// <returns></returns>
    private List<HouseName> GetSelectedHouseFilters()
    {
        var returnList = new List<HouseName>();

        if (_house1CheckBox) { returnList.Add(HouseName.House1); }
        if (_house2CheckBox) { returnList.Add(HouseName.House2); }
        if (_house3CheckBox) { returnList.Add(HouseName.House3); }
        if (_house4CheckBox) { returnList.Add(HouseName.House4); }
        if (_house5CheckBox) { returnList.Add(HouseName.House5); }
        if (_house6CheckBox) { returnList.Add(HouseName.House6); }
        if (_house7CheckBox) { returnList.Add(HouseName.House7); }
        if (_house8CheckBox) { returnList.Add(HouseName.House8); }
        if (_house9CheckBox) { returnList.Add(HouseName.House9); }
        if (_house10CheckBox) { returnList.Add(HouseName.House10); }
        if (_house11CheckBox) { returnList.Add(HouseName.House11); }
        if (_house12CheckBox) { returnList.Add(HouseName.House12); }

        return returnList;
    }



}
