
@namespace Desktop.Pages

@using Website
@using System.Text.Json.Nodes
@using System.Xml.Linq
@using VedAstro.Library

<style>

    #GoogleSignInButton {
        text-align: -webkit-center;
        position: relative;
    }

    #FacebookSignInButton {
        width: 170px;
        align-self: center;
        border-radius: 30px;
        padding-left: 29px;
    }

    /*    .MakeBig {
                    font-size: 31px;
                    width: 183px;
                }
            */
</style>

@*Colored box behind login/logout button*@
<div class="rounded p-4" style="background:#caecff;">

    @*User already signed in*@
    @if (AppData.IsLoginSuccess)
    {
        <div class="vstack gap-1" style="padding: 6px;">
            <span class="" style="align-self: center;padding: 10px; color: white;">@($"Hi, {AppData.CurrentUser?.FirstName}")</span>
        </div>
    }

    @*Not yet sign in*@
    else
    {
        <div class="vstack gap-4">
            @*FACEBOOK Sign In button*@
            <button id="FacebookSignInButton" @onclick="OnClickSignInFacebook" class="MakeBig btn btn-primary hstack gap-2 iconButton">
                <span class="iconify" data-icon="akar-icons:facebook-fill" data-width="25"></span> Sign In
            </button>

            @*GOOGLE Sign In button*@
            <div>

                <div id="g_id_onload"
                     data-client_id="19638836771-oflt5g9mnkft6chkl04vp4m5qpu5h569.apps.googleusercontent.com"
                     data-context="signin"
                     data-ux_mode="popup"
                     data-callback="@JS.OnGoogleSignInSuccessHandler"
                     data-auto_prompt="false">
                </div>

                <div class="g_id_signin"
                     data-type="standard"
                     data-shape="pill"
                     data-theme="outline"
                     data-text="signin"
                     data-size="large"
                     data-logo_alignment="center"
                     data-width="170"
                     id="GoogleSignInButton">
                </div>
            </div>


            @*EMAIL SIGN IN*@
            <button id="" @onclick="OnClickSignInEmail" class="MakeBig btn btn-primary hstack gap-2 iconButton align-self-center">
                <span class="iconify" data-icon="icon-park:email-lock" data-width="25"></span>Password Free
            </button>

        </div>
    }
</div>

@code {


    /// <summary>
    /// If true then, all buttons area loaded and ready
    /// note: because parent can't know else if login buttons are ready
    /// parent watches this to hide loading box
    /// </summary>
    public bool IsReady { get; set; } = false; //start as false


    //█░░ █ █▀▀ █▀▀ █▀▀ █▄█ █▀▀ █░░ █▀▀   █▀▄▀█ █▀▀ ▀█▀ █░█ █▀█ █▀▄ █▀
    //█▄▄ █ █▀░ ██▄ █▄▄ ░█░ █▄▄ █▄▄ ██▄   █░▀░█ ██▄ ░█░ █▀█ █▄█ █▄▀ ▄█
    //METHODS THAT CAN IMPLEMENT ASYNC ERROR HANDLER

    //private async Task OnClickSignOutButton() => await InvokeAsync(async () => await _OnClickSignOutButton()).Try(_jsRuntime);
    private async Task OnClickSignInFacebook() => await InvokeAsync(async () => await _OnClickSignInFacebook()).Try(_jsRuntime);
    private async Task OnClickSignInEmail() => await InvokeAsync(async () => await _OnClickSignInEmail()).Try(_jsRuntime);



    //▒█▀▄▀█ ▒█▀▀▀ ▀▀█▀▀ ▒█░▒█ ▒█▀▀▀█ ▒█▀▀▄ ▒█▀▀▀█
    //▒█▒█▒█ ▒█▀▀▀ ░▒█░░ ▒█▀▀█ ▒█░░▒█ ▒█░▒█ ░▀▀▀▄▄
    //▒█░░▒█ ▒█▄▄▄ ░▒█░░ ▒█░▒█ ▒█▄▄▄█ ▒█▄▄▀ ▒█▄▄▄█

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            //google sign in code must be only loaded after
            //special google button has been rendered
            await _jsRuntime.InvokeVoidAsync(JS.loadJs, URL.GoogleSignInJs);

            //makes this components instance available in JS,
            //to be used later when user clicks sign in button
            await _jsRuntime.InvokeVoidAsync(JS.SetSignInButtonInstance, DotNetObjectReference.Create(this));

            //resize login buttons via JS to make work
            //await _jsRuntime.InvokeVoidAsync(JS.ResizeGoogleLoginButton);
        }
    }

    /// <summary>
    /// This method is called from JS when user signs in
    /// note: works because SignInButtonInstance was called earlier
    /// User Click > Google Login Button > here
    /// </summary>
    [JSInvokable]
    public async Task OnGoogleSignInSuccessHandler(JsonNode credentialResponse)
    {
        //set user memory helper (don't wait, no point)
        await _jsRuntime.SetProperty("PreviousLoginMethod", "Google");


#if DEBUG
    Console.WriteLine("BLZ: OnGoogleSignInSuccessHandler");
#endif

        _jsRuntime.ShowLoading();

        //log this
        await WebLogger.Click("Google Sign In");

        //get the ID Token/JWT from the response
        var idToken = (string)credentialResponse["credential"]!;

        //send token to api for verification
        var result = await ServerManager.WriteToServerXmlReply(AppData.URL.SignInGoogle, new XElement("Token", idToken));

        //read the reply from API server and do what
        //needs to be done after login
        await HandleAllLogin(result);

    }

    /// <summary>
    /// All after login flow comes here yeah, this is nice design!
    /// </summary>
    public async Task HandleAllLogin(WebResult<XElement> result)
    {

        //check if reply is pass or fail

        if (result.IsPass)
        {
            //get payload containing user data
            var userDataXml = result.Payload;

            //initialize user data & store it for access by the rest of the app
            AppData.CurrentUser = UserData.FromXml(userDataXml);

            //store user data (xml) in browser localstorage
            await _jsRuntime.SetProperty("UserData", AppData.CurrentUser.ToXml().ToString());

            //set user id, for easy access from VedAstro.js
            await _jsRuntime.SetProperty("UserId", AppData.CurrentUser.Id.ToString());
            await _jsRuntime.SetProperty("UserName", AppData.CurrentUser.Name.ToString());


            //refresh page
            WebsiteTools.ReloadPage(_navigation);
        }
        else
        {    //show login failed message to user
             //note: this failure is already logged in API
            await _jsRuntime.ShowAlert("error", AlertText.LoginFailed, true);
        }

    }


    /// <summary>
    /// This method is called from JS when user signs in
    /// note: works because SignInButtonInstance was called earlier
    /// </summary>
    [JSInvokable]
    public async Task OnFacebookSignInSuccessHandler(JsonNode response)
    {
        //set user memory helper (don't wait, no point)
        await _jsRuntime.SetProperty("PreviousLoginMethod", "Facebook");

        var authResponse = response["authResponse"];
        //login failed, let user know, and exit here
        if (authResponse == null)
        {
            WebLogger.Error(AlertText.FacebookLoginFail);
            await _jsRuntime.ShowAlert("error", AlertText.LoginFailed, true);
            return;
        }

        //login success, get token out
        var accessToken = (string)(authResponse["accessToken"])!;

        //send token to api for verification
        var result = await ServerManager.WriteToServerXmlReply(AppData.URL.SignInFacebook, new XElement("Token", accessToken));

        //todo check if reply is pass or fail

        //read the reply from API server and do what
        //needs to be done after login
        await HandleAllLogin(result);

    }

    /// <summary>
    /// Starts facebook login process
    /// </summary>
    private async Task _OnClickSignInFacebook()
    {
        //log this
        WebLogger.Click("Facebook Sign In");

        await _jsRuntime.InvokeVoidAsync(JS.facebookLogin);
    }

    private async Task _OnClickSignInEmail()
    {
        //log this
        //WebLogger.Click("Email Sign In");

        _jsRuntime.FunFeaturePopUp("Email Sign In");

    }


}
