@namespace Website.Pages
@using VedAstro.Library;
@using System.Text.RegularExpressions
@using System.Globalization

<div class="vstack gap-1">
    @if (_apiCallData != null)
    {

        @if (_apiCallData == typeof(Time))
        {
            <span class="hstack gap2-2" style="font-weight: 600; color: red;">
                @ParamName
                <HelpIconTooltip ShowOnHover="true" HelpText="@ParamDescription" SmallIcon="true" />
            </span>
            <TimeLocationInput @ref="_inputTimeLocation" />
        }
        else if (_apiCallData == typeof(PlanetName))
        {
            <div class="input-group">
                <label class="input-group-text" style="font-weight: 600; color: red;" for="@InstanceId">
                    @ParamName
                    <HelpIconTooltip ShowOnHover="true" HelpText="@ParamDescription" SmallIcon="true" />
                </label>
                <select @bind="_inputPlanetName" class="form-select" id="@InstanceId">
                    <option selected>Choose...</option>
                    @{
                        <option value="All" style="color: blue">All</option>
                        <option value="Sun">Sun</option>
                        <option value="Moon">Moon</option>
                        <option value="Mars">Mars</option>
                        <option value="Mercury">Mercury</option>
                        <option value="Venus">Venus</option>
                        <option value="Jupiter">Jupiter</option>
                        <option value="Saturn">Saturn</option>
                        <option value="Rahu">Rahu</option>
                        <option value="Ketu">Ketu</option>
                    }
                </select>
            </div>
        }
        else if (_apiCallData == typeof(HouseName))
        {
            <div class="input-group">
                <label class="input-group-text" style="font-weight: 600; color: red;" for="@InstanceId">
                    @ParamName
                    <HelpIconTooltip ShowOnHover="true" HelpText="@ParamDescription" SmallIcon="true" />
                </label>
                <select @bind="_inputPlanetName" class="form-select" id="@InstanceId">
                    <option selected>Choose...</option>
                    @{
                        <option value="All" style="color: blue">All</option>
                        <option value="House1">House 1</option>
                        <option value="House2">House 2</option>
                        <option value="House3">House 3</option>
                        <option value="House4">House 4</option>
                        <option value="House5">House 5</option>
                        <option value="House6">House 6</option>
                        <option value="House7">House 7</option>
                        <option value="House8">House 8</option>
                        <option value="House9">House 9</option>
                        <option value="House10">House 10</option>
                        <option value="House11">House 11</option>
                        <option value="House12">House 12</option>
                    }
                </select>
            </div>
        }
        else if (_apiCallData == typeof(Angle))
        {
            <div class="input-group">
                <span class="input-group-text" style="font-weight: 600; color: red;" id="@InstanceId">
                    @ParamName
                    <HelpIconTooltip ShowOnHover="true" HelpText="@ParamDescription" SmallIcon="true" />
                </span>
                <input @bind="_inputTotalDegrees" type="text" class="form-control" placeholder="23.456">
            </div>
        }
        else if (_apiCallData == typeof(string))
        {
            <div class="input-group">
                <span class="input-group-text" style="font-weight: 600; color: red;" id="@InstanceId">
                    @ParamName
                    <HelpIconTooltip ShowOnHover="true" HelpText="@ParamDescription" SmallIcon="true" />
                </span>
                <input @bind="_inputText" type="text" class="form-control" placeholder="...">
            </div>
        }
        else if (_apiCallData == typeof(int))
        {
            <div class="input-group">
                <span class="input-group-text" style="font-weight: 600; color: red;" id="@InstanceId">
                    @ParamName
                    <HelpIconTooltip ShowOnHover="true" HelpText="@ParamDescription" SmallIcon="true" />
                </span>
                <input @bind="_inputNumber" type="number" class="form-control" placeholder="...">
            </div>
        }
        else if (_apiCallData.IsEnum)
        {
            <div class="input-group">
                <label class="input-group-text" style="font-weight: 600; color: red;" for="@InstanceId">@(Format.FormatName(_apiCallData.Name))</label>
                <select @bind="_inputEnumName" class="form-select" id="@InstanceId">
                    <option selected>Choose...</option>
                    @{
                        foreach (var value in Enum.GetValues(_apiCallData))
                        {
                            <option value="@value">@value</option>
                        }
                    }
                </select>
            </div>
        }
        else
        {
            <div>
                <Icon IconName="noto-v1:construction" />
                <p>UNDER CONSTRUCTION : <a href="@PageRoute.Donate">Donate</a> to speed development</p>
                <span style="font-size=4px;">@_apiCallData.FullName</span>
            </div>
        }

    }
</div>

@code {
    /// <summary>
    /// id used to sync labels and inputs, for HTML sake
    /// </summary>
    private static string InstanceId = Guid.NewGuid().ToString();
    private Type _apiCallData;
    private double _inputTotalDegrees;
    private string _inputText;
    private int _inputNumber;
    private string _inputPlanetName;
    private string _inputEnumName;
    private TimeLocationInput _inputTimeLocation;
    
    /// <summary>
    /// text shown inside help icon tooltip for param comes from c# code
    /// </summary>
    public string ParamDescription { get; set; } = "";

    /// <summary>
    /// Name will be displayed as label to id the input
    /// </summary>
    [Parameter]
    public string ParamName { get; set; }

    public void SetValue(Type apiCallData, string paramName, string paramDescription)
    {
        this._apiCallData = apiCallData;
        this.ParamName = ConvertCamelCaseToSpaces(paramName);
        this.ParamDescription = paramDescription;

        StateHasChanged(); //needed to propagate updates
    }

    public async Task Hide()
    {
        this._apiCallData = null;
        this.ParamName = null;
        this.ParamDescription = null;

        StateHasChanged(); //needed to propagate updates
    }

    // converts "houseName" to "House Name"
    private static string ConvertCamelCaseToSpaces(string text)
    {
        text = Regex.Replace(text, "(\\B[A-Z])", " $1");
        return CultureInfo.CurrentCulture.TextInfo.ToTitleCase(text);
    }

    public async Task<string> ToApiUrl()
    {
        var combinedUrl = "";

        if (_apiCallData == typeof(Time)) { combinedUrl = await _inputTimeLocation.ToApiUrl(); }
        else if (_apiCallData == typeof(PlanetName)) { combinedUrl = $"/PlanetName/{_inputPlanetName}"; }
        else if (_apiCallData == typeof(Angle)) { combinedUrl = $"/Angle/{_inputTotalDegrees}"; }
        else if (_apiCallData == typeof(string)) { combinedUrl = $"/Text/{_inputText}"; }
        else if (_apiCallData == typeof(int)) { combinedUrl = $"/Number/{_inputNumber}"; }
        else if (_apiCallData?.IsEnum ?? false) { combinedUrl = $"/{_apiCallData.Name}/{_inputEnumName}"; }


        return combinedUrl;
    }

    /// <summary>
    /// Check if all fields has been filled
    /// </summary>
    /// <returns></returns>
    public async Task<bool> IsValidationPassed()
    {
        //TEST 1 : ENUM
        if (_apiCallData?.IsEnum ?? false)
        {
            var isNotSelected = string.IsNullOrEmpty(_inputEnumName);

            if (isNotSelected)
            {
                //mark invalid & alert user
                await _jsRuntime.ShowAlert("error", $"Please select a {_apiCallData.Name} first!", true);
                return false;

            }
        }


        //TEST 2 : PLANET NAME
        if (_apiCallData == typeof(PlanetName))
        {
            var isNotSelected = string.IsNullOrEmpty(_inputPlanetName);
            if (isNotSelected)
            {
                //mark invalid & alert user
                await _jsRuntime.ShowAlert("error", $"Please select a Planet first!", true);
                return false;

            }
        }


        //if control reaches here than, it's valid
        return true;
    }



}
