@*

█ ▀█▀   █ █▀   ▄▀█   █▀▀ ▄▀█ █ █░░ ▄▄ █▀ ▄▀█ █▀▀ █▀▀   █▀█ █▀▀ ▄▀█ █░░ █ ▀█▀ █▄█
█ ░█░   █ ▄█   █▀█   █▀░ █▀█ █ █▄▄ ░░ ▄█ █▀█ █▀░ ██▄   █▀▄ ██▄ █▀█ █▄▄ █ ░█░ ░█░

█▀▄ █▀█   █▄░█ █▀█ ▀█▀   █▀▀ █▀▀ ▄▀█ █▀█ ░   █░░ █ █░█ █▀▀   █▀▀ █▀█ █▀█   █ ▀█▀   █ █▀   █▀▄ █▀▀ ▄▀█ █▀█
█▄▀ █▄█   █░▀█ █▄█ ░█░   █▀░ ██▄ █▀█ █▀▄ █   █▄▄ █ ▀▄▀ ██▄   █▀░ █▄█ █▀▄   █ ░█░   █ ▄█   █▄▀ ██▄ █▀█ █▀▄
 *@

@namespace Website.Pages
@using VedAstro.Library;
@using System.Xml.Linq
@using System.Reflection
@using System.Collections.Generic

<div class="vstack gap-3">

	<TypeSpecificInput @ref="param1" />
	<TypeSpecificInput @ref="param2" />
	<TypeSpecificInput @ref="param3" />
	<TypeSpecificInput @ref="param4" />
	<TypeSpecificInput @ref="param5" />

</div>



@code {
	TypeSpecificInput param1;
	TypeSpecificInput param2;
	TypeSpecificInput param3;
	TypeSpecificInput param4;
	TypeSpecificInput param5;
	List<TypeSpecificInput> paramList;


	protected async override Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			paramList = new() { param1, param2, param3, param4, param5 };
		}

	}

	//given data on params shows them on screen
	//input format List(param name, description, type)
	public void Show(List<(string, string, Type)> paramTypeList)
	{
		//list of all the inputs on screen
	    paramList = new() { param1, param2, param3, param4, param5 };

        //clear inputs from previous method (if any)
        foreach (var paramInput in paramList){ paramInput?.Hide();}


	    int index = 0;
	    foreach (var item in paramTypeList)
	    {
			//make visible with data
	        var paramName = item.Item1;
			var paramDescription = item.Item2;
	        var paramType = item.Item3;
	        paramList[index].SetValue(paramType, paramName, paramDescription);

			//goto next
	        index++;
	    }

		StateHasChanged(); //needed to propagate updates
	}

	public async Task<string> ToApiUrl()
	{
		var compiledUrl = "";

		//combine all the URLs of the inputs
		foreach (var paramInput in paramList)
		{
			if (paramInput != null)
			{
				compiledUrl += await paramInput.ToApiUrl() ?? "";
			}
		}

		return compiledUrl;

	}

	/// <summary>
	/// Check if all fields has been filled
	/// </summary>
	/// <returns></returns>
	public async Task<bool> IsValidationPassed()
	{
		//TEST 1 :
		foreach (var typeSpecificInput in paramList)
		{
			var isValid = await typeSpecificInput.IsValidationPassed(); //will raise own error
			if (!isValid) { return false; }
		}

		//if control reaches here than, it's valid
		return true;
	}

}
