@*

█ ▀█▀   █ █▀   ▄▀█   █▀▀ ▄▀█ █ █░░ ▄▄ █▀ ▄▀█ █▀▀ █▀▀   █▀█ █▀▀ ▄▀█ █░░ █ ▀█▀ █▄█
█ ░█░   █ ▄█   █▀█   █▀░ █▀█ █ █▄▄ ░░ ▄█ █▀█ █▀░ ██▄   █▀▄ ██▄ █▀█ █▄▄ █ ░█░ ░█░

█▀▄ █▀█   █▄░█ █▀█ ▀█▀   █▀▀ █▀▀ ▄▀█ █▀█ ░   █░░ █ █░█ █▀▀   █▀▀ █▀█ █▀█   █ ▀█▀   █ █▀   █▀▄ █▀▀ ▄▀█ █▀█
█▄▀ █▄█   █░▀█ █▄█ ░█░   █▀░ ██▄ █▀█ █▀▄ █   █▄▄ █ ▀▄▀ ██▄   █▀░ █▄█ █▀▄   █ ░█░   █ ▄█   █▄▀ ██▄ █▀█ █▀▄
 *@

@namespace Website.Pages
@using VedAstro.Library;
@using System.Xml.Linq
@using System.Reflection
@using System.Collections.Generic

<div class="vstack gap-4">
    
    <div class="vstack gap-3">

        <TypeSpecificInput @ref="_param1" />
        <TypeSpecificInput @ref="_param2" />
        <TypeSpecificInput @ref="_param3" />
        <TypeSpecificInput @ref="_param4" />
        <TypeSpecificInput @ref="_param5" />

    </div>

    @* ADVANCED *@
    <div>
        <span class="mb-3 p-1 hstack gap-2 border-bottom" style="font-size:18px; font-weight:300;">
            <Icon IconName="gala:settings" Size="30" /> Advanced (optional)
            <Icon ExtraClass="ms-auto" IconName="icon-park-solid:down-c" OnClickCallback="OnClickShowAdvanced" />
        </span>

        @* ADVANCED PANEL DROP *@
        <div id="AdvancedInputHolder" class="vstack gap-2" style="display: none">

            <TypeSpecificInput @ref="_optionalParam1" />
            <TypeSpecificInput @ref="_optionalParam2" />
            <TypeSpecificInput @ref="_optionalParam3" />
            <TypeSpecificInput @ref="_optionalParam4" />
            <TypeSpecificInput @ref="_optionalParam5" />

            @* AYANAMSA *@
            <div class="input-group mb-2">
                <label style="width:@GR.W134px;" class="input-group-text"><Icon ExtraClass="me-2" IconName="solar:stars-line-broken" /> Ayanamsa</label>
                <select @bind="_selectedAyanamsa" class="form-select">

                    <optgroup label="Easy">
                        @foreach (var ayanamsa in @AppData.SimpleAyanamsaAll)
                        {
                            <option value="@ayanamsa">@Format.FormatName(ayanamsa)</option>
                        }
                    </optgroup>
                    <optgroup label="Advanced">
                        @foreach (var ayanamsa in @AppData.AdvancedAyanamsaAll)
                        {
                            <option value="@ayanamsa">@ayanamsa</option>
                        }
                    </optgroup>
                </select>
            </div>
            
            @* FORMAT *@
            <div class="input-group mb-2">
                <label style="width: @GR.W134px;" class="input-group-text">
                    <Icon ExtraClass="me-2" IconName="lucide:file-output"/>
                    Format
                    <HelpIconTooltip ShowOnHover="true" HelpText="Output format, select JPEG for ready made table as image or JSON for parsable data" SmallIcon="true" />
                </label>
                <select @bind="SelectedFormat" class="form-select">
                    <option value="JSON">JSON</option>
                    <option value="JPEG">JPEG Table</option>
                </select>
            </div>

        </div>
    </div>
</div>

@code {

    /// <summary>
    /// if not specified will not be included in final URL
    /// default set to Raman, as used system-wide
    /// </summary>
    private string _selectedAyanamsa = SimpleAyanamsa.LahiriChitrapaksha.ToString();

    /// <summary>
    /// can be JSON or JPEG
    /// </summary>
    private string _selectedFormat = "JSON";

    /// <summary>
    /// can be JSON or JPEG
    /// </summary>
    public string SelectedFormat
    {
        get => _selectedFormat;
        set
        {
            _selectedFormat = value;
            
            // //only allow set for calls that support
            // //check if output type of selected method as code for needed format
            // Type returnType = SelectedMethod.MethodInfo.ReturnType;

            // bool isImplemented = false;
            // switch (value)
            // {
            //     case "JSON": isImplemented = typeof(IToJson).IsAssignableFrom(returnType);
            //         break;
            //     case "JPEG": isImplemented = typeof(IToJpeg).IsAssignableFrom(returnType);
            //         break;
            // }

            // //if implemented set it, else show not ready or supported message
            // if (isImplemented)
            // {
            //     _selectedFormat = value;
            // }
            // else
            // {
                
            // }

        }
    }


    TypeSpecificInput _param1;
    TypeSpecificInput _param2;
    TypeSpecificInput _param3;
    TypeSpecificInput _param4;
    TypeSpecificInput _param5;

    TypeSpecificInput _optionalParam1;
    TypeSpecificInput _optionalParam2;
    TypeSpecificInput _optionalParam3;
    TypeSpecificInput _optionalParam4;
    TypeSpecificInput _optionalParam5;

    //used later to generate final URL
    private List<ParameterMetadata> _requiredParams;
    private List<ParameterMetadata> _optionalParams;
    //list of all the inputs on screen
    List<TypeSpecificInput> paramListOptional;
    List<TypeSpecificInput> paramList;

    public OpenAPIMetadata SelectedMethod { get; set; }


    //TODO MARKED FOR DELETION
    protected override async Task OnInitializedAsync()
    {
        //NOTE: small needed else, components rendering gets messed up (time to pop)
        await _jsRuntime.ShowLoading(50);

        //other components can start loading now (heavy computation starts)
        // _mainPageInitDone = true;

        //show data on display
        _jsRuntime.HideAlert();

    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            paramList =  new() { _param1, _param2, _param3, _param4, _param5 };
            paramListOptional = new() { _optionalParam1, _optionalParam2, _optionalParam3, _optionalParam4, _optionalParam5 };
        }

    }

    private void OnClickShowAdvanced()
    {
        //make options slide out from below
        _jsRuntime.SlideToggle("AdvancedInputHolder");
    }


    //given data on params for a method shows them on screen
    //input format List(param name, description, type)
    public void Show(OpenAPIMetadata openApiMetadata)
    {
        //save for later use
        SelectedMethod = openApiMetadata;

        //extract parameters 
        List<ParameterMetadata> paramInfoList = openApiMetadata.GetParamList();
        //split into 2 lists, required and optional
        _requiredParams = paramInfoList.Where(x => x.IsOptional == false).ToList();
        _optionalParams = paramInfoList.Where(x => x.IsOptional == true).ToList();

        //clear inputs from previous method (if any)
        foreach (var paramInput in paramList) { paramInput?.Hide(); }

        //set new values
        for (int index = 0; index < _requiredParams.Count; index++){paramList[index].SetValue(_requiredParams[index]);}

        //clear inputs from previous method (if any)
        foreach (var paramInput in paramListOptional) { paramInput?.Hide(); }

        //set new values
        for (int index = 0; index < _optionalParams.Count; index++){paramListOptional[index].SetValue(_optionalParams[index]);}

        StateHasChanged(); //needed to propagate updates
    }


    public async Task<string> ToApiUrl()
    {
        var compiledUrl = "";

        //combine all the required param URLs
        foreach (var paramInput in paramList)
        {
            if (paramInput != null)
            {
                compiledUrl += await paramInput.ToApiUrl() ?? "";
            }
        }

        //combine all the optional param URLs that was modified (not same with default value)
        foreach (var paramInput in paramListOptional)
        {
            //not null and not same as default value
            if (paramInput != null && paramInput.DefaultValue != paramInput.GetValueFromInputField())
            {
                compiledUrl += await paramInput.ToApiUrl() ?? "";
            }
        }

        //add ayanamsa if changed
        var ayanamsaUrl = _selectedAyanamsa == SimpleAyanamsa.LahiriChitrapaksha.ToString() ? "" : $"/Ayanamsa/{_selectedAyanamsa}";
        compiledUrl += ayanamsaUrl;

        //add format if changed
        var formatUrl = SelectedFormat == "JSON" ? "" : $"/Format/{SelectedFormat}";
        compiledUrl += formatUrl;

        return compiledUrl;

    }

    /// <summary>
    /// Check if all fields has been filled
    /// </summary>
    /// <returns></returns>
    public async Task<bool> IsValidationPassed()
    {
        //TEST 1 :
        foreach (var typeSpecificInput in paramList)
        {
            var isValid = await typeSpecificInput.IsValidationPassed(); //will raise own error
            if (!isValid) { return false; }
        }

        //if control reaches here than, it's valid
        return true;
    }

}
