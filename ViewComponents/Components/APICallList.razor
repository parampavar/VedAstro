@*

█ ▀█▀   █ █▀   ▄▀█   █▀▀ ▄▀█ █ █░░ ▄▄ █▀ ▄▀█ █▀▀ █▀▀   █▀█ █▀▀ ▄▀█ █░░ █ ▀█▀ █▄█
█ ░█░   █ ▄█   █▀█   █▀░ █▀█ █ █▄▄ ░░ ▄█ █▀█ █▀░ ██▄   █▀▄ ██▄ █▀█ █▄▄ █ ░█░ ░█░

█▀▄ █▀█   █▄░█ █▀█ ▀█▀   █▀▀ █▀▀ ▄▀█ █▀█ ░   █░░ █ █░█ █▀▀   █▀▀ █▀█ █▀█   █ ▀█▀   █ █▀   █▀▄ █▀▀ ▄▀█ █▀█
█▄▀ █▄█   █░▀█ █▄█ ░█░   █▀░ ██▄ █▀█ █▀▄ █   █▄▄ █ ▀▄▀ ██▄   █▀░ █▄█ █▀▄   █ ░█░   █ ▄█   █▄▀ ██▄ █▀█ █▀▄
 *@

@namespace Website.Pages
@using VedAstro.Library;
@using System.Xml.Linq
@using System.Reflection
@using System.Timers

@* id is set so can auto scroll by url *@
<div id="APICallList">
    <IconTitle IconSize="AppData.DefaultIconSize" Title="Browse Calls" IconName="fluent:line-horizontal-4-search-16-filled" TitleHolder="h4">
        <ButtonRow>
            <span style="font-size: 25px;">
                @* id here is to edit data *@
                Count : <strong id="FoundMethodInfoCountElm">0</strong>
            </span>
        </ButtonRow>
    </IconTitle>

    @if (_isReady)
    {

        <div class="vstack gap-1">
            @* SEARCH *@
            <div class="hstack gap-2">
                <input id="APICallList-SearchInputElement" type="text" class="form-control ms-0 mb-2 ps-3" placeholder="Search...">
            </div>

            @* METHOD DATA LIST *@
            <div style="max-height: @GR.W667px; max-width: @GR.W764px; overflow-x: hidden; overflow-y: scroll;">

                @* LOADING ICON *@
                @* loading icon when list is being made, no loading popup because reduces user UX *@
                <div id="APICallList-LoadingIconHolder" class="mb-5" style="display: none;">
                    <div class="d-flex flex-column align-items-center">
                        <strong>Loading...</strong>
                        <div class="spinner-border" role="status" aria-hidden="true"></div>
                    </div>
                </div>
                @* RESULTS HOLDER *@
                @* id used to hide show children *@
                <div id="APICallList-AllMethodInfoHolder" >
                    @* list of method data *@
                    @foreach (var methodData in MethodListALL)
                    {
                        @* NOTE: method name as class used to show/hide *@
                        <div class="@methodData.Name MethodInfoHolder card shadow mt-2">
                            <div class="card-header d-flex justify-content-between">
                                @* NAME *@
                                <h6 class="mb-0">
                                    <IconText IconSize="42" FontSize="19" IconName="openmoji:european-name-badge">
                                        @(Format.FormatName(@methodData.Name))
                                    </IconText>
                                </h6>
                                @* OUTPUT RETURN TYPE *@
                                <div class="hstack gap-2">
                                    <IconText GapNumber="1" IconSize="30" FontSize="15" FontColor="@AppData.Grey" IconName="ph:terminal-fill">Output </IconText>
                                    <span style="font-weight: 800; color: #34a244;">@methodData.ReturnType</span>
                                </div>
                            </div>
                            <div class="card-body">
                                <div class="d-flex justify-content-between">

                                    @* DESCRIPTION *@
                                    <div style="max-width: @GR.W412px;">
                                        <div class="vstack gap-3">
                                            @* DESCRIPTION  TEXT*@
                                            <div class="hstack gap-2">
                                                <IconText GapNumber="1" IconSize="30" FontSize="15" FontColor="@AppData.Grey" IconName="dashicons:text"></IconText>
                                                <span style="">@methodData.Description.Truncate(200)</span>
                                            </div>

                                            @* INPUT TYPE *@
                                            <div class="hstack gap-2">
                                                <IconText GapNumber="1" IconSize="30" FontSize="15" FontColor="@AppData.Grey" IconName="mdi:input">Input </IconText>
                                                @{
                                                    var temp = methodData.ParameterTypes.Select(x => x.Name).ToArray();
                                                }
                                                <div class="hstack gap-3">
                                                    @for (var indexParamColor = 0; indexParamColor < temp.Length; indexParamColor++)
                                                    {
                                                        var paramTypeName = temp[indexParamColor];
                                                        var paramColor = ParamColor[indexParamColor]; //color based on number of param, to make each param look different
                                                        <span style="font-weight: 800; color: @paramColor">@paramTypeName,</span>
                                                    }
                                                </div>
                                            </div>
                                        </div>
                                    </div>

                                    @* CALL, COPY, GOTO CODE BUTTONS *@
                                    <div>
                                        <div class="vstack gap-2" style="scale: 0.85;">
                                            <IconButton FullWidth="true" ButtonText="Select API" TooltipText="Choose this API to build" IconName="carbon:select-window" OnClickCallback="@(()=>OnClickSelectAPIHandler(methodData))" SmallSize="true" />
                                            <IconButton FullWidth="true" ButtonText="Copy Python" TooltipText="Copy python snippet" IconName="vscode-icons:file-type-python" OnClickCallback="@(()=>WebsiteTools.OnClickCopyPythonSnippet(methodData))" SmallSize="true" />
                                            <IconButton FullWidth="true" ButtonText="Goto Code" TooltipText="See original source code" IconName="streamline:programming-browser-code-2-code-browser-tags-angle-programming-bracket" OnClickCallback="@(()=>WebsiteTools.OnClickGotoGithubCode(methodData))" SmallSize="true" />
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }

                </div>

            </div>
        </div>
    }

    <hr />
</div>
@code {

    /// <summary>
    /// Unique colors to id different params
    /// </summary>
    private static Dictionary<int, string> ParamColor = new Dictionary<int, string>
    {
        { 0, "#FF6EC7" }, // Neon Pink
        { 1, "#4D4DFF" }, // Neon Blue
        { 2, "#39FF14" }, // Neon Green
        { 3, "#FFFF00" }, // Neon Yellow
        { 4, "#FF9933" }, // Neon Orange
        { 5, "#9400D3" }, // Neon Purple
        { 6, "#FF33FF" }, // Neon Fuchsia
        { 7, "#00FFFF" }, // Neon Aqua
        { 8, "#FF3300" }, // Neon Red
        { 9, "#33FF33" }  // Neon Lime
    };

    private List<OpenAPIMetadata?> MethodListALL = new List<OpenAPIMetadata?>();

    /// <summary>
    /// Hide on default till all ready to show
    /// </summary>
    private bool _isReady = false;

    /// <summary>
    /// Event fired when select API button clicked
    /// </summary>
    public event EventHandler OnClickSelectAPI;


    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            //convert data to format understood by library (FlexSearch js)
            //extract out name and all search text
            //so that can be used to show and hide divs directly
            var methodInfoObjects = new List<object>();
            foreach (var metadata in MethodListALL)
            {
                var package = new
                {
                    name = metadata.Name,
                    description = metadata.SearchText
                };

                methodInfoObjects.Add(package);
            }

            //send all search text for creating an index by the special JS search library (FlexSearch)
            _jsRuntime.InvokeVoidAsync(JS.InitializeSearchForAPICallList, methodInfoObjects);

            //set count of all method as start so does not show 0
            _jsRuntime.SetText("#FoundMethodInfoCountElm", MethodListALL.Count.ToString());
        }
    }

    private void OnClickSelectAPIHandler(OpenAPIMetadata? methodData, dynamic component = null)
    {
        OnClickSelectAPI?.Invoke(this, methodData);
    }

    //█▀█ █▀█ █ █░█ ▄▀█ ▀█▀ █▀▀   █▀▄▀█ █▀▀ ▀█▀ █░█ █▀█ █▀▄ █▀
    //█▀▀ █▀▄ █ ▀▄▀ █▀█ ░█░ ██▄   █░▀░█ ██▄ ░█░ █▀█ █▄█ █▄▀ ▄█

    protected override async Task OnInitializedAsync()
    {
        //hide display
        _isReady = false;

        //NOTE: raw info about calculators is converted to hard data package, to speed up rendering on auto search
        MethodListALL = OpenAPIMetadata.FromMethodInfoList();

        //show data on display
        _isReady = true;
    }



    private async Task OnClickCopyAPI(string methodDataName)
    {
        //use js to transfer to clipboard
        await _jsRuntime.InvokeVoidAsync(JS.CopyToClipboard, methodDataName);

        //let user know link copied
        await _jsRuntime.ShowAlert("success", $"Call Name Copied!", false, 2600);
    }



}
