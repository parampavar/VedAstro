@namespace Desktop.Pages
@using VedAstro.Library;
@using System.Xml.Linq

@*
    Component that allows the input of geo location
    Note : When loaded location from browser is requested
*@

@using Microsoft.AspNetCore.Components
@using System.Xml.Linq
@using VedAstro.Library

@* get reference from program *@
@* @inject LocationService _locationService
 *@
<div class="hstack gap-1">
    <div class="input-group">
        <span class="input-group-text gap-2"><Icon IconName="streamline-emojis:globe-showing-americas" Size="34" />@LabelText</span>
        @*make input wider if without*@
        <input @ref="_locationNameInput" @onblur="SetCoordinatesFromNameInput" @bind="LocationName" style="font-weight: 600; font-size: 17px;" type="text" class="form-control" placeholder="New York">
    </div>
    @*dummy button to start location search*@
    <IconButton ExtraClass="ms-1" SmallSize="true" IconName="bx:search-alt" OnClickCallback="SetCoordinatesFromNameInput" />
</div>

@if (!HideLongLat)
{
    <div style="width: fit-content;">
        <label class="form-label">Longitude</label>
        <input @ref="_longitudeInput" @bind="Longitude" type="text" class="form-control" placeholder="103.82">
    </div>
    <div style="width: fit-content;">
        <label class="form-label">Latitude</label>
        <input @ref="_latitudeInput" @bind="Latitude" type="text" class="form-control" placeholder="1.352">
    </div>
}



@code {
    //FIELDS
    private ElementReference _locationNameInput;
    private ElementReference _longitudeInput;
    private ElementReference _latitudeInput;
    private string? _locationName = AppData.LastUsedLocation; //set default location, so that input is not blank
    private double? _longitude = null;//note needs to be nullable to be detected and filled
    private double? _latitude = null;


    /// <summary>
    /// Text shown next to
    /// </summary>
    [Parameter]
    public string LabelText { get; set; } = "Location";

    /// <summary>
    /// if set true will not auto update location after timeout
    /// default false, optional set
    /// </summary>
    [Parameter]
    public bool DisableAutoLocation { get; set; } = false;

    /// <summary>
    /// If true hides, long lat fields, else defaults to visible
    /// </summary>
    [Parameter]
    public bool HideLongLat { get; set; } = false;

    /// <summary>
    /// If true means latitude or longitude has been set by code or user
    /// used to check location validity
    /// </summary>
    //private bool IsLatitudeLongitudeDirty { get; set; } = false; //start as not dirty, clean

    //PARAMETERS
    public string LocationName
    {
        get => _locationName ?? AppData.ClientLocation.Name();
        set
        {
            //avoid same value to stop loops
            //avoid null values because random null set is called during page load
            if (_locationName == value || value == null) { return; }

            //update values directly via JS (faster), no refresh needed in blazor side
            _jsRuntime.SetProp(_locationNameInput, "value", value);

            //save the value to show
            _locationName = value;

            //save another copy of location name,
            //to be used as history autofill for next time
            AppData.LastUsedLocation = value;

        }
    }

    public double Longitude
    {
        get => _longitude ?? AppData.ClientLocation.Longitude();
        set
        {
            //avoid same value to stop loops
            //avoid null values because random null set is called during page load
            if (_longitude == value || value == null) { return; }

            //update values directly via JS (faster), no refresh needed in blazor side
            _jsRuntime.SetProp(_longitudeInput, "value", value);

            //save the value
            _longitude = value;

            //used to check location validity
            //IsLatitudeLongitudeDirty = true;
        }
    }

    public double Latitude
    {
        get => _latitude ?? AppData.ClientLocation.Latitude();
        set
        {
            //avoid same value to stop loops
            //avoid null values because random null set is called during page load
            if (_latitude == value || value == null) { return; }

            //update values directly via JS (faster), no refresh needed in blazor side
            _jsRuntime.SetProp(_latitudeInput, "value", value);

            //save the value
            _latitude = value;

            //used to check location validity
            // IsLatitudeLongitudeDirty = true;
        }

    }



    //█░░ █ █▀▀ █▀▀ █▀▀ █▄█ █▀▀ █░░ █▀▀   █▀▄▀█ █▀▀ ▀█▀ █░█ █▀█ █▀▄ █▀
    //█▄▄ █ █▀░ ██▄ █▄▄ ░█░ █▄▄ █▄▄ ██▄   █░▀░█ ██▄ ░█░ █▀█ █▄█ █▄▀ ▄█
    //METHODS THAT CAN IMPLEMENT ASYNC ERROR HANDLER


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        //try to auto set location gotten from
        //browser if no location name set within 1 second
        if (firstRender)
        {
            //if disable auto location is false,
            //only then set timeout for auto set
            //note: default is false, so will always run unless set
            if (!DisableAutoLocation)
            {
                //wait 1s before checking if it has been filled by user or other logic
                await Task.Delay(1500);
                if (string.IsNullOrEmpty(LocationName)) { await AutoSetLocation(); }

            }
        }

    }



    //PUBLIC METHODS

    public GeoLocation GetGeoLocation()
    {
        return new GeoLocation(this.LocationName, this.Longitude, this.Latitude);
    }

    /// <summary>
    /// Checks if input has valid location data, false if invalid
    /// If true, than GetGeoLocation can be called safely
    /// Note:
    /// technically this should not fail since defaulting of location
    /// will handle invalid input, this is if that fails,
    /// which it has so yeah, keep it up!
    /// </summary>
    public async Task<bool> IsValid()
    {
    TryAgain:

        //check if name has been set
        if (string.IsNullOrEmpty(LocationName)) { return false; }

        //if name already set but not yet load lat & long, then do it now
        //this makes it possible to save person with preset historical locations
        //if (!IsLatitudeLongitudeDirty)
        //{
        //    //update coordinates based on name
        //    await SetCoordinatesFromNameInput();
        //    goto TryAgain; //possible infinite loop (todo count check maybe)
        //}

        //if control reaches here than all good
        return true;
    }

    /// <summary>
    /// Updates all the fields in the component
    /// Note: Does not call state has changed, because called by parent
    /// </summary>
    public void UpdateData(GeoLocation newData)
    {
        LocationName = newData.Name();
        Longitude = newData.Longitude();
        Latitude = newData.Latitude();
    }



    //PRIVATE METHODS





    /// <summary>
    /// When location name text is changed this method is called to fetch longitude & latitude
    /// </summary>
    private void OnLocationNameUpdated() => SetCoordinatesFromNameInput();

    /// <summary>
    /// Takes location name and gets the coordinates
    /// and sets them in the input box
    /// </summary>
    private async Task SetCoordinatesFromNameInput()
    {
        const string defaultLocationCountry = "Singapore";


    TryAgain:
        var results = await Tools.AddressToGeoLocation(LocationName);

        //if fail, show message -> set default country -> try again
        var isEmpty = results.Payload.Name() == GeoLocation.Empty.Name();
        var failedCall = !results.IsPass;
        if (failedCall || isEmpty)
        {
            //alert user first with the wrong name
            var msg = $"The location \"{LocationName}\", not found!" +
                      $"\n Check spelling or try other nearby place.";
            await _jsRuntime.ShowAlert("error", msg, true);

            //change to default location & try again to get coordinates
            LocationName = defaultLocationCountry;
            goto TryAgain;

        }

        //update user typed location name to proper formatted one
        var geoLocal = results.Payload;
        LocationName = geoLocal.Name();
        //set new coordinates into view
        Longitude = geoLocal.Longitude();
        Latitude = geoLocal.Latitude();
    }

    /// <summary>
    /// Gets location from browser & sets the input boxes
    /// </summary>
    private async Task AutoSetLocation()
    {
        Console.WriteLine("Auto Setting Location");

        try
        {
            //TODO CLEAN UP CODE
            var apiKey = "AIzaSyDqBWCqzU1BJenneravNabDUGIHotMBsgE";
            AppData.ClientLocation = await DesktopTools.GetClientLocation(apiKey);


            //set new coordinates into view
            Longitude = AppData.ClientLocation.Longitude();
            Latitude = AppData.ClientLocation.Latitude();

            //if no location data available set default location
            //will return 0 when permission not given
            //try again with default location
            if (Longitude == 0 && Latitude == 0) { goto SetDefault; }

            //set gotten location name into view
            //var geoLocation = await GeoLocation.CoordinatesToGeoLocation(Longitude, (double)locationCoordinates.Latitude);
            LocationName = AppData.ClientLocation.Name();

            //exit
            return;
        }
        catch (Exception)
        {
            //if errors occur, set default name
        }


    SetDefault:
        //if fail set default location name
        LocationName = AppData.DefaultLocationCountry;

        //update coordinates based on name
        await SetCoordinatesFromNameInput();


    }


}
