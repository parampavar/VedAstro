@inherits LayoutComponentBase
@using VedAstro.Library
@using System.Xml.Linq
@using Website.Pages
@using System.Text.Json


@*
    NOTE : Components here are loaded same time as page,
    so component might not exist when page needs it.
    Thus page must check & wait during init.
*@


@*
    This makes sure MainLayout is loaded first.
    Else loading of other components start at the same time
    Use this pause to load needed data for app to run
*@
@if (_mainPageInitDone)
{
    <!--only wrap in mobile screen-->
    <div class="row flex-md-nowrap">

        <!-- DESKTOP ONLY : SIDEBAR -->
        <div @ref="AppData.DesktopSidebar" class="col-auto align-items-start d-none d-md-block">
            <!--only visible in Desktop-->
            <div class="vstack gap-2 mb-3 rounded-3 border shadow sticky-md-top p-md-3 bg-white" style="z-index: 100;">
                <!-- special style to make appear in night mode despite bg-white -->
                @* SEARCH *@
                <SearchBox />
                <SideBarButtons />
            </div>

            <!-- DEPLOYMENT STAMP : Not visible in mobile, no space to joke around -->
            <div class="sticky-bottom position-fixed mb-3 ms-5" style="color:@AppData.Grey; font-size: 8px; z-index: 1;">
                @*stack below other elms*@
                <div style="cursor: pointer;" @onclick="()=>_navigation.NavigateTo(PageRoute.MadeOnEarth)" class="hstack gap-1">
                    <span class="iconify" data-icon="ion:earth" data-width="10"></span>
                    <span>Made on Earth</span>
                </div>
                <div class="hstack gap-1">
                    <span class="iconify" data-icon="bi:rocket-fill" data-width="10"></span>
                    <!-- Stamped build version during deployment, used to identify code in the WILD -->
                    <span>@ThisAssembly.Version</span>
                </div>
                <div class="hstack gap-1">
                    <span class="iconify" data-icon="material-symbols:copyright-outline" data-width="11"></span>
                    <!-- Stamped build version during deployment, used to identify code in cloud -->
                    <span>2014 - 2023 VedAstro</span>
                </div>
                <div @onclick="OnClickStamp" style="cursor: pointer;" class="mt-1">
                    <img src="images/ce-fcc-recycle.svg">
                </div>
            </div>
        </div>

        <!-- MOBILE ONLY : SIDEBAR -->
        <div class="col-auto d-md-none">
            <nav class="navbar fixed-top" style="background:#1877f2;">
                <div class="container-fluid">
                    <a class="navbar-brand text-white ps-3 fs-4" href="@PageRoute.Home">VedAstro</a>
                    <button class="navbar-toggler text-white border-white" type="button" data-bs-toggle="offcanvas" data-bs-target="#offcanvasNavbar" aria-controls="offcanvasNavbar">
                        <Icon IconName="material-symbols:menu-open-rounded" Size="30" />
                    </button>
                    <div class="offcanvas offcanvas-end" tabindex="-1" id="offcanvasNavbar" aria-labelledby="offcanvasNavbarLabel">
                        <div class="offcanvas-body" data-bs-dismiss="offcanvas">
                            <!--Needed close mobile menu onclick-->
                            <div class="d-flex flex-wrap gap-2 mb-2 p-2 rounded-3 border shadow"><TopBarButtons /></div>
                            <hr />
                            <div class="vstack gap-2 mb-2 p-2 rounded-3 border shadow"><SideBarButtons /></div>
                        </div>
                    </div>
                </div>
            </nav>
        </div>

        <!-- CONTENT + REF BUTTONS -->
        <!-- in mobile push down to make room for mobile menu-->
        <div class="col mt-5 mt-md-0" style="min-width:954px;">

            <!-- REFERENCE BUTTONS : buttons placed here are
            linked to places not needed all the time, like About and Docs -->
            <!--only visible in Desktop-->
            <div style="min-width:954px;" class="rounded-3 mb-4 p-2 border shadow d-none d-md-flex gap-2 justify-content-between bg-white">
                <TopBarButtons />
            </div>

            <!-- PAGE CONTENT INSERTED HERE -->
            <div>@Body</div>

            <!-- FOOTER LINE AND SPACING -->
            <footer id="LegalComplianceFooter" class="mb-2 pt-3 border-top" style="opacity: 0.65; margin-top: @GR.W231px; font-size: 11px !important;">
                <div class="d-flex justify-content-between">

                    <div class="">
                        <div class="hstack gap-3">
                            <a href="@PageRoute.TermsOfService" class="nav-link p-0 text-body-secondary">Terms &amp; Conditions</a>
                            <a href="@PageRoute.PrivacyPolicy" class="nav-link p-0 text-body-secondary">Privacy Policy</a>
                        </div>
                    </div>

                    <div class="me-5">
                        @* SOCIAL ICONS *@
                        <ul class="list-unstyled d-flex">
                            <li class="ms-3"><a target="_blank" class="link-body-emphasis" href="@URL.KoFiPage"><Icon TooltipText="Buy us Coffee" IconName="line-md:coffee-half-empty-twotone-loop" Size="24" /></a></li>
                            <li class="ms-3"><a target="_blank" class="link-body-emphasis" href="@URL.KoFiPage"><Icon TooltipText="Buy us Cupcake" IconName="fluent-emoji:cupcake" Size="24"/></a></li>
                            <li class="ms-3"><a target="_blank" class="link-body-emphasis" href="@URL.Twitter"><Icon TooltipText="Updates via Twitter" IconName="skill-icons:twitter" Size="22"/></a></li>
                            <li class="ms-3"><a target="_blank" class="link-body-emphasis" href="@URL.PatreonPage"><Icon TooltipText="Become a Patron" IconName="logos:patreon" Size="22"/></a></li>
                            <li class="ms-3"><a target="_blank" class="link-body-emphasis" href="@URL.GitHubRepo"><Icon TooltipText="View Awesome Source Code" IconName="skill-icons:github-dark" Size="22"/></a></li>
                            <li class="ms-3"><a target="_blank" class="link-body-emphasis" href="@URL.Instagram"><Icon TooltipText="Updates via Instagram" IconName="skill-icons:instagram" Size="22"/></a></li>
                            <li class="ms-3"><a target="_blank" class="link-body-emphasis" href="@URL.YoutubeChannel"><Icon TooltipText="Watch How To Guide" IconName="logos:youtube-icon" Size="22"/></a></li>
                            <li class="ms-3"><a target="_blank" class="link-body-emphasis" href="@URL.FacebookPage"><Icon TooltipText="Updates via Facebook" IconName="devicon:facebook" Size="22"/></a></li>
                        </ul>

                    </div>
                </div>
            </footer>

        </div>
    </div>
}



@code
{
    private string subscribeEmailInput;
    private bool _loadExtra = true;

    /// <summary>
    /// notification after chart complete for UX sake
    /// </summary>
    private NotificationSound _soundPlayer;

    /// <summary>
    /// Marker to control component loading
    /// </summary>
    bool _mainPageInitDone;


    //█░░ █ █▀▀ █▀▀ █▀▀ █▄█ █▀▀ █░░ █▀▀   █▀▄▀█ █▀▀ ▀█▀ █░█ █▀█ █▀▄ █▀
    //█▄▄ █ █▀░ ██▄ █▄▄ ░█░ █▄▄ █▄▄ ██▄   █░▀░█ ██▄ ░█░ █▀█ █▄█ █▄▀ ▄█
    //METHODS THAT CAN IMPLEMENT ASYNC ERROR HANDLER

    protected override async Task OnInitializedAsync() => await InvokeAsync(async () => await _OnInitialized()).Try(_jsRuntime);

    protected override async Task OnAfterRenderAsync(bool firstRender) => await InvokeAsync(async () => await _OnAfterRender(firstRender)).Try(_jsRuntime);


    //█▀█ █▀█ █ █░█ ▄▀█ ▀█▀ █▀▀   █▀▄▀█ █▀▀ ▀█▀ █░█ █▀█ █▀▄ █▀
    //█▀▀ █▀▄ █ ▀▄▀ █▀█ ░█░ ██▄   █░▀░█ ██▄ ░█░ █▀█ █▄█ █▄▀ ▄█

    private async Task _OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            //TODO maybe called all the time not needed to be so
            await _jsRuntime.InvokeVoidAsync(JS.InitErrorCatcher);

            //log visit only 1 once when page is rendered
            await WebLogger.Visitor(_jsRuntime);

            _loadExtra = false;
            Console.WriteLine("ORI TAKEN OUT OF DOM!!!!!!!!!!!!");

        }
    }

    private async Task _OnInitialized()
    {
        //NOTE
        //control comes here after Program, all needed initialization
        //done here before page/components are loaded

        //1: do little check to make sure all functions in Interop is accounted for
        await InteropHealthCheck();

        //3: to be accessed by classes todo oblivion
        AppData.HttpClient = _client;

        //4: used later to create HTTP client with correct base address todo oblivion
        AppData.BaseAddress = new Uri(_navigation.BaseUri);

        //5: get visitor ID if available
        AppData.VisitorId = await WebsiteTools.TryGetVisitorId(_jsRuntime);

        //6: retrieve login status from previous visit if available
        await TryGetPreviousLogin();

        //2: create url based on beta or stable
        //note : must do after
        //---------------------
        bool debugMode;


        //user already logged in, get debug mode from browser setting if any
        //note: "debug mode" is stored local instead of online, because possible mobile use under same account
        debugMode = await WebsiteTools.GetDebugModeBool();

        AppData.URL = new URL(WebsiteTools.GetIsBetaRuntime(), debugMode);

        //---------------------


        //7: prepare server communicator
        AppData.API = new VedAstroAPI(AppData.CurrentUser.Id, AppData.VisitorId, _jsRuntime, AppData.URL);

        //8:ask server to prepare person list, will be available instantly later when user needs it
        AppData.API.Person.PreparePersonList();

        //get location from IP (uses browser cache if any else google API)
        AppData.ClientLocation = await WebsiteTools.GetClientLocation();

        //log it
        WebLogger.Data(AppData.ClientLocation.ToString());


        //other components can start loading now
        _mainPageInitDone = true;

        //7: check if on latest version (else raise warning)
        await CheckRaiseOutdatedWarning();

    }

    /// <summary>
    /// Gets current build version with the one in GitHub
    /// compares commit number to check
    /// </summary>
    private async Task CheckRaiseOutdatedWarning()
    {
        #region RELEASE

        //higher number is latest
        var currentCommitNo = int.Parse(ThisAssembly.CommitNumber);

        //uses tags to detect correct version
        var latestPublishedCommitNo = await WebsiteTools.GetLatestCommitNumber();

        //if lower raise warning
        if (currentCommitNo < latestPublishedCommitNo)
        {
            await AppData.JsRuntime.ShowAlert(
                icon: "warning",
                title: "Please Update!",
                descriptionText: "Press <kbd>CTRL + SHIFT + R</kbd> to get <strong>latest</strong> version. " +
                                 $"Also try clearing your <strong>Cookies & Cache</strong>. <br>" +
                                 $"<span style=\"font-size: 14px;color: grey;\">Your version is {currentCommitNo}, latest is {latestPublishedCommitNo}</span>");

            //reloads page
            await AppData.JsRuntime.ReloadPage();
        }

        #endregion
    }

    /// <summary>
    /// Checks if all functions expected by Blazor is defined Interop and vice versa
    /// This check maintains a clean relationship, self diagnosis system
    /// </summary>
    /// <returns></returns>
    private async Task InteropHealthCheck()
    {
        //get all JS functions in Interop.js
        var functionsListRaw = await _jsRuntime.InvokeAsync<JsonElement>(JS.GetInteropFuncList);
        List<string> jsList = functionsListRaw.EnumerateArray().Select(funcName => funcName.ToString()).ToList();

        //calls in blazor would be more since there direct calls to libs aswell
        List<string> blazorList = typeof(JS).GetFields().Select(prop => prop.Name).ToList();

        //just make sure every call in Interop.js is accounted for
        foreach (var jsFunc in jsList)
        {
            //JS function name should exist in Blazor list
            //NOTE : meaning declared or expecting to be called, though not, just good business policy
            var noneFound = blazorList.FindAll(blazFunc => blazFunc.Equals(jsFunc)).Count < 1;

            //raise alarm
            if (noneFound)
            {
                Console.WriteLine($"BLZ : Interop health check FAIL > {jsFunc}");
                throw new Exception($"Interop JS Function not found in Blazor : {jsFunc}");
            }
        }

        Console.WriteLine("Interop health check PASS");

    }

    /// <summary>
    /// Checks if previous login data exist in browser's local storage
    /// </summary>
    private async Task TryGetPreviousLogin()
    {
        //check if login already exist in localstorage
        var userDataXml = await _jsRuntime.GetProperty("UserData");

        if (userDataXml is not null or "")
        {
#if DEBUG
    Console.WriteLine("BLZ: Using Previous Login Data");
#endif
            AppData.CurrentUser = UserData.FromXml(XElement.Parse(userDataXml)) ?? UserData.Guest;
        }
    }

    private async Task OnClickStamp()
    {
        //count click
        AppData.StampClickCount++;

        switch (AppData.StampClickCount)
        {
            case 2: await _jsRuntime.ShowAlert("success", $"You clicked this 2x times, why?", true); break;
            case 4: await _jsRuntime.ShowAlert("success", $"Stop clicking! There is no \"Cake\" here.", true); break;
            case 6: AppData.Go(PageRoute.EasterEgg, true); break;
        }
    }

    private async Task OnClickSubscribeNewsletter()
    {

        //loading box show
        await _jsRuntime.ShowLoading();

        //if empty or nothing more than 3 chars than ask user if is awake
        var isInvalidInput = string.IsNullOrEmpty(subscribeEmailInput) || subscribeEmailInput.Length < 3;

        if (isInvalidInput)
        {
            var msg = "You clicked <strong>Subscribe</strong> and then didn't input an email. Please try again...";
            await _jsRuntime.ShowAlert("question", $"No email, {AlertText.RandomNoun()}?", msg);
        }
        else
        {
            //add message to API Messages book
            await WebsiteTools.SendMailToAPI("Email Subscribe", $"EMAIL : {subscribeEmailInput}");

            //say thank you and will get back
            var msg = "We'll update you on latest VedAstro news 📰 and we promise never to spam you. 🙏";
            await _jsRuntime.ShowAlert("success", "Subscribed! 📧", msg);
        }

    }
}



