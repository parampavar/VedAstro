@using System.Xml.Linq
@using VedAstro.Library
@attribute [Route(PageRoute.VisitorList)]
<PageTitle>Visitor List</PageTitle>
<PageTop Title="Visitor List" IconName="fluent:people-list-20-filled">
    <Description>List of visitors to the site</Description>
    <ButtonsRow>
        <IconButton ButtonText="Reset" OnClickCallback="ShowAllVisitorLog"></IconButton>
        <IconButton ButtonText="Unique Visitor" OnClickCallback="ShowUniqueVisitors"></IconButton>
        <IconButton ButtonText="Unique User" OnClickCallback="ShowUniqueUsers"></IconButton>
    </ButtonsRow>
</PageTop>

<style>
    /*Makes table fit screen width*/
    table {
        table-layout: fixed;
    }
    /*Hides row overflow*/
    td {
        overflow: hidden;
        white-space: nowrap;
    }
</style>

@if (_selectedUserId != "")
{
    <div class="hstack gap-3">
        <p class="fw-bold">Selected User:@_selectedUserId</p>
        <IconButton ButtonText="Delete All" OnClickCallback="()=>DeleteVisitorByUserId(_selectedUserId)"></IconButton>
    </div>
}
@if (_selectedVisitorId != "")
{
    <div class="hstack gap-3">
        <p class="fw-bold">Selected Visitor:@_selectedVisitorId</p>
        <IconButton ButtonText="Delete All" OnClickCallback="()=>DeleteVisitorByVisitorId(_selectedVisitorId)"></IconButton>
    </div>
}

<table class="table table-bordered text-nowrap">
    <thead class="table-dark">
        <tr>
            <th>UserId</th>
            <th>VisitorId</th>
            <th style="width: 277px;">Url</th>
            <th style="width: 230px;">Data</th>
            <th>TimeStamp</th>
            <th>Action</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var visitorXml in sortedVisitorList)
        {
            <tr>
                <td class="link-primary" @onclick="@(()=> FilterByUserId(visitorXml.Element("UserId")?.Value))">@visitorXml.Element("UserId")?.Value</td>
                <td class="link-primary" @onclick="@(()=> FilterByVisitorId(visitorXml.Element("VisitorId")?.Value))">@visitorXml.Element("VisitorId")?.Value</td>
                <td>@visitorXml.Element("Url")?.Value</td>
                <td>@visitorXml.Element("Data")?.Value;</td>
                <td>@visitorXml.Element("TimeStampServer")?.Value</td>
                <td class="link-primary" @onclick="@(()=> ViewVisitor(visitorXml))">View</td>
            </tr>
        }

    </tbody>
</table>

@code {

    string _selectedUserId = "";
    string _selectedVisitorId = "";
    // Visitor list that is manipulated for showing
    List<XElement> sortedVisitorList = new List<XElement>();
    //Raw unmodified visitor list from server
    List<XElement> rawVisitorList = new List<XElement>();


    protected override async Task OnInitializedAsync()
    {
       await _jsRuntime.ShowLoading();

        //get all people from API server
        rawVisitorList = await WebsiteTools.GetVisitorList(AppData.CurrentUser.Id);

        await ShowAllVisitorLog();

        _jsRuntime.HideAlert();

    }


    private async Task ShowAllVisitorLog()
    {
        //reset selection if any
        _selectedVisitorId = "";
        _selectedUserId = "";

        //make it visible
        sortedVisitorList = rawVisitorList.ToList();

        StateHasChanged();

    }
    private async Task ShowUniqueVisitors()
    {
        //reset selection if any
        _selectedVisitorId = "";
        _selectedUserId = "";


        var uniqueVisitorIds = (rawVisitorList.Select(x => x.Element("VisitorId")?.Value).Distinct()).ToList();

        //remove old data
        sortedVisitorList.Clear();

        foreach (var visitorId in uniqueVisitorIds)
        {
            //get all visitor xml by visitor id
            var x = rawVisitorList.Where(x => x.Element("VisitorId")?.Value == visitorId);
            //pick out the element with browser data to represent others
            //"Location" & "BrowserData" only exist in unique 1st visit
            var y = (from xElement in x
                     where
                         xElement.Element("Location") != null &&
                         xElement.Element("BrowserData") != null
                     select xElement).FirstOrDefault();

            //if none found, use back 1 from top list
            y = y ?? x.FirstOrDefault();
            sortedVisitorList.Add(y);
        }

        StateHasChanged();

    }
    private async Task ShowUniqueUsers()
    {
        //reset selection if any
        _selectedVisitorId = "";
        _selectedUserId = "";


        var uniqueUserIds = (rawVisitorList.Select(x => x.Element("UserId")?.Value).Distinct()).ToList();

        //remove old data
        sortedVisitorList.Clear();

        foreach (var visitorId in uniqueUserIds)
        {
            //get all visitor xml by visitor id
            var x = rawVisitorList.Where(x => x.Element("UserId")?.Value == visitorId);
            //pick out the element with browser data to represent others
            //"Location" & "BrowserData" only exist in unique 1st visit
            var y = (from xElement in x
                     where
                         xElement.Element("Location") != null &&
                         xElement.Element("BrowserData") != null
                     select xElement).FirstOrDefault();

            //if none found, use back 1 from top list
            y = y ?? x.FirstOrDefault();
            sortedVisitorList.Add(y);
        }

        StateHasChanged();
    }


    private async Task FilterByUserId(string? userId)
    {
       await _jsRuntime.ShowLoading();

        //set selected user id for display & deleting
        _selectedUserId = userId;
        _selectedVisitorId = ""; //hide the other

        //filter list to show all visits made by this unique ID
        sortedVisitorList = (from xElement in rawVisitorList
                             where xElement.Element("UserId")?.Value == userId
                             select xElement).ToList();

        StateHasChanged();

        _jsRuntime.HideAlert();

    }

    private async Task FilterByVisitorId(string? visitorId)
    {
       await _jsRuntime.ShowLoading();

        //set selected user id for display & deleting
        _selectedVisitorId = visitorId;
        _selectedUserId = ""; //hide the other


        //filter list to show all visits made by this unique ID
        sortedVisitorList = (from xElement in rawVisitorList
                             where xElement.Element("VisitorId")?.Value == visitorId
                             select xElement).ToList();

        StateHasChanged();

        _jsRuntime.HideAlert();

    }

    private async Task ViewVisitor(XElement visitorXml)
    {

        //extract all the available data out of log record to be showed
        //var userId = visitorXml.Element("UserId")?.Value;
        //var visitorId = visitorXml.Element("VisitorId")?.Value;
        //var url = visitorXml.Element("Url")?.Value;
        //var originUrl = visitorXml.Element("OriginUrl")?.Value;
        //var timeStamp = visitorXml.Element("TimeStamp")?.Value;
        //var organization = visitorXml.Element("Location")?.Element("organization")?.Value;
        //var city = visitorXml.Element("Location")?.Element("city")?.Value;
        //var region = visitorXml.Element("Location")?.Element("region")?.Value;
        //var ip = visitorXml.Element("Location")?.Element("ip")?.Value;
        //var country = visitorXml.Element("Location")?.Element("country")?.Value;
        //var timezone = visitorXml.Element("Location")?.Element("timezone")?.Value;
        //var browser = visitorXml.Element("BrowserData")?.Element("browser")?.Element("name")?.Value;
        //var osName = visitorXml.Element("BrowserData")?.Element("os")?.Element("name")?.Value;
        //var osVersion = visitorXml.Element("BrowserData")?.Element("os")?.Element("version")?.Value;
        //var deviceModel = visitorXml.Element("BrowserData")?.Element("device")?.Element("model")?.Value;
        //var deviceVendor = visitorXml.Element("BrowserData")?.Element("device")?.Element("vender")?.Value;
        //var deviceType = visitorXml.Element("BrowserData")?.Element("device")?.Element("type")?.Value;
        //var errorMessage = visitorXml.Element("Error")?.Element("Message")?.Value;
        //var errorTime = visitorXml.Element("Error")?.Element("Time")?.Value;
        //var data = visitorXml.Element("Data")?.Value;
        //var screenWidth = visitorXml.Element("ScreenData")?.Element("Width")?.Value;
        //var screenHeight = visitorXml.Element("ScreenData")?.Element("Height")?.Value;
        //var screenOrientation = visitorXml.Element("ScreenData")?.Element("Orientation")?.Value;
        //var screenColorDepth = visitorXml.Element("ScreenData")?.Element("ColorDepth")?.Value;
        var stringXml = visitorXml.ToString();

        var alertData = new
        {
            html = $@"<p>{stringXml}</p>"
        };



        await _jsRuntime.ShowAlert(alertData);

    }

    private async Task DeleteVisitorByUserId(string userId)
    {
        //convert list to xml for sending
        var userIdXml = new XElement("UserId", userId);

        var result = await ServerManager.WriteToServerXmlReply(AppData.URL.DeleteVisitorByUserId, userIdXml);

        if (result.IsPass)
        {
            //delete local copy so that no need to refresh from server
            rawVisitorList.RemoveAll(x => x.Element("UserId")?.Value == userId);
            await ShowAllVisitorLog();

            await _jsRuntime.ShowAlert("success", $"{userId} deleted successfully!", false, timer: 1000);
        }
        else
        {
            await _jsRuntime.ShowAlert("error", $"{userId} delete failed!", false, timer: 1000);
        }

    }

    private async Task DeleteVisitorByVisitorId(string visitorId)
    {
        //convert list to xml for sending
        var visitorIdXml = new XElement("VisitorId", visitorId);

        var result = await ServerManager.WriteToServerXmlReply(AppData.URL.DeleteVisitorByVisitorId, visitorIdXml);

        if (result.IsPass)
        {
            //delete local copy so that no need to refresh from server
            rawVisitorList.RemoveAll(x => x.Element("VisitorId")?.Value == visitorId);
            await ShowAllVisitorLog();

            await _jsRuntime.ShowAlert("success", $"{visitorId} deleted successfully!", false, timer: 1000);
        }
        else
        {
            await _jsRuntime.ShowAlert("error", $"{visitorId} delete failed!", false, timer: 1000);
        }

    }

}
