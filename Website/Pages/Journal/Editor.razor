@attribute [Route(PageRoute.JournalEditorParam)]

@using VedAstro.Library

<PageTitle>@_pageTitle</PageTitle>

<div class="vstack gap-3" style="width: @GR.W352px;">

    <TimeInputSimple @ref="_timeInput" LabelText="Time" />
    <GeoLocationInput @ref="_geoLocationInput" LabelText="Location" HideLongLat="@true" />

    <div class="input-group ">
        <span class="input-group-text" style="min-width: @GR.W97px;">Name</span>
        <input @bind="inputName" type="text" class="form-control" placeholder="Marriage">
    </div>
    <div class="input-group ">
        <span class="input-group-text" style="min-width: @GR.W97px;">Name</span>
        <textarea style="min-height: 132px;" class="form-control" @bind="inputDescription" placeholder="All went well"></textarea>
    </div>
    <div class="input-group ">
        <label class="input-group-text" style="min-width: @GR.W97px;">Weight</label>
        <select @bind="inputWeight" class="form-select">
            <option value="Major">Major</option>
            <option value="Normal" selected>Normal</option>
            <option value="Minor">Minor</option>
        </select>
    </div>
    <div class="input-group ">
        <label class="input-group-text" style="min-width: @GR.W97px;">Nature</label>
        <select @bind="inputNature" class="form-select">
            <option value="" selected>Make choice...</option>
            <option style="color: green; font-weight: bold" value="Good">Good</option>
            <option style="color: red;font-weight: bold" value="Bad">Bad</option>
            <option style="color: grey;font-weight: bold" value="Neutral">Neutral</option>
        </select>
    </div>
    <div class="d-flex justify-content-between">
        <IconButton Color="primary" SmallSize="true" IconName="akar-icons:arrow-back" ButtonText="Back" OnClickCallback="OnClickCancelBack" />
        <IconButton Color="danger" SmallSize="true" IconName="fluent:delete-20-regular" ButtonText="Delete" OnClickCallback="OnClickDelete" />
        <IconButton Color="success" SmallSize="true" IconName="bx:save" ButtonText="Save" OnClickCallback="OnClickSave" />
    </div>
</div>



@code {

    private LifeEvent SelectedLifeEvent { get; set; }

    private string _pageTitle;

    private string inputName;
    private string inputDescription;
    private string inputNature = "";
    private string inputWeight = "";
    private TimeInputSimple? _timeInput;
    private GeoLocationInput _geoLocationInput;

    [Parameter]
    public string LifeEventIdUrl { get; set; }

    [Parameter]
    public string PersonIdUrl { get; set; }

    public Person SelectedPerson { get; set; }


    protected override async Task OnInitializedAsync()
    {
        _jsRuntime.ShowLoading();

        //need little delay for components to finish loading (time input)
        await Task.Delay(400);

        await RenderPage();

        //hide loading message
        _jsRuntime.HideLoading();

    }

    /// <summary>
    /// Renders page based on page mode set during init
    /// </summary>
    private async Task RenderPage()
    {

        //try get person profile from ID
        SelectedPerson = await WebsiteTools.GetPersonById(PersonIdUrl, _jsRuntime);

        //set page title
        _pageTitle = $"Life Event | {SelectedPerson.Name}";


        //get data of life event
        var newLifeEvent = new LifeEvent(PersonIdUrl, LifeEventIdUrl, SelectedPerson.TimeNowAtBirthLocation, "", "", "", "Normal");

        SelectedLifeEvent = SelectedPerson.LifeEventList.Where(lE => lE.Id == LifeEventIdUrl).FirstOrDefault() ?? newLifeEvent;

        //place data into fields
        inputName = SelectedLifeEvent.Name;
        inputDescription = SelectedLifeEvent.Description;
        inputNature = SelectedLifeEvent.Nature;
        inputWeight = SelectedLifeEvent.Weight;
        _geoLocationInput.UpdateData(SelectedLifeEvent.StartTime.GetGeoLocation());
        _timeInput?.SetTime(SelectedLifeEvent.StartTime);
    }


    private async Task OnClickCancelBack()
    {
        //get the previously saved page before login, if any else default to home
        var previousPage = await _jsRuntime.GetProperty("PreviousPage");
        AppData.Go(previousPage);

    }

    /// <summary>
    /// Same as updating a person record
    /// </summary>
    private async Task OnClickSave()
    {
        //show loading message
        await _jsRuntime.ShowLoading();

        //only continue if passed input field validation
        if (!(await IsValidationPassed())) { return; }

        //get updated life event
        var updatedLifeEvent = await GetLifeEventFromInputs();

        //update or add this life event to caller
        var alreadyExist = SelectedPerson.LifeEventList.Where(le => le.Id == updatedLifeEvent.Id).Any();
        //delete old
        if (alreadyExist) { SelectedPerson.LifeEventList.RemoveAll(le => le.Id == updatedLifeEvent.Id); }

        //add updated as new
        SelectedPerson.LifeEventList.Add(updatedLifeEvent);

        //update person in API, includes message
        await AppData.API.Person.UpdatePerson(SelectedPerson);

        _jsRuntime.PlayDoneSound();

        //ask user if wants to go back to previous page or stay
        //prepare question to ask user
        var alertData = new
        {
            icon = "question",
            title = $"Go back to previous page?",
            html = $"You can also stay in this page and continue edits",
            showCancelButton = true,
            confirmButtonColor = "#3085d6",
            cancelButtonColor = "#d33",
            confirmButtonText = "Go Back",
            cancelButtonText = "Stay"
        };
        var sweetAlertResult = await _jsRuntime.ShowAlertResult(alertData);

        //if user clicked continue, then 00:00 is correct, so pass validation
        var continueClicked = sweetAlertResult.GetProperty("isConfirmed").GetBoolean();

        //stay
        if (!continueClicked)
        {
            return;
        }
        //go back
        else
        {
            //wait a little and send user back to previous page
            await _jsRuntime.ShowAlert("info", $"Going back to previous page", false, 500);
            _jsRuntime?.GoBack();
        }


    }


    /// <summary>
    /// Checks if validation of all input fields
    /// </summary>
    private async Task<bool> IsValidationPassed()
    {
        //TEST 1 : Name
        if (String.IsNullOrWhiteSpace(inputName))
        {
            //mark invalid & alert user
            await _jsRuntime.ShowAlert("error", AlertText.EnterName, true);
            return false;
        }

        //TEST 2 : Nature
        if (String.IsNullOrWhiteSpace(inputNature))
        {
            //mark invalid & alert user
            await _jsRuntime.ShowAlert("error", "Was the event <strong>Good</strong> or <strong>Bad</strong>?", true);
            return false;
        }



        //if control reaches here than, it's valid
        return true;

    }

    private async Task<LifeEvent> GetLifeEventFromInputs()
    {
        //get event from fields
        var time = await _timeInput.GetTime(_geoLocationInput.GetGeoLocation());
        var newEvent = new LifeEvent("", SelectedLifeEvent.Id, time, inputName, inputDescription, inputNature, inputWeight);

        return newEvent;
    }


    /// <summary>
    /// Deletes life event from person and updates person
    /// </summary>
    private async Task OnClickDelete()
    {

        //show loading message
        await _jsRuntime.ShowLoading();

        //only continue if passed input field validation
        if (!(await IsValidationPassed())) { return; }

        //update or add this life event to caller
        var alreadyExist = SelectedPerson.LifeEventList.Where(le => le.Id == LifeEventIdUrl).Any();

        //delete old
        if (alreadyExist) { SelectedPerson.LifeEventList.RemoveAll(le => le.Id == LifeEventIdUrl); }

        //update person in API, includes message
        await AppData.API.Person.UpdatePerson(SelectedPerson);
        _jsRuntime.PlayDoneSound();

        //send back to previous page
        await _jsRuntime.ShowAlert("info", $"Going back to previous page", false, 500);
        _jsRuntime?.GoBack();
    }

}
