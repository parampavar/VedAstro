@using Newtonsoft.Json.Linq;
@using VedAstro.Library
@attribute [Route(PageRoute.Import)]

<PageTitle>Easy Import | VedAstro</PageTitle>

<PageTopSideImage ImageName="life-predictor-banner.png"
                  Title="Import Person"
                  DescriptionText="Easily import birth details from apps Like Jagannatha Hora, Light of KP (LOKPA) or Parashara's Light 9" />

<div>
    @* INPUT *@
    <div class="d-md-flex justify-content-between">
        @*SELECTOR*@
        <div class="me-5">
            <div class="vstack gap-4">
                @* APP SELECT *@

                <div >
                    <IconTitle IconName="logos:apple-app-store" Title="Select App" TitleHolder="h5" MaxWidthPx="@((int)GR.W667)"/>
                    <div class="input-group"><label class="input-group-text" style="font-weight: 600; color: red;" for="ed64a086-62cd-4141-b778-421d2e1399e1">Import from</label><!--!-->
                        <select @bind="SelectedAppName" class="form-select" id="ed64a086-62cd-4141-b778-421d2e1399e1">
                            <option value="" selected>Make a choice...</option>
                            <option value="JagannathaHora">Jagannatha Hora</option>
                            <option value="LOKPA">Light of KP (LOKPA)</option>
                            <option value="ParasharasLight">Parashara's Light</option>
                            <option value="Maitreya">Maitreya</option>
                        </select>
                    </div>
                </div>

                @* FILE UPLOAD *@

                <div @ref="fileUploadInputHtml" style="display: none;">
                    <div class="vstack gap-3 input-group mb-3">
                        <div class="form-control" style="width: 100%; border-radius: 6px;">
                            <InputFile Multiple id="inputGroupFile02" OnChange="@OnInputFileChange"/>
                        </div>
                    </div>

                    @{

                    }
                    <div @ref="uploadFileInfoHolder" class="hstack gap-3" style="display: none;">
                        <div class="hstack gap-2">
                            <Icon IconName="icon-park:file-success" Size="30"/>
                            Read Complete!
                        </div>
                        <span class="mt-1">Size : <strong>@Tools.BytesToHumanText(UploadedFile?.Size ?? 0)</strong></span>
                    </div>

                </div>

                @* -------- BOTTOM BUTTONS --------*@
                <IconButton ButtonText="Import" FullWidth="true" FontSize="17px" FontWeight="500" TextCenter="true" SmallSize="true" Color="success" IconName="mdi:import" OnClickCallback="@OnClickImport"/>

            </div>

        </div>

        @*SIDEBAR*@
        <div class="mt-md-0 mt-4 me-md-5">
            <!--when small give at top-->
            <div class="vstack gap-0 gap-md-2">
                <InfoBox MaxWidth="365" Title="Private" Description="Person data is private &amp; not visible to public." IconName="flat-color-icons:privacy"/>
                <InfoBox MaxWidth="365" FullWidth="@true" Title="Cloud Sync" Description="Free cloud storage for storing horoscopes accross devices" IconName="ic:baseline-cloud-done"/>
            </div>
        </div>
    </div>
    
    @* PREVIEW TABLE *@
    <div class="mt-4">
        @* MESSAGE *@
        <div >
            <div class="d-flex justify-content-center">
                @* important needed to override flex *@
                <span class="" style="color: @AppData.Grey; font-size: 14px;">Check imported preview data below before click <strong>Import</strong></span>
            </div>
        </div>

        @* TABLE *@
        <table @ref="ListPreviewTable" class="table table-bordered table-hover" style="display: none;">
            <thead class="table-dark">
            <tr>
                <th>Name</th>
                <th>Birth Date & Time</th>
                <th>Location</th>
            </tr>
            </thead>
            <tbody>
            @for (int index = 0; index < _importedPersonList.Count; index++)
            {
                <tr>
                    <td>@_importedPersonList[index].Name</td>
                    <td>@_importedPersonList[index].BirthTimeString</td>
                    <td>@_importedPersonList[index].GetBirthLocation().ToString().Truncate(30)</td> @*we don't need whole location*@
                </tr>
            }
            </tbody>
        </table>
    </div>

</div>

@code {
    ElementReference ListPreviewTable;
    ElementReference uploadFileInfoHolder;
    ElementReference fileUploadInputHtml;

    TimeLocationInput _timeInput;
    private string? _nameInput;
    private string? _genderInput = "Male"; //since Male is first in combobox
    private Person _person;
    private bool _nothingToShow = false; //start by showing when start
    private string _selectedAppName;

    public string SelectedAppName
    {
        get => _selectedAppName;
        set
        {
            if (value == "JagannathaHora")
            {
                //once set show upload button
                 _jsRuntime.Show(fileUploadInputHtml);
                _selectedAppName = value;
            }
            else
            {
                _jsRuntime.FunFeaturePopUp("Import");
            }
        }
    }

    public IBrowserFile? UploadedFile { get; set; }

    private IReadOnlyList<IBrowserFile> _uploadedFileList;
    private  List<Person> _importedPersonList = new List<Person>();


    //█░░ █ █▀▀ █▀▀ █▀▀ █▄█ █▀▀ █░░ █▀▀   █▀▄▀█ █▀▀ ▀█▀ █░█ █▀█ █▀▄ █▀
    //█▄▄ █ █▀░ ██▄ █▄▄ ░█░ █▄▄ █▄▄ ██▄   █░▀░█ ██▄ ░█░ █▀█ █▄█ █▄▀ ▄█
    //METHODS THAT CAN IMPLEMENT ASYNC ERROR HANDLER



    /// <summary>
    /// Once received file send for processing (API) to extract time list for later use
    /// </summary>
    private async Task OnInputFileChange(InputFileChangeEventArgs inputFileData)
    {
        //show icon that file is being processed hold tight
        await _jsRuntime.ShowLoading();

        //save files for parsing
        _uploadedFileList = inputFileData.GetMultipleFiles();

        //parse them files based on selected format
        //and sets them saves them as parsed
        switch (SelectedAppName)
        {
            case "JagannathaHora": ParseJhdInputFile(); break;
            default:
                await _jsRuntime.FunFeaturePopUp("File Parser");
                //todo show msg
            break;
        }

        //after parsing show preview
        _jsRuntime.Show(ListPreviewTable);

        //show done message to user
        var msg = $"{_uploadedFileList.Count} Files Parsed";
        await _jsRuntime.ShowAlert("success", msg, "Check the preview data and click import.");
    }

    //█▀█ █▀█ █ █░█ ▄▀█ ▀█▀ █▀▀   █▀▄▀█ █▀▀ ▀█▀ █░█ █▀█ █▀▄ █▀
    //█▀▀ █▀▄ █ ▀▄▀ █▀█ ░█░ ██▄   █░▀░█ ██▄ ░█░ █▀█ █▄█ █▄▀ ▄█

    //sends the newly created person to API server
    private async Task _OnClickSubmitButton()
    {

        //if not logged in tell user what the f he is doing
        if (AppData.IsGuestUser)
        {
            var loginLink = $"<a target=\"_blank\" style=\"text-decoration-line: none;\" href=\"{AppData.URL.Login}\" class=\"link-primary fw-bold\">logged in</a>";
            await _jsRuntime.ShowAlert("info", "Remember!", $"You have not {loginLink}, continue as <strong>Guest</strong>?");
        }

        await _jsRuntime.ShowLoading();
        _nothingToShow = true; //compensate for multiple popups, hides the input elm via css

        //only continue if passed input field validation
        if (!(await IsValidationPassed())) { _nothingToShow = false; return; } //if nothing than back to normal

        StateHasChanged(); //needed to make change appear instantly, works

        //make a new person from the details in the input
        //NOTE : element has to be in DOM when called to get date info from calendar
        //      hence the use of css to hide loading
        _person = await GetPersonInstanceFromInput();

        //send newly created person to API server
        await AppData.API.Person.AddPerson(_person);

        //after adding new person set person, as selected to make life easier for user (UX)
        await _jsRuntime.SetProperty("SelectedPerson", _person.ToJson().ToString());

        //page ready
        _jsRuntime.HideAlert();

        //hide final loading, needed because SweetAlert fails when to many calls
        _nothingToShow = false;

        _jsRuntime.PlayDoneSound();//tactile feedback

        //wait a little and send user back to previous page
        await _jsRuntime.ShowAlert("info", $"Going back to previous page", false, 500);
        _jsRuntime?.GoBack();
    }

    /// <summary>
    /// Checks if validation of all input fields
    /// </summary>
    private async Task<bool> IsValidationPassed()
    {
        //TEST 1 : Name
        if (String.IsNullOrWhiteSpace(_nameInput))
        {
            //mark invalid & alert user
            await _jsRuntime.ShowAlert("error", AlertText.EnterName, true);
            return false;
        }

        //TEST 2 : Gender
        if (String.IsNullOrWhiteSpace(_genderInput))
        {
            //mark invalid & alert user
            await _jsRuntime.ShowAlert("error", AlertText.SelectGender, true);
            return false;
        }

        //TEST 3 : Time & Location
        var isValid = await _timeInput.IsValid();
        if (!isValid) { return false; }

        //TEST 4 : check if user is sleeping by letting time be set as current year and date and month
        var tempTime = await _timeInput.GetDateTimeOffset();
        var thisYear = tempTime.Year == DateTimeOffset.Now.Year;
        var thisMonth = tempTime.Month == DateTimeOffset.Now.Month;
        var thisDate = tempTime.Month == DateTimeOffset.Now.Month;
        var month = !(thisYear && thisMonth);
        var today = !(thisYear && thisMonth && thisDate);
        isValid = month || today;
        if (!isValid)
        {
            var tempText = thisMonth ? "this month" : "today";
            //prepare question to ask user
            var alertData = new
            {
                icon = "question",
                title = $"Are you sure, {AlertText.RandomNoun()}?",
                html = $"You inputed <strong>{tempText}</strong> as your birth date, is this correct?",
                showCancelButton = true,
                confirmButtonColor = "#3085d6",
                cancelButtonColor = "#d33",
                confirmButtonText = "Yes, correct!"
            };
            var sweetAlertResult = await _jsRuntime.ShowAlertResult(alertData);

            //if user clicked continue, then 00:00 is correct, so pass validation
            var continueClicked = sweetAlertResult.GetProperty("isConfirmed").GetBoolean();
            if (!continueClicked) { return false; }

        }

        //TEST 4 : Time Traveler Detection
        var futureTime = tempTime > DateTimeOffset.Now; //future large than now
        if (futureTime)
        {

            //prepare question to ask user
            var alertData = new
            {
                icon = "question",
                title = $"Time Traveler Detected",
                html = $"You inputed a <strong>future birth date</strong>. Are you sure this is correct?",
                showCancelButton = true,
                confirmButtonColor = "#3085d6",
                cancelButtonColor = "#d33",
                confirmButtonText = "Yes, correct!"
            };
            var sweetAlertResult = await _jsRuntime.ShowAlertResult(alertData);

            //if user clicked continue, then 00:00 is correct, so pass validation
            var continueClicked = sweetAlertResult.GetProperty("isConfirmed").GetBoolean();
            if (!continueClicked) { return false; }

        }

        //TEST 5 : Possible missing TIME 00:00
        var inputedTimeString = await _timeInput.GetFullTimeString();
        var isTime0 = inputedTimeString.Contains("00:00"); //possible user left it out
        if (isTime0)
        {
            //prepare question to ask user
            var alertData = new
            {
                icon = "question",
                title = $"Born exactly at 00:00 AM?",
                html = $"Looks like you did not <strong>fill birth time</strong>. Are you sure this is correct?",
                showCancelButton = true,
                confirmButtonColor = "#3085d6",
                cancelButtonColor = "#d33",
                confirmButtonText = "Yes, correct!"
            };
            var sweetAlertResult = await _jsRuntime.ShowAlertResult(alertData);

            //if user clicked continue, then 00:00 is correct, so pass validation
            var continueClicked = sweetAlertResult.GetProperty("isConfirmed").GetBoolean();
            if (!continueClicked) { return false; }
        }

        //TEST 6 : no single alphabet names please
        var tooShort = _nameInput.Length <= 3;
        if (tooShort)
        {
            //prepare question to ask user
            var alertData = new
            {
                icon = "question",
                title = $"Such a short name? Suspicious",
                html = $"Only machines use short names like <strong>{_nameInput}</strong>, are you a machine?",
                showCancelButton = true,
                confirmButtonColor = "#3085d6",
                cancelButtonColor = "#d33",
                confirmButtonText = "No, I'm human!"
            };
            var sweetAlertResult = await _jsRuntime.ShowAlertResult(alertData);

            //if user clicked continue, then 00:00 is correct, so pass validation
            var continueClicked = sweetAlertResult.GetProperty("isConfirmed").GetBoolean();
            if (!continueClicked) { return false; }
        }

        //TEST 7 : no numbers please
        bool isDigitPresent = _nameInput.Any(c => char.IsDigit(c));
        if (isDigitPresent)
        {
            //prepare question to ask user
            var alertData = new
            {
                icon = "question",
                title = $"Are you a machine?",
                html = $"Only machines have names with numbers like <strong>{_nameInput}</strong>, are you a machine?",
                showCancelButton = true,
                confirmButtonColor = "#3085d6",
                cancelButtonColor = "#d33",
                confirmButtonText = "No, I'm human!"
            };
            var sweetAlertResult = await _jsRuntime.ShowAlertResult(alertData);

            //if user clicked continue, then 00:00 is correct, so pass validation
            var continueClicked = sweetAlertResult.GetProperty("isConfirmed").GetBoolean();
            if (!continueClicked) { return false; }
        }

        //if control reaches here than, it's valid
        return true;

    }

    /// <summary>
    /// Using the details in the inputs makes a new Person instance
    /// Note : Input fields do not use binding because implementing
    /// separated time fields is erroneous
    /// </summary>
    private async Task<Person> GetPersonInstanceFromInput()
    {
        //create a new person from the inputed data
        var birthTime = await _timeInput.GetTime();

        //get gender from gender string
        var gender = Enum.Parse<Gender>(_genderInput);

        //if user not signed in, use their visitor id as user ID
        //done so that public list is not clouded
        var newPersonOwnerId = AppData.IsGuestUser ? AppData.VisitorId : AppData.CurrentUser?.Id;

        //there is possibility user has put invalid characters, clean it!
        var nameInput = Tools.CleanAndFormatNameText(_nameInput);

        //create the new complete person profile
        return new Person(newPersonOwnerId, "", nameInput, birthTime, gender);

        //----------LOCAL FUNCTION ---------------------
    }

    /// <summary>
    /// Takes uploaded raw binary files and parses them
    /// </summary>
    private async void ParseJhdInputFile()
    {
        try
        {
            //parse each file one by one
            foreach (var singleFile in _uploadedFileList)
            {
                //JHD files have person name saved as file name
                var personNameRaw = singleFile.Name;
                string personNameRaw2 = Path.GetFileNameWithoutExtension(personNameRaw); //remove file extension
                string personName = Format.FormatName(personNameRaw2); //remove file extension

                var openReadStream = singleFile.OpenReadStream();
                using var reader = new StreamReader(openReadStream);
                var rawJhdFile = await reader.ReadToEndAsync();

                //convert JHD file to Time instance
                var parsedPerson = Calculate.ParseJHDFiles(personName, rawJhdFile);

                //create person instance 
                _importedPersonList.Add(parsedPerson);
            }
        }
        //if fail let user know
        catch (Exception e)
        {
            //todo error msg
            Console.WriteLine(e);
            throw;
        }

    } 

    private async Task OnClickImport()
    {
        //add each person to API
        foreach (var _person in _importedPersonList)
        { 
            await AppData.API.Person.AddPerson(_person);
        }

        await _jsRuntime.ShowAlert("success", $"Import complete", "New person profiles now ready for calculations.");
    }

}
