@attribute [Route(PageRoute.PersonEditor)]
@attribute [Route(PageRoute.PersonEditorParam)]

@using VedAstro.Library


<PageTitle>@_pageTitle</PageTitle>

<PageTop Title="Person Profile" IconName="icomoon-free:profile">
    <Description>
        Person's birth info for astronomical calculation
    </Description>
</PageTop>


<div class="container">
    @*TAB HEADER*@
    <ul class="nav nav-tabs">
        <li class="nav-item">
            <a href="#info" class="nav-link active" data-bs-toggle="tab">
                <Icon IconName="majesticons:scroll-text-line" />
                Info
            </a>
        </li>
        <li class="nav-item">
            <a href="#notes" class="nav-link" data-bs-toggle="tab">
                <Icon IconName="material-symbols:note-alt-outline" />
                Notes
            </a>
        </li>
        <li class="nav-item">
            <a href="#lifeEvents" class="nav-link" data-bs-toggle="tab">
                <Icon IconName="material-symbols:note-alt-outline" />
                Life Events
            </a>
        </li>
        <li class="nav-item">
            <a href="#advanced" class="nav-link" data-bs-toggle="tab">
                <Icon IconName="material-symbols:note-alt-outline" />
                Advanced
            </a>
        </li>
        @*DROP DOWN ACTIONS*@
        <DropDownButton ButtonText="Actions" IconName="carbon:touch-interaction">
            <ButtonList>
                <li><a class="dropdown-item" style="cursor: pointer;" @onclick="CopyPersonProfileShareLink"><Icon IconName="material-symbols:ios-share" /> Share Link</a></li>
                <li><a class="dropdown-item" style="cursor: pointer;" @onclick="UpdateExistingPerson"><Icon IconName="bx:save" /> Save</a></li>
                <li><a class="dropdown-item" style="cursor: pointer;" @onclick="OnClickDeleteButton"><Icon IconName="material-symbols:delete-rounded" /> Delete</a></li>
            </ButtonList>
        </DropDownButton>

    </ul>

    @*TAB BODY*@
    <div class="tab-content p-2 border">
        @*INFO*@
        <div class="tab-pane fade show active p-2" id="info">
            <div class="vstack gap-3 px-2">
                <div>
                    <label class="form-label">Name</label>
                    <input @bind="_nameInput" type="text" class="form-control" placeholder="Enter name">
                </div>

                @*TIME ROW*@
                <div>
                    <TimeInput @ref="_timeInput" />
                </div>

                <GeoLocationInput DisableAutoLocation="true" @ref="_geoLocationInput" />
                <div>
                    <label class="form-label">
                        Gender
                        <HelpIconTooltip SmallIcon="true" HelpText="@HelpText.Gender" />
                    </label>
                    <select @bind="_genderInput" class="form-control">
                        <option value="Male">Male</option>
                        <option value="Female">Female</option>
                    </select>
                </div>
            </div>
        </div>

        @*NOTES*@
        <div class="tab-pane fade" id="notes">
            <div class="px-2">
                <label class="form-label">Notes</label>
                <textarea @bind="_notesInput" type="text" class="form-control" placeholder="Extra details regarding the person" style="min-height: 500px;"></textarea>
            </div>
        </div>

        @*LIFE EVENTS*@
        <div class="tab-pane fade" id="lifeEvents">
            <LifeEventViewer @ref="lifeEventViewer" />
        </div>

        @*ADVANCED TAB CONTENT*@
        <div class="tab-pane fade" id="advanced">
            <div class="px-2">
                <ul class="list-group gap-1 mt-2">
                    <li class="list-group-item active" aria-current="true">Info</li>
                    <ul class="list-group list-group-horizontal">
                        <li class="list-group-item">Local Mean Time (LMT)</li>
                        <li class="list-group-item">@SelectedPerson.BirthTime.GetLmtDateTimeOffsetText()</li>
                    </ul>
                    <ul class="list-group list-group-horizontal">
                        <li class="list-group-item">Local Standard Time (STD)</li>
                        <li class="list-group-item">@SelectedPerson.BirthTime.GetStdDateTimeOffsetText()</li>
                    </ul>
                    <ul class="list-group list-group-horizontal">
                        <li class="list-group-item">Owners</li>
                        <li class="list-group-item">@SelectedPerson.UserIdString</li>
                    </ul>
                </ul>
            </div>
        </div>
    </div>

    @*BUTTONS*@
    <div style="margin-top: 50px" class="hstack row gap-2">
        @*Only show delete button in Editor mode*@
        <IconButton SmallSize="true" ButtonText="Delete" IconName="fluent:delete-20-regular" OnClickCallback="@OnClickDeleteButton" />
        <IconButton SmallSize="true" Color="success" ButtonText="Save" IconName="bx:save" OnClickCallback="@UpdateExistingPerson" />
    </div>
</div>



@code {

    /// <summary>
    /// Person name passed in as param, page becomes
    /// editor passed, else becomes creator
    /// </summary>
    [Parameter]
    public string PersonIdUrl { get; set; }

    /// <summary>
    /// represents the Person instance that this page represents
    /// </summary>
    private Person SelectedPerson;

    /// <summary>
    /// a copy of the person's hash during init is saved in edit mode
    /// because hash will change on edit, used as when updating to API
    /// </summary>


    TimeInput _timeInput;
    string _nameInput = "";
    string _notesInput = "";
    string _genderInput = "";
    string _pageTitle = "";
    private GeoLocationInput _geoLocationInput;
    private LifeEventViewer lifeEventViewer;





    //█▀█ █▀█ █ █░█ ▄▀█ ▀█▀ █▀▀   █▀▄▀█ █▀▀ ▀█▀ █░█ █▀█ █▀▄ █▀
    //█▀▀ █▀▄ █ ▀▄▀ █▀█ ░█░ ██▄   █░▀░█ ██▄ ░█░ █▀█ █▄█ █▄▀ ▄█

    protected override async Task OnInitializedAsync()
    {
        await _jsRuntime.ShowLoading();

        //little delay to let page elements load up
        //otherwise render page will encounter nulls
        await Task.Delay(100);

        await RenderPage();

        _jsRuntime.HideLoading();
    }


    /// <summary>
    /// Renders page based on page mode set during init
    /// </summary>
    private async Task RenderPage()
    {

        //try get person profile from ID
        SelectedPerson = await WebsiteTools.GetPersonById(PersonIdUrl, _jsRuntime);

        //set page title
        _pageTitle = $"Profile | {SelectedPerson.Name}";

        //place data into fields
        PersonIdUrl = SelectedPerson.Id;
        _nameInput = SelectedPerson.Name;
        _notesInput = SelectedPerson.Notes;
        _genderInput = SelectedPerson.Gender.ToString();

        //set timezone if NOT creator, else component will auto set
        var personBirthTimeOffset = SelectedPerson.BirthTimeZone;
        _timeInput.TimeZone = personBirthTimeOffset;

        var birthTimeHourMin = SelectedPerson.BirthHourMinute;
        _timeInput.HourMin = birthTimeHourMin;

        var birthTimeDate = SelectedPerson.BirthDateMonthYear;
        _timeInput.DateMonthYear = birthTimeDate;

        var geoLocation = new GeoLocation
        (
            SelectedPerson.GetBirthLocation().Name(),
           SelectedPerson.GetBirthLocation().Longitude(),
           SelectedPerson.GetBirthLocation().Latitude()
        );
        _geoLocationInput.UpdateData(geoLocation);

        //life events
        await lifeEventViewer.SetData(SelectedPerson);

        //todo check if needed
        this.StateHasChanged();
    }


    /// <summary>
    /// Checks if validation of all input fields
    /// </summary>
    private async Task<bool> IsValidationPassed()
    {
        //it is possible for validation to throw exception
        try
        {
            //TEST 1
            //check that name is filled
            if (String.IsNullOrWhiteSpace(_nameInput))
            {
                //mark invalid & alert user
                await _jsRuntime.ShowAlert("error", AlertText.EnterName, true);
                return false;
            }

            //TEST 2
            //check if time fields are parseable
            var timeInputPassed = Time.TryParseStd(_timeInput.FullTimeString, out var parsedInputTime);
            if (!timeInputPassed)
            {
                //mark invalid & alert user
                await _jsRuntime.ShowAlert("error", AlertText.InvalidBirthTime, true);
                return false;
            }


            //TEST 3
            //check if auto set timezone is correctly matched to location's timezone
            var autoTimeZoneUsed = _timeInput.IsAutoTimezone;
            //note: auto timezone checked first, so that Google TimeZone API is not called until needed
            if (autoTimeZoneUsed)
            {
                var birthLocationTimezone = await Tools.GetTimezoneOffsetApi(_geoLocationInput.GetGeoLocation(), parsedInputTime);
                var currentTimezone = _timeInput.TimeZone;
                var timezoneNotMatch = birthLocationTimezone != currentTimezone;
                if (timezoneNotMatch)
                {
                    //let user know timezone needs to be corrected
                    var alertData = new
                    {
                        icon = "question",
                        title = $"Are you sure timezone is right?",
                        text = $"Timezone in \"{_geoLocationInput.LocationName}\" should be \"{birthLocationTimezone}\", not \"{currentTimezone}\"." +
                               $"\n Click Auto Correct to update & continue. Cancel to manually edit.",
                        showCancelButton = true,
                        confirmButtonColor = "#3085d6",
                        cancelButtonColor = "#d33",
                        confirmButtonText = "Auto Correct"
                    };
                    var sweetAlertResult = await _jsRuntime.ShowAlertResult(alertData);

                    //if user clicked continue, update correct timezone and return as valid
                    var continueClicked = sweetAlertResult.GetProperty("isConfirmed").GetBoolean();
                    if (continueClicked) { _timeInput.TimeZone = birthLocationTimezone; }

                    //if clicked cancel, mark as invalid and return false
                    //this allows the user to manually correct the timezone
                    else { return false; }
                }

            }

        }
        catch (Exception)
        {
            //mark invalid & alert user
            const string msg = $"Something went wrong, refresh page and try again!";
            await _jsRuntime.ShowAlert("error", msg, true);
            return false;
        }

        //if control reaches here than, it's valid
        return true;

    }

    /// <summary>
    /// Using the details in the inputs makes a new Person instance
    /// Note : Input fields do not use binding because implementing
    /// separated time fields is erroneous
    /// </summary>
    private Person GetPersonInstanceFromInput()
    {
        //parse data received from user
        var geoLocation = _geoLocationInput.GetGeoLocation();
        var lifeEventList = lifeEventViewer.GetData();

        //get gender from gender string
        var gender = Enum.Parse<Gender>(_genderInput);

        //create a new person from the inputed data
        var birthTime = _timeInput.GetTime(geoLocation);
        //if user not signed in, use their visitor id as user ID
        //done so that public list is not clouded
        var currentUserId = AppData.CurrentUser?.Id == UserData.Guest.Id ? AppData.VisitorId : AppData.CurrentUser?.Id;

        //get all owner list & add this user id if not included
        //this way 1 user does not delete other users when click save
        var userFound = SelectedPerson.UserId.Contains(currentUserId);
        string[] allUserIdList;
        //use old list since, only updating
        if (userFound) { allUserIdList = SelectedPerson.UserId; }
        //add current user to person's owner list
        else { allUserIdList = SelectedPerson.UserId?.Append(currentUserId)?.ToArray(); }

        //note: person id does NOT change
        return new Person(SelectedPerson.Id, _nameInput, birthTime, gender, allUserIdList, _notesInput, lifeEventList);


        //----------LOCAL FUNCTION ---------------------
    }

    private async Task UpdateExistingPerson()
    {
        //show loading message
        await _jsRuntime.ShowLoading();

        //only continue if passed input field validation
        if (!(await IsValidationPassed())) { return; }

        //make a new person from the details in the input
        SelectedPerson = GetPersonInstanceFromInput();

        //update person in API & message user about it
        await AppData.API.Person.UpdatePerson(SelectedPerson);
        _jsRuntime.PlayDoneSound();

        //ask user if wants to go back to previous page or stay
        //prepare question to ask user
        var alertData = new
        {
            icon = "question",
            title = $"Go back to previous page?",
            html = $"You can also stay in this page and continue edits",
            showCancelButton = true,
            confirmButtonColor = "#3085d6",
            cancelButtonColor = "#d33",
            confirmButtonText = "Go Back",
            cancelButtonText = "Stay"
        };
        var sweetAlertResult = await _jsRuntime.ShowAlertResult(alertData);

        //if user clicked continue, then 00:00 is correct, so pass validation
        var continueClicked = sweetAlertResult.GetProperty("isConfirmed").GetBoolean();

        //stay
        if (!continueClicked)
        {
            return;
        }
        //go back
        else
        {
            //wait a little and send user back to previous page
            await _jsRuntime.ShowAlert("info", $"Going back to previous page", false, 500);
            _jsRuntime?.GoBack();
        }

    }

    private async Task OnClickDeleteButton()
    {
        //show loading message
        await _jsRuntime.ShowLoading();

        //tell API to delete person, using person id
        await AppData.API.Person.DeletePerson(SelectedPerson);

        //refresh the page variables
        //todo marked for deletion, test without = no difference -> delete
        this.StateHasChanged();

        //page ready
        _jsRuntime.HideAlert();

        //send back to previous page
        await _jsRuntime.ShowAlert("info", $"Going back to previous page", false, 500);
        AppData.Go(PageRoute.PersonList);
    }

    /// <summary>
    /// Copies current person's URL to clipboard, useful for letting 3rd party see a profile
    /// </summary>
    private async void CopyPersonProfileShareLink()
    {
        //generate the url
        var url = Path.Combine(AppData.URL.WebUrl, PageRoute.PersonEditor, PersonIdUrl); //use Combine for safety

        //use js to transfer to clipboard
        await _jsRuntime.InvokeVoidAsync(JS.CopyToClipboard, url);

        //let user know link coppied
        await _jsRuntime.ShowAlert("success", $"Share Link Copied!", false, 2600);
    }

}