@using Newtonsoft.Json.Linq;
@using VedAstro.Library
@*A simple page specialized for adding new Person profiles fast & easy*@
@attribute [Route(PageRoute.AddPerson)]

<PageTitle>Add Person | VedAstro</PageTitle>

<PageTop Title="Add New Person" IconName="icomoon-free:profile" />

@*show loading first, note done by style because need element alive*@
<div class="@(!_nothingToShow?"d-none":"")">
    @AppData.LoadingImage
</div>

<div class="d-md-flex justify-content-between">
    @*SELECTOR*@
    <div class="me-5">
        <div class="vstack gap-3 @(_nothingToShow ? "d-none" : "")" style="max-width: @GR.W412px">

            @* NAME *@
            <div class="input-group">
                <span class="input-group-text gap-2" style="width: 136px;"><Icon IconName="flat-color-icons:butting-in" Size="35" />Name</span>
                <input @bind="_nameInput" type="text" class="form-control" placeholder="Enter name" style="font-weight: 600; font-size: 17px;">
            </div>

            @* TIME *@
            <TimeLocationInput @ref="_timeInput" LabelText="Birth Time" />

            @* GENDER *@
            <div class="input-group">
                <label class="input-group-text gap-2" for="genderSelectInput" style="width: 165px;"><Icon IconName="mdi:human-male-female" Size="34" />Gender</label>
                <select @bind="_genderInput" class="form-select" id="genderSelectInput" style="font-weight: 600; font-size: 17px;">
                    <option value="Male">Male</option>
                    <option value="Female">Female</option>
                </select>
            </div>

            <div class="mt-2 d-flex justify-content-between">
                <IconButton SmallSize="true" IconName="akar-icons:arrow-back" ButtonText="Back" OnClickCallback="_jsRuntime.GoBack"></IconButton>
                <IconButton SmallSize="true" Color="success" IconName="bx:save" ButtonText="Save" OnClickCallback="@OnClickSubmitButton" />
            </div>
        </div>
    </div>

    @*SIDEBAR*@
    <div class="mt-md-0 mt-4 me-md-5">
        <!--when small give at top-->
        <div class="vstack gap-0 gap-md-2">
            <InfoBox MaxWidth="365" Title="Easy Import" Description="Birth data from Jagannatha Hora, Light of KP (LOKPA) or Parashara's Light 9" IconName="fluent-emoji-flat:outbox-tray" ClickUrl="@PageRoute.Import"  />
            <InfoBox MaxWidth="365" Title="Private" Description="Person data is private &amp; not visible to public." IconName="flat-color-icons:privacy" />
            <InfoBox MaxWidth="365" Title="Forgoten Time" Description="Use advanced computation to find your lost birth time" IconName="noto:alarm-clock" IsNewTabOpen="true" ClickUrl="@PageRoute.BirthTimeFinder" />
        </div>
    </div>
</div>


@code {

    TimeLocationInput _timeInput;
    private string? _nameInput;
    private string? _genderInput = "Male"; //since Male is first in combobox
    private Person _person;
    private bool _nothingToShow = false; //start by showing when start


    //█░░ █ █▀▀ █▀▀ █▀▀ █▄█ █▀▀ █░░ █▀▀   █▀▄▀█ █▀▀ ▀█▀ █░█ █▀█ █▀▄ █▀
    //█▄▄ █ █▀░ ██▄ █▄▄ ░█░ █▄▄ █▄▄ ██▄   █░▀░█ ██▄ ░█░ █▀█ █▄█ █▄▀ ▄█
    //METHODS THAT CAN IMPLEMENT ASYNC ERROR HANDLER

    /// <summary>
    /// Function that is called on save click of button
    /// NOTE : surprisingly this is nessary for async await to work properly
    /// </summary>
    private async Task OnClickSubmitButton() => await InvokeAsync(async () => await _OnClickSubmitButton()).Try(_jsRuntime);

    //█▀█ █▀█ █ █░█ ▄▀█ ▀█▀ █▀▀   █▀▄▀█ █▀▀ ▀█▀ █░█ █▀█ █▀▄ █▀
    //█▀▀ █▀▄ █ ▀▄▀ █▀█ ░█░ ██▄   █░▀░█ ██▄ ░█░ █▀█ █▄█ █▄▀ ▄█

    //sends the newly created person to API server
    private async Task _OnClickSubmitButton()
    {
        //if not logged in tell user what the f he is doing
        if (AppData.IsGuestUser)
        {
            var loginLink = $"<a target=\"_blank\" style=\"text-decoration-line: none;\" href=\"{AppData.URL.Login}\" class=\"link-primary fw-bold\">logged in</a>";
            await _jsRuntime.ShowAlert("info", "Remember!", $"You have not {loginLink}, continue as <strong>Guest</strong>?");
        }

        await _jsRuntime.ShowLoading();
        _nothingToShow = true; //compensate for multiple popups, hides the input elm via css

        //only continue if passed input field validation
        if (!(await IsValidationPassed())) { _nothingToShow = false; return; } //if nothing than back to normal

        StateHasChanged(); //needed to make change appear instantly, works

        //make a new person from the details in the input
        //NOTE : element has to be in DOM when called to get date info from calendar
        //      hence the use of css to hide loading
        _person = await GetPersonInstanceFromInput();

        //send newly created person to API server
        await AppData.API.Person.AddPerson(_person);

        //after adding new person set person, as selected to make life easier for user (UX)
        await _jsRuntime.SetProperty("SelectedPerson", _person.ToJson().ToString());

        //page ready
        _jsRuntime.HideAlert();

        //hide final loading, needed because SweetAlert fails when to many calls
        _nothingToShow = false;

        _jsRuntime.PlayDoneSound();//tactile feedback

        //wait a little and send user back to previous page
        await _jsRuntime.ShowAlert("info", $"Going back to previous page", false, 500);
        _jsRuntime?.GoBack();
    }

    /// <summary>
    /// Checks if validation of all input fields
    /// </summary>
    private async Task<bool> IsValidationPassed()
    {
        //TEST 1 : Name
        if (String.IsNullOrWhiteSpace(_nameInput))
        {
            //mark invalid & alert user
            await _jsRuntime.ShowAlert("error", AlertText.EnterName, true);
            return false;
        }

        //TEST 2 : Gender
        if (String.IsNullOrWhiteSpace(_genderInput))
        {
            //mark invalid & alert user
            await _jsRuntime.ShowAlert("error", AlertText.SelectGender, true);
            return false;
        }

        //TEST 3 : Time & Location
        var isValid = await _timeInput.IsValid();
        if (!isValid) { return false; }

        //TEST 4 : check if user is sleeping by letting time be set as current year and date and month
        var tempTime = await _timeInput.GetDateTimeOffset();
        var thisYear = tempTime.Year == DateTimeOffset.Now.Year;
        var thisMonth = tempTime.Month == DateTimeOffset.Now.Month;
        var thisDate = tempTime.Month == DateTimeOffset.Now.Month;
        var month = !(thisYear && thisMonth);
        var today = !(thisYear && thisMonth && thisDate);
        isValid = month || today;
        if (!isValid)
        {
            var tempText = thisMonth ? "this month" : "today";
            //prepare question to ask user
            var alertData = new
            {
                icon = "question",
                title = $"Are you sure, {AlertText.RandomNoun()}?",
                html = $"You inputed <strong>{tempText}</strong> as your birth date, is this correct?",
                showCancelButton = true,
                confirmButtonColor = "#3085d6",
                cancelButtonColor = "#d33",
                confirmButtonText = "Yes, correct!"
            };
            var sweetAlertResult = await _jsRuntime.ShowAlertResult(alertData);

            //if user clicked continue, then 00:00 is correct, so pass validation
            var continueClicked = sweetAlertResult.GetProperty("isConfirmed").GetBoolean();
            if (!continueClicked) { return false; }

        }

        //TEST 4 : Time Traveler Detection
        var futureTime = tempTime > DateTimeOffset.Now; //future large than now
        if (futureTime)
        {

            //prepare question to ask user
            var alertData = new
            {
                icon = "question",
                title = $"Time Traveler Detected",
                html = $"You inputed a <strong>future birth date</strong>. Are you sure this is correct?",
                showCancelButton = true,
                confirmButtonColor = "#3085d6",
                cancelButtonColor = "#d33",
                confirmButtonText = "Yes, correct!"
            };
            var sweetAlertResult = await _jsRuntime.ShowAlertResult(alertData);

            //if user clicked continue, then 00:00 is correct, so pass validation
            var continueClicked = sweetAlertResult.GetProperty("isConfirmed").GetBoolean();
            if (!continueClicked) { return false; }

        }

        //TEST 5 : Possible missing TIME 00:00
        var inputedTimeString = await _timeInput.GetFullTimeString();
        var isTime0 = inputedTimeString.Contains("00:00"); //possible user left it out
        if (isTime0)
        {
            //prepare question to ask user
            var alertData = new
            {
                icon = "question",
                title = $"Born exactly at 00:00 AM?",
                html = $"Looks like you did not <strong>fill birth time</strong>. Are you sure this is correct?",
                showCancelButton = true,
                confirmButtonColor = "#3085d6",
                cancelButtonColor = "#d33",
                confirmButtonText = "Yes, correct!"
            };
            var sweetAlertResult = await _jsRuntime.ShowAlertResult(alertData);

            //if user clicked continue, then 00:00 is correct, so pass validation
            var continueClicked = sweetAlertResult.GetProperty("isConfirmed").GetBoolean();
            if (!continueClicked) { return false; }
        }

        //TEST 6 : no single alphabet names please
        var tooShort = _nameInput.Length <= 3;
        if (tooShort)
        {
            //prepare question to ask user
            var alertData = new
            {
                icon = "question",
                title = $"Such a short name? Suspicious",
                html = $"Only machines use short names like <strong>{_nameInput}</strong>, are you a machine?",
                showCancelButton = true,
                confirmButtonColor = "#3085d6",
                cancelButtonColor = "#d33",
                confirmButtonText = "No, I'm human!"
            };
            var sweetAlertResult = await _jsRuntime.ShowAlertResult(alertData);

            //if user clicked continue, then 00:00 is correct, so pass validation
            var continueClicked = sweetAlertResult.GetProperty("isConfirmed").GetBoolean();
            if (!continueClicked) { return false; }
        }

        //TEST 7 : no numbers please
        bool isDigitPresent = _nameInput.Any(c => char.IsDigit(c));
        if (isDigitPresent)
        {
            //prepare question to ask user
            var alertData = new
            {
                icon = "question",
                title = $"Are you a machine?",
                html = $"Only machines have names with numbers like <strong>{_nameInput}</strong>, are you a machine?",
                showCancelButton = true,
                confirmButtonColor = "#3085d6",
                cancelButtonColor = "#d33",
                confirmButtonText = "No, I'm human!"
            };
            var sweetAlertResult = await _jsRuntime.ShowAlertResult(alertData);

            //if user clicked continue, then 00:00 is correct, so pass validation
            var continueClicked = sweetAlertResult.GetProperty("isConfirmed").GetBoolean();
            if (!continueClicked) { return false; }
        }

        //if control reaches here than, it's valid
        return true;

    }

    /// <summary>
    /// Using the details in the inputs makes a new Person instance
    /// Note : Input fields do not use binding because implementing
    /// separated time fields is erroneous
    /// </summary>
    private async Task<Person> GetPersonInstanceFromInput()
    {
        //create a new person from the inputed data
        var birthTime = await _timeInput.GetTime();

        //get gender from gender string
        var gender = Enum.Parse<Gender>(_genderInput);

        //if user not signed in, use their visitor id as user ID
        //done so that public list is not clouded
        var newPersonOwnerId = AppData.IsGuestUser ? AppData.VisitorId : AppData.CurrentUser?.Id;

        //there is possibility user has put invalid characters, clean it!
        var nameInput = Tools.CleanAndFormatNameText(_nameInput);

        //create the new complete person profile
        return new Person(newPersonOwnerId, "", nameInput, birthTime, gender);

        //----------LOCAL FUNCTION ---------------------
    }

}
