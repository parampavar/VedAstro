@using VedAstro.Library
@attribute [Route(PageRoute.UserAccount)]

<PageTitle>User Account | VedAstro</PageTitle>

<PageTop Title="User Account" IconName="mdi:user-badge-outline">
    <Description>Data &amp; settings related to your account in VedAstro</Description>
</PageTop>


<div class="vstack" style="max-width:@GR.W667px;">


    <IconTitle Title="Data" IconName="eos-icons:big-data-outlined" />
    <table class="table mb-5" style="text-wrap: nowrap;">
        <tbody>
            <tr>
                <td class="d-flex justify-content-start gap-2"><Icon IconName="flat-color-icons:butting-in" /> Name</td>
                <td>@AppData.CurrentUser.Name</td>
                @*TODO ADD buttons to edit*@
            </tr>
            <tr>
                <td class="d-flex justify-content-start gap-2"><Icon IconName="flat-color-icons:address-book" /> Email</td>
                <td>@AppData.CurrentUser.Email</td>
                @*TODO ADD buttons to edit*@
            </tr>
            <tr>
                <td class="d-flex justify-content-start gap-2"><Icon IconName="flat-color-icons:key" /> API Key / User ID</td>
                <td>@AppData.CurrentUser.Id</td>
                @*TODO ADD buttons to copy*@
            </tr>
            <tr>
                <td class="d-flex justify-content-start gap-2"><Icon IconName="mdi:form-textbox-password" /> Password</td>
                <td>Managed by Google/Facebook. Go there to change it.</td>
            </tr>
        </tbody>
    </table>


    <IconTitle Title="Settings" IconName="gala:settings">
        <ButtonRow>
            <IconButton SmallSize="true" Color="success" IconName="bx:save" PlaceBottom="true" ButtonText="Save" OnClickCallback="@OnClickSaveSettingsButton" />
        </ButtonRow>

    </IconTitle>
    <div class="vstack gap-2" style="max-width:@GR.W412px;">
        @* AYANAMSA *@
        <div class="input-group">
            <label style="width:@GR.W134px;" class="input-group-text"><Icon ExtraClass="me-2" IconName="solar:stars-line-broken" /> Ayanamsa</label>
            <select @onchange="@(() => _jsRuntime.FunFeaturePopUp("Custom Ayanamsa"))" class="form-select">
                <option selected>Raman</option>
                <option value="1">Lahiri</option>
                <option value="1">Pushya Paksha</option>
                <option value="2">Chitra Paksha</option>
                <option value="2">Surya Siddhanta</option>
                <option value="3">Custom</option>
            </select>
        </div>

        @* DEBUG MODE *@
        <div class="input-group">
            <label style="width:@GR.W134px;" class="input-group-text"><Icon ExtraClass="me-2" IconName="iconoir:developer" /> Debug</label>
            <select @bind="@SelectedDebugMode" class="form-select">
                <option value="disabled" selected>Disabled</option>
                <option value="enabled">Enabled</option>
            </select>
        </div>



    </div>
</div>




@code {


    /// <summary>
    /// Enabled or Disabled in string
    /// </summary>
    private string SelectedDebugMode { get; set; }


    protected override async Task OnInitializedAsync()
    {
        //TODO disable check for easy local debug with breakpoint without login 
        // //if not logged in tell user why, and send them to right place
        // if (AppData.IsGuestUser)
        // {
        //     //show nice dynamic message
        //     await _jsRuntime.ShowAlert("info", $"Please login, {AlertText.RandomNoun()}", "");

        //     //send to login page, with command to come back here! after login
        //     AppData.Go(url: PageRoute.Login, rememberMe: true);
        // }

        // //if user logged in than try get debug mode selection from memory
        // else
        // {
        //     SelectedDebugMode = await WebsiteTools.GetDebugModeText();
        // }

        SelectedDebugMode = await WebsiteTools.GetDebugModeText();


    }

    


    private async Task OnClickSaveSettingsButton()
    {

        //save debug settings to local browser storage only, because
        _jsRuntime.SetProperty("DebugMode", SelectedDebugMode);

        //let user know settings saved
        await _jsRuntime.ShowAlert("success", "Saved", false, timer: 1500);

        //hard refresh to make app restart and use new settings
        await _jsRuntime.LoadPage(PageRoute.UserAccount);

    }

}
