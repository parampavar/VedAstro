@using VedAstro.Library
@attribute [Route(PageRoute.Numerology)]

<PageTitle>Numerology | VedAstro</PageTitle>

<PageTop ImageName="numerology-banner.svg"
         Title="Numerology"
         DescriptionText="A person's life can be predicted through his name spellings. From Mantra Shastra, uses vibration frequency of alphabets.">
</PageTop>

<div class="d-flex flex-wrap gap-3" style="max-width:@GR.W667px;">
    
    <div>
        <IconTitle IconName="fluent:text-number-format-20-filled" Title="Name Number" TitleHolder="h5" MaxWidthPx="@((int)GR.W667)" />

        <div class="hstack gap-2 mt-3">
            @* NAME *@
            <div class="input-group">
                <span class="input-group-text gap-2" style="width: 136px;"><Icon IconName="flat-color-icons:butting-in" Size="35" />Name</span>
                <input @bind="nameInput" type="text" class="form-control" placeholder="Enter name" style="font-weight: 600; font-size: 17px;">
            </div>

            <IconButton Height="47" IconName="uim:process" Color="success" ButtonText="Calculate" OnClickCallback="OnClickCalculateButton" />
        </div>

        @* OUTPUT *@
        <div @ref="outputHolder" class="mt-3" style="display: none;">
            <h4>Number: <strong>@nameNumber</strong></h4>
            <p class="p-2 rounded" style="background: #fff; font-family: 'Gowun Dodum'; font-size: 20px; ">
                @predictionOutputText
            </p>
        </div>
    </div>
    
    


    @*     <ArticleBlock Title="Name Number" IconName="openmoji:european-name-badge">
    <TextHTML>
    <p class="text-justify">
    Calculated using the “Chaldean System” sourced from "Mantra Sastra"
    </p>
    </TextHTML>
    </ArticleBlock>
    *@
</div>


@code {

    private string nameInput;
    private string predictionOutputText;
    private int nameNumber;
    ElementReference outputHolder;



    private void OnClickCalculateButton()
    {
        //calculate name number
        nameNumber = Calculate.NameNumber(nameInput);

        //using the number find prediction text
        predictionOutputText = Calculate.NameNumberPrediction(nameInput);

        //make visible
        outputHolder.Show();
        // _jsRuntime.Show(outputHolder);

        //refresh
        StateHasChanged();
    }

}

