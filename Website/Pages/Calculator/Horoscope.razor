@using VedAstro.Library
@attribute [Route(PageRoute.Horoscope)]
@attribute [Route(PageRoute.HoroscopeParam)]


<PageTitle>@_pageTitle</PageTitle>

<PageTop ImageWidth="@(GR.W255+GR.W97)" ImageName="horoscope-banner.png"
         Title="Horoscope"
         DescriptionText="Insight into a peron's character, nature and general future. Over +370 planetary combinations are used.">
</PageTop>


<div class="gap-3" style="max-width: @GR.W824px;">

    @* IN PAGE NAV BAR *@
    <div id="inPageNavBar" style="display: none !important; position: fixed;right: 69px;font-family: 'Lexend Deca';font-weight: bold;font-size: 14px; width: fit-content;" class="vstack gap-1 mt-2 pt-2 border-top d-none d-lg-block">
        @* HEADER TEXT *@
        <span style="font-size: 11.5px;margin-left: 44px;color: grey;margin-top: -19px;position: absolute;background-color: rgb(240, 242, 245);" class="px-1">INDEX</span>
        
        @* NAV LINKS *@
        @* js function will set active by ID *@
        <div class="list-group">
            <a id="AutoPrediction-Link" class="list-group-item list-group-item-action" href="@_navigation.Uri#AutoPrediction">Auto Prediction</a>
            <a id="Strength-Link" class="list-group-item list-group-item-action" href="@_navigation.Uri#Strength">Strength</a>
            <a id="SkyChart-Link" class="list-group-item list-group-item-action" href="@_navigation.Uri#SkyChart">Sky Chart</a>
            <a id="IndianChart-Link" class="list-group-item list-group-item-action" href="@_navigation.Uri#IndianChart">Birth Chart</a>
            <a id="PlanetDataTable2-Link" class="list-group-item list-group-item-action" href="@_navigation.Uri#PlanetDataTable2">Planet Table</a>
            <a id="HouseDataTable2-Link" class="list-group-item list-group-item-action" href="@_navigation.Uri#HouseDataTable2">House Table</a>
            <a id="Ashtakvarga-Link" class="list-group-item list-group-item-action" href="@_navigation.Uri#Ashtakvarga">Ashtakvarga</a>
            <a id="Reference-Link" class="list-group-item list-group-item-action" href="@_navigation.Uri#Reference">Reference</a>
        </div>
    </div>

    @*INPUT*@
    <div class="d-flex flex-wrap mb-5" style="max-width: @GR.W352px;">
        <div class="vstack gap-3">
            <PersonSelectorBox Width="100%" @ref="_peopleSelectorBox" />

            @* ADVANCED PANEL DROP *@
            <div id="HoroscopeAdvancedInputHolder" class="vstack gap-1 mt-2 pt-2 border-top" style="display: none">
                @* HEADER TEXT *@
                <span style="font-size: 11.5px;margin-left: 0px;color: grey;margin-top: -20px;position: absolute;background-color: rgb(240, 242, 245);" class="px-1">Advanced Options</span>

                @* AYANAMSA *@
                <div class="input-group mb-2">
                    <label style="width:@GR.W134px;" class="input-group-text">
                        <Icon ExtraClass="me-2" IconName="solar:stars-line-broken" /> Ayanamsa
                    </label>
                    <select @bind="SelectedAyanamsa" class="form-select">

                        <optgroup label="Easy">
                            @foreach (var ayanamsa in @AppData.SimpleAyanamsaAll)
                            {
                                <option value="@ayanamsa">@Format.FormatName(ayanamsa)</option>
                            }
                        </optgroup>
                        <optgroup label="Advanced">
                            @foreach (var ayanamsa in @AppData.AdvancedAyanamsaAll)
                            {
                                <option value="@ayanamsa">@ayanamsa</option>
                            }
                        </optgroup>
                    </select>
                </div>

                @* CHART STYLE *@
                <div class="input-group">
                    <label style="width: 134.4px;" class="input-group-text">
                        <span class="iconify me-2" data-icon="gridicons:types" data-width="25" data-height="25"></span>
                        Chart
                    </label>
                    <select @bind="SelectedChartStyle" id="ChartStyleSelectElement" class="form-select">
                        <option value="South" selected="">South Style</option>
                        <option value="North">North Style</option>
                    </select>
                </div>

                @* HORARY NUMBER *@
                @*                 <div class="input-group">
                <span class="input-group-text" style="font-weight: 600; color: red;" id="2defe66d-ab03-4275-ba36-1c35a008063b">
                Horary Number
                <div style="cursor: help; float: right; margin-left: 8px; margin-top: -2px; scale: 0.75; opacity: 0.8;" _bl_2596="" aria-expanded="false">
                <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--icon-park" width="19" height="19" preserveAspectRatio="xMidYMid meet" viewBox="0 0 48 48" data-icon="icon-park:help" data-width="19"><g fill="none"><path fill="#2F88FF" stroke="#000" stroke-linejoin="round" stroke-width="4" d="M24 44C29.5228 44 34.5228 41.7614 38.1421 38.1421C41.7614 34.5228 44 29.5228 44 24C44 18.4772 41.7614 13.4772 38.1421 9.85786C34.5228 6.23858 29.5228 4 24 4C18.4772 4 13.4772 6.23858 9.85786 9.85786C6.23858 13.4772 4 18.4772 4 24C4 29.5228 6.23858 34.5228 9.85786 38.1421C13.4772 41.7614 18.4772 44 24 44Z"></path><path stroke="#fff" stroke-linecap="round" stroke-linejoin="round" stroke-width="4" d="M24 28.6248V24.6248C27.3137 24.6248 30 21.9385 30 18.6248C30 15.3111 27.3137 12.6248 24 12.6248C20.6863 12.6248 18 15.3111 18 18.6248"></path><path fill="#fff" fill-rule="evenodd" d="M24 37.6248C25.3807 37.6248 26.5 36.5055 26.5 35.1248C26.5 33.7441 25.3807 32.6248 24 32.6248C22.6193 32.6248 21.5 33.7441 21.5 35.1248C21.5 36.5055 22.6193 37.6248 24 37.6248Z" clip-rule="evenodd"></path></g></svg>
                </div>
                </span>
                <input type="number" class="form-control" placeholder="0">
                </div>
                *@
                @* YEAR OF ZERO COINCIDENCE *@
                <div class="input-group" style="display: none">
                    <span class="input-group-text">Year of Zero Coincidence</span>
                    <input type="text" class="form-control" placeholder="397">
                </div>
            </div>

            @* BUTTONS *@
            <div class="mt-2 d-flex justify-content-between">
                <IconButton TooltipPosition="bottom" TooltipText="Advanced (optional)" IconName="gala:settings" OnClickCallback="@(() => _jsRuntime.SmoothSlideToggle("HoroscopeAdvancedInputHolder"))" SmallSize="true" />
                <IconButton @ref="_calculateButton" Id="HoroscopeCalculateButton" IconName="uim:process" Color="success" ButtonText="Calculate" OnClickCallback="CalculateButtonClicked" />
            </div>

        </div>
    </div>

    @* OUTPUT *@
    <div id="outputHoroscope" class="vstack gap-4" style="display: none;">
        
        @* Auto Prediction *@
        <div id="AutoPrediction" class="scrollspy">
            <IconTitle Title="Auto Prediction" IconName="twemoji:robot" TitleHolder="h4" />
            <AIPrediction @ref="_aiPrediction" />
        </div>
    
        @* Strength *@
        <div id="Strength" class="scrollspy">
            <IconTitle Title="Strength" IconName="twemoji:antenna-bars" TitleHolder="h4" />
            @*only show when all is loaded*@
            <StrengthChart @ref="_strengthChart" />
        </div>
         
        <SkyChartViewer Id="SkyChart" ExtraClass="scrollspy" @ref="skyChartViewer" />
        
        <IndianChart Id="IndianChart" ExtraClass="scrollspy"/>

        <div id="PlanetDataTable2" class="scrollspy" ></div>

        <div id="HouseDataTable2" class="scrollspy" ></div>
        
        <div id="Ashtakvarga" class="scrollspy" ></div>

        @* Reference *@
        <div id="Reference" class="scrollspy">
            <IconTitle Title="Reference" IconName="twemoji:books" TitleHolder="h4" />
            <HoroscopeReferenceList @ref="_horoscopeReferenceList" />
        </div>
        
        <PlanetChart @ref="planetChart" />

    </div>


</div>



@code {
    private HoroscopeReferenceList _horoscopeReferenceList = null;
    private AIPrediction _aiPrediction = null;
    private StrengthChart _strengthChart = null;


    private string _selectedChartStyle = "South";

    public string SelectedChartStyle
    {
        get => _selectedChartStyle;
        set
        {
            _selectedChartStyle = value;

            //highlight regenerate button to let user know needs recalculation
            _jsRuntime.AnimateHighlightElement("HoroscopeCalculateButton");

            //also add * to button text to let user know needs recalculation
            _calculateButton.UpdateButtonText("Calculate*");
        }
    }

    private string _selectedAyanamsa = SimpleAyanamsa.LahiriChitrapaksha.ToString();

    /// <summary>
    /// if not specified will not be included in final URL
    /// default set to Lahiri Chitrapaksha, as used system wide
    /// </summary>
    public string SelectedAyanamsa
    {
        get => _selectedAyanamsa;
        set
        {
            _selectedAyanamsa = value;

            //highlight regenerate button to let user know needs recalculation
            _jsRuntime.AnimateHighlightElement("HoroscopeCalculateButton");

            //also add * to button text to let user know needs recalculation
            _calculateButton.UpdateButtonText("Calculate*");
        }
    }

    private IconButton _calculateButton;

    private PlanetChart planetChart;

    private SkyChartViewer skyChartViewer;

    /// <summary>
    /// Param used in URL to set Person ID via URL
    /// also set via URL when page is loaded
    /// </summary>
    [Parameter]
    public string PersonIdUrl { get; set; } = "";

    private string _pageTitle = "Horoscope | VedAstro";

    private PersonSelectorBox? _peopleSelectorBox;

    private Person _selectedPerson;

    private HoroscopeInfoView _horoscopeInfoView;

    private PageHelpSection _helpSection;



    //█░░ █ █▀▀ █▀▀ █▀▀ █▄█ █▀▀ █░░ █▀▀   █▀▄▀█ █▀▀ ▀█▀ █░█ █▀█ █▀▄ █▀
    //█▄▄ █ █▀░ ██▄ █▄▄ ░█░ █▄▄ █▄▄ ██▄   █░▀░█ ██▄ ░█░ █▀█ █▄█ █▄▀ ▄█
    //METHODS THAT CAN IMPLEMENT ASYNC ERROR HANDLER

    private async Task CalculateButtonClicked() => await InvokeAsync(async () => await _CalculateAndUpdateEvents()).Try(_jsRuntime);

    protected override async Task OnAfterRenderAsync(bool firstRender) => await InvokeAsync(async () => await _OnAfterRenderAsync(firstRender)).Try(_jsRuntime);



    //█▀█ █▀█ █ █░█ ▄▀█ ▀█▀ █▀▀   █▀▄▀█ █▀▀ ▀█▀ █░█ █▀█ █▀▄ █▀
    //█▀▀ █▀▄ █ ▀▄▀ █▀█ ░█░ ██▄   █░▀░█ ██▄ ░█░ █▀█ █▄█ █▄▀ ▄█

    private async Task _OnAfterRenderAsync(bool firstRender)
    {
        //if parameter has been set then auto load person data as
        //though person was selected and calculate was clicked
        if (PersonIdUrl != null && firstRender)
        {
            await _jsRuntime.ShowLoading();

            //programmatically select the person
            await _peopleSelectorBox.SetPerson(PersonIdUrl);

            //start the same process as show button click
            //todo loading box disappears here, needs fix
            await _CalculateAndUpdateEvents();

            //initialize in page nav bar, only after the content is ready
            await _jsRuntime.InvokeVoidAsync(JS.InitializeInPageNav);

            //needed to see updates because any changes in OnAfterRender
            //have to be manually set
            StateHasChanged();

            _jsRuntime.HideLoading();
        }
    }

    /// <summary>
    /// Checks if validation of all input fields
    /// </summary>
    private async Task<bool> ValidationPassed()
    {

        //TEST 1
        //if person not selected, invalid
        if (!_peopleSelectorBox.IsPersonSelected)
        {
            //mark invalid & alert user
            await _jsRuntime.ShowAlert("error", AlertText.SelectName, true);
            return false;
        }

        return true;
    }

    //when calculate button is clicked
    private async Task _CalculateAndUpdateEvents()
    {
        await _jsRuntime.ShowLoading();

        //only continue if passed input field validation
        if (!await ValidationPassed()) { return; }

        //make output visible (hidden by default)
        _jsRuntime.Show("#outputHoroscope");
        _jsRuntime.Show("#inPageNavBar");

        //reset button text, since * can be added later
        _calculateButton.UpdateButtonText("Calculate");

        //get person from person dropdown
        _selectedPerson = await _peopleSelectorBox?.GetSelectedPerson();

        //only set url if not already set
        //note:this improves UX, as links can lead faster to data
        PersonIdUrl = _selectedPerson.Id; //save local copy
        AppData.Go($"{PageRoute.Horoscope}/{PersonIdUrl}"); //change url

        //put person name into tab title for easy multi-tabbing
        _pageTitle = $"Horoscope | {_selectedPerson.Name}";

        //update sky chart
        await skyChartViewer.Update(_selectedPerson.BirthTime);

        //update planet chart
        planetChart.UpdateTime(_selectedPerson.BirthTime);

        //load prediction data (from API)
        await _horoscopeReferenceList.ShowPrediction(_selectedPerson);

        //show ai prediction
        await _aiPrediction?.ShowPrediction(_selectedPerson);

        await _strengthChart.Show(_selectedPerson);

        //init planet data table
        await _InitPlanetDataTable();
        await _InitHouseDataTable();
        await _InitAshtakvargaTable();

        //scroll page to top of results so "index" legend can show nicely, plus saves user 10ms in scrolling
        _jsRuntime.ScrollToDivById("AutoPrediction");

        //play sound for better ux
        _jsRuntime.PlayDoneSound();

        //this is needed when called from click
        _jsRuntime.HideLoading();

    }

    private async Task _InitPlanetDataTable()
    {
        //load vedastro.js planet table
        var planetColumns = new[]
        {
            new { API = "PlanetZodiacSign", Enabled = true, Name = "Sign" },
            new { API = "PlanetConstellation", Enabled = true, Name = "Constellation" },
            new { API = "HousePlanetOccupies", Enabled = true, Name = "Occupies" },
            new { API = "HousesOwnedByPlanet", Enabled = true, Name = "Owns" },
            new { API = "PlanetLordOfZodiacSign", Enabled = true, Name = "Sign Lord" },
            new { API = "PlanetLordOfConstellation", Enabled = true, Name = "Const. Lord" },
            new { API = "Empty", Enabled = false, Name = "Empty" },
            new { API = "Empty", Enabled = false, Name = "Empty" },
            new { API = "Empty", Enabled = false, Name = "Empty" },
        };

        var settings = new
        {
            ElementID = "PlanetDataTable2",
            KeyColumn = "Planet",
            ShowHeader = true,
            HeaderIcon = "twemoji:ringed-planet",
            ColumnData = planetColumns, //columns names to create table
            EnableSorting = false,
            SaveSettings = false,
        };

        //get time in url format
        var timeUrl = _selectedPerson.BirthTime.ToUrl();
        timeUrl = timeUrl.Substring(1) + "/"; //remove leading / and add trailing / (minor format correction)

        //data used to generate table
        var inputArguments = new
        {
            TimeUrl = timeUrl,
            HoraryNumber = 0,
            RotateDegrees = 0,
            Ayanamsa = _selectedAyanamsa, //default is Lahiri
        };

        //call VedAstro.js to generate table
        await _jsRuntime.InvokeVoidAsync("GenerateAstroTable", settings, inputArguments);

    }
    
    private async Task _InitHouseDataTable()
    {
        //load vedastro.js planet table
        var houseColumns = new[]
        {
            new { API = "HouseZodiacSign", Enabled = true, Name = "Sign" },
            new { API = "HouseConstellation", Enabled = true, Name = "Constellation" },
            new { API = "PlanetsInHouse", Enabled = true, Name = "Planets In" },
            new { API = "LordOfHouse", Enabled = true, Name = "Sign Lord" },
            new { API = "LordOfConstellation", Enabled = false, Name = "Const. Lord" },
            new { API = "PlanetsAspectingHouse", Enabled = true, Name = "Aspects" },
            new { API = "Empty", Enabled = false, Name = "Empty" },
            new { API = "Empty", Enabled = false, Name = "Empty" },
            new { API = "Empty", Enabled = false, Name = "Empty" },
        };

        var settings = new
        {
            ElementID = "HouseDataTable2",
            KeyColumn = "House",
            ShowHeader = true,
            HeaderIcon = "fluent-emoji-flat:house",
            ColumnData = houseColumns, //columns names to create table
            EnableSorting = false,
            SaveSettings = false,
        };

        //get time in url format
        var timeUrl = _selectedPerson.BirthTime.ToUrl();
        timeUrl = timeUrl.Substring(1) + "/"; //remove leading / and add trailing / (minor format correction)

        //data used to generate table
        var inputArguments = new
        {
            TimeUrl = timeUrl,
            HoraryNumber = 0,
            RotateDegrees = 0,
            Ayanamsa = _selectedAyanamsa, //default is Lahiri
        };

        //call VedAstro.js to generate table
        await _jsRuntime.InvokeVoidAsync("GenerateAstroTable", settings, inputArguments);

    }

    private async Task _InitAshtakvargaTable()
    {

        var settings = new
        {
            ElementID = "Ashtakvarga", //id here matches div in page
            KeyColumn = "Ashtakvarga",
            ShowHeader = true,
            HeaderIcon = "fluent:table-28-filled",
        };

        //get time in url format
        var timeUrl = _selectedPerson.BirthTime.ToUrl();
        timeUrl = timeUrl.Substring(1) + "/"; //remove leading / and add trailing / (minor format correction)

        //data used to generate table
        var inputArguments = new
        {
            TimeUrl = timeUrl,
            Ayanamsa = _selectedAyanamsa, //default is Lahiri
        };

        //call VedAstro.js to generate table
        await _jsRuntime.InvokeVoidAsync("GenerateAshtakvargaTable", settings, inputArguments);

    }



}