@using VedAstro.Library
@attribute [Route(PageRoute.Horoscope)]
@attribute [Route(PageRoute.HoroscopeParam)]


<PageTitle>@_pageTitle</PageTitle>

<PageTop ImageWidth="@(GR.W255+GR.W97)" ImageName="horoscope-banner.png"
         Title="Horoscope"
         DescriptionText="Insight into a peron's character, nature and general future. Over +370 planetary combinations are used.">
</PageTop>


<div class="gap-3" style="max-width: @GR.W824px;">
    


    @*INPUT*@
    <div class="d-flex flex-wrap" style="max-width: @GR.W352px;">
        <div class="vstack gap-3">
            <PersonSelectorBox Width="100%" @ref="_peopleSelectorBox" />

            @* ADVANCED PANEL DROP *@
            <div id="HoroscopeAdvancedInputHolder" class="vstack gap-1 mt-2 pt-2 border-top" style="display: none">
                @* HEADER TEXT *@
                <span style="font-size: 9.5px;color: grey;margin-top: -18px;position: absolute;background-color: rgb(240, 242, 245);" class="px-1">Advanced Options</span>

                @* AYANAMSA *@
                <div class="input-group mb-2">
                    <label style="width:@GR.W134px;" class="input-group-text">
                        <Icon ExtraClass="me-2" IconName="solar:stars-line-broken" /> Ayanamsa
                    </label>
                    <select @bind="SelectedAyanamsa" class="form-select">

                        <optgroup label="Easy">
                            @foreach (var ayanamsa in @AppData.SimpleAyanamsaAll)
                            {
                                <option value="@ayanamsa">@Format.FormatName(ayanamsa)</option>
                            }
                        </optgroup>
                        <optgroup label="Advanced">
                            @foreach (var ayanamsa in @AppData.AdvancedAyanamsaAll)
                            {
                                <option value="@ayanamsa">@ayanamsa</option>
                            }
                        </optgroup>
                    </select>
                </div>

                @* CHART STYLE *@
                <div class="input-group">
                    <label style="width: 134.4px;" class="input-group-text">
                        <span class="iconify me-2" data-icon="gridicons:types" data-width="25" data-height="25"></span>
                        Chart
                    </label>
                    <select @bind="SelectedChartStyle" id="ChartStyleSelectElement" class="form-select">
                        <option value="South" selected="">South Style</option>
                        <option value="North">North Style</option>
                    </select>
                </div>

                @* HORARY NUMBER *@
                @*                 <div class="input-group">
                <span class="input-group-text" style="font-weight: 600; color: red;" id="2defe66d-ab03-4275-ba36-1c35a008063b">
                Horary Number
                <div style="cursor: help; float: right; margin-left: 8px; margin-top: -2px; scale: 0.75; opacity: 0.8;" _bl_2596="" aria-expanded="false">
                <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--icon-park" width="19" height="19" preserveAspectRatio="xMidYMid meet" viewBox="0 0 48 48" data-icon="icon-park:help" data-width="19"><g fill="none"><path fill="#2F88FF" stroke="#000" stroke-linejoin="round" stroke-width="4" d="M24 44C29.5228 44 34.5228 41.7614 38.1421 38.1421C41.7614 34.5228 44 29.5228 44 24C44 18.4772 41.7614 13.4772 38.1421 9.85786C34.5228 6.23858 29.5228 4 24 4C18.4772 4 13.4772 6.23858 9.85786 9.85786C6.23858 13.4772 4 18.4772 4 24C4 29.5228 6.23858 34.5228 9.85786 38.1421C13.4772 41.7614 18.4772 44 24 44Z"></path><path stroke="#fff" stroke-linecap="round" stroke-linejoin="round" stroke-width="4" d="M24 28.6248V24.6248C27.3137 24.6248 30 21.9385 30 18.6248C30 15.3111 27.3137 12.6248 24 12.6248C20.6863 12.6248 18 15.3111 18 18.6248"></path><path fill="#fff" fill-rule="evenodd" d="M24 37.6248C25.3807 37.6248 26.5 36.5055 26.5 35.1248C26.5 33.7441 25.3807 32.6248 24 32.6248C22.6193 32.6248 21.5 33.7441 21.5 35.1248C21.5 36.5055 22.6193 37.6248 24 37.6248Z" clip-rule="evenodd"></path></g></svg>
                </div>
                </span>
                <input type="number" class="form-control" placeholder="0">
                </div>
                *@
                @* YEAR OF ZERO COINCIDENCE *@
                <div class="input-group" style="display: none">
                    <span class="input-group-text">Year of Zero Coincidence</span>
                    <input type="text" class="form-control" placeholder="397">
                </div>
            </div>

            @* BUTTONS *@
            <div class="mt-2 d-flex justify-content-between">
                <IconButton TooltipPosition="bottom" TooltipText="Advanced (optional)" IconName="gala:settings" OnClickCallback="@(() => _jsRuntime.SlideToggle("HoroscopeAdvancedInputHolder"))" SmallSize="true" />
                <IconButton @ref="_calculateButton" Id="HoroscopeCalculateButton" IconName="uim:process" Color="success" ButtonText="Calculate" OnClickCallback="CalculateButtonClicked" />
            </div>

        </div>
    </div>
    


    @* OUTPUT *@
    <div class="mt-5 vstack gap-4">

        <div id="PlanetDataTable2" />
        <div id="HouseDataTable2" />

        @*divider*@
        <SkyChartViewer @ref="skyChartViewer" />

        @*SHOW RAW HOROSCOPE & PREDICTION DATA VIA TABS*@
        <HoroscopeInfoView @ref="_horoscopeInfoView" />

        @* EXPERIMENTAL *@
        <PlanetChart @ref="planetChart" />

    </div>


    @*HELP SECTION*@
    <PageHelpSection @ref="_helpSection">
        <Content>
            <h4 class="fw-bold">How to use these predictions?</h4>
            <p class="text-justify mb-4">
                For accurate predictions, results must be duly modified
                or qualified according to the affliction or otherwise of the
                planets concerned. For example, predictions involving planets with
                high strength (Bhava Bala), is often accurate.
            </p>

            <h4 class="fw-bold">Where are these predictions from?</h4>
            <p class="text-justify mb-4">
                Prediction data come from books by renowned astrologer B.V. Raman.
                Books such as <span class="fw-bold">How to Judge Horoscope</span> and
                <span class="fw-bold">Hindu Predictive Astrology</span>,
                were used to make this calculator.
            </p>
        </Content>
    </PageHelpSection>

</div>


@code {


    private string _selectedChartStyle = "South";

    public string SelectedChartStyle
    {
        get => _selectedChartStyle;
        set
        {
            _selectedChartStyle = value;

            //highlight regenerate button to let user know needs recalculation
            _jsRuntime.AnimateHighlightElement("HoroscopeCalculateButton");

            //also add * to button text to let user know needs recalculation
            _calculateButton.UpdateButtonText("Calculate*");
        }
    }

    private string _selectedAyanamsa = SimpleAyanamsa.LahiriChitrapaksha.ToString();

    /// <summary>
    /// if not specified will not be included in final URL
    /// default set to Lahiri Chitrapaksha, as used system wide
    /// </summary>
    public string SelectedAyanamsa
    {
        get => _selectedAyanamsa;
        set
        {
            _selectedAyanamsa = value;

            //highlight regenerate button to let user know needs recalculation
            _jsRuntime.AnimateHighlightElement("HoroscopeCalculateButton");

            //also add * to button text to let user know needs recalculation
            _calculateButton.UpdateButtonText("Calculate*");
        }
    }

    private IconButton _calculateButton;

    private PlanetChart planetChart;

    private SkyChartViewer skyChartViewer;

    /// <summary>
    /// Param used in URL to set Person ID via URL
    /// also set via URL when page is loaded
    /// </summary>
    [Parameter]
    public string PersonIdUrl { get; set; } = "";

    private string _pageTitle = "Horoscope | VedAstro";

    private PersonSelectorBox? _peopleSelectorBox;

    private Person _selectedPerson;

    private HoroscopeInfoView _horoscopeInfoView;

    private PageHelpSection _helpSection;



    //█░░ █ █▀▀ █▀▀ █▀▀ █▄█ █▀▀ █░░ █▀▀   █▀▄▀█ █▀▀ ▀█▀ █░█ █▀█ █▀▄ █▀
    //█▄▄ █ █▀░ ██▄ █▄▄ ░█░ █▄▄ █▄▄ ██▄   █░▀░█ ██▄ ░█░ █▀█ █▄█ █▄▀ ▄█
    //METHODS THAT CAN IMPLEMENT ASYNC ERROR HANDLER

    private async Task CalculateButtonClicked() => await InvokeAsync(async () => await _CalculateAndUpdateEvents()).Try(_jsRuntime);

    protected override async Task OnAfterRenderAsync(bool firstRender) => await InvokeAsync(async () => await _OnAfterRenderAsync(firstRender)).Try(_jsRuntime);



    //█▀█ █▀█ █ █░█ ▄▀█ ▀█▀ █▀▀   █▀▄▀█ █▀▀ ▀█▀ █░█ █▀█ █▀▄ █▀
    //█▀▀ █▀▄ █ ▀▄▀ █▀█ ░█░ ██▄   █░▀░█ ██▄ ░█░ █▀█ █▄█ █▄▀ ▄█

    private async Task _OnAfterRenderAsync(bool firstRender)
    {
        //if parameter has been set then auto load person data as
        //though person was selected and calculate was clicked
        if (PersonIdUrl != null && firstRender)
        {
            await _jsRuntime.ShowLoading();

            //programmatically select the person
            await _peopleSelectorBox.SetPerson(PersonIdUrl);

            //start the same process as show button click
            //todo loading box disappears here, needs fix
            await _CalculateAndUpdateEvents();

            //needed to see updates because any changes in OnAfterRender
            //have to be manually set
            StateHasChanged();

            _jsRuntime.HideLoading();
        }
    }

    /// <summary>
    /// Checks if validation of all input fields
    /// </summary>
    private async Task<bool> ValidationPassed()
    {

        //TEST 1
        //if person not selected, invalid
        if (!_peopleSelectorBox.IsPersonSelected)
        {
            //mark invalid & alert user
            await _jsRuntime.ShowAlert("error", AlertText.SelectName, true);
            return false;
        }

        return true;
    }

    //when calculate button is clicked
    private async Task _CalculateAndUpdateEvents()
    {
        await _jsRuntime.ShowLoading();

        //only continue if passed input field validation
        if (!await ValidationPassed()) { return; }

        //reset button text, since * can be added later
        _calculateButton.UpdateButtonText("Calculate");

        //get person from person dropdown
        _selectedPerson = await _peopleSelectorBox?.GetSelectedPerson();

        //only set url if not already set
        //note:this improves UX, as links can lead faster to data
        PersonIdUrl = _selectedPerson.Id; //save local copy
        AppData.Go($"{PageRoute.Horoscope}/{PersonIdUrl}"); //change url

        //put person name into tab title for easy multi-tabbing
        _pageTitle = $"Horoscope | {_selectedPerson.Name}";

        //update sky chart
        await skyChartViewer.Update(_selectedPerson.BirthTime);

        //update planet chart
        planetChart.UpdateTime(_selectedPerson.BirthTime);

        //inject selected person into component to show horoscope data
        await _horoscopeInfoView.SetPerson(_selectedPerson);

        //init planet data table
        await _InitPlanetDataTable();

        //play sound for better ux
        _jsRuntime.PlayDoneSound();

    }

    private async Task _InitPlanetDataTable()
    {
        //load vedastro.js planet table
        var planetColumns = new[]
        {
            new { API = "PlanetZodiacSign", Enabled = true, Name = "Sign" },
            new { API = "PlanetConstellation", Enabled = true, Name = "Constellation" },
            new { API = "HousePlanetOccupies", Enabled = true, Name = "Occupies" },
            new { API = "HousesOwnedByPlanet", Enabled = true, Name = "Owns" },
            new { API = "PlanetLordOfZodiacSign", Enabled = true, Name = "Sign Lord" },
            new { API = "PlanetLordOfConstellation", Enabled = true, Name = "Const. Lord" },
            new { API = "Empty", Enabled = false, Name = "Empty" },
            new { API = "Empty", Enabled = false, Name = "Empty" },
            new { API = "Empty", Enabled = false, Name = "Empty" },
        };

        var settings = new
        {
            ElementID = "PlanetDataTable2",
            KeyColumn = "Planet",
            ShowHeader = true,
            HeaderIcon = "",
            ColumnData = planetColumns, //columns names to create table
            EnableSorting = false,
            SaveSettings = false,
        };

        //get time in url format
        var timeUrl = _selectedPerson.BirthTime.ToUrl();
        timeUrl = timeUrl.Substring(1) + "/"; //remove leading / and add trailing / (minor format correction)

        //data used to generate table
        var inputArguments = new
        {
            TimeUrl = timeUrl,
            HoraryNumber = 0,
            RotateDegrees = 0,
            Ayanamsa = _selectedAyanamsa, //default is Lahiri
        };

        //call VedAstro.js to generate table
        await _jsRuntime.InvokeVoidAsync("GenerateAstroTable", settings, inputArguments);

    }


}