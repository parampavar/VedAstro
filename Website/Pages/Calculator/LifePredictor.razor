@attribute [Route(PageRoute.LifePredictor)]
@attribute [Route(PageRoute.LifePredictorParam)]
@using VedAstro.Library
@using System.Reflection

<PageTitle>@_pageTitle</PageTitle>

@* EXAMPLE OF DYNAMIC IMAGE *@
<PageTopSideImage ImageName="life-predictor-banner.png"
                  Title="Life Predictor"
                  DescriptionText="Each life is a story. Computation algorithms fused with ancient astrology predicts this story. A digital snapshot of your life on earth." />


@*Dasas are major periods in which the indications of the planets are realised.
Know good and bad periods of your life years ahead.*@


@* SELECTOR AND INFO BOXES*@
<div class="d-md-flex justify-content-between">

    @*SELECTOR*@
    <div class="d-flex flex-wrap" style="width: @GR.W352px;">
        <div class="vstack gap-3">

            <PersonSelectorBox Width="100%" @ref="_easyPersonSelectorBox" @bind-SelectedPersonId="@SelectedPersonId" />

            <div>
                <label class="form-label">Time Range<HelpIconTooltip SmallIcon="true" HelpText="@HelpText.DasaTimeRange" /></label>
                <select @bind="SelectedTimeRangePreset" class="form-control" style="width: @GR.W255px;">
                    <option value="FullLife">Full Life</option>
                    <option style=" font-weight: bold; color: #0d6efd; " value="selectyear">Custom Year</option>
                    <option style=" font-weight: bold; color: #0d6efd; " value="selectage">Custom Age</option>
                    <optgroup label=""></optgroup>
                    <option value="1day">+/- 1 Day</option>
                    <option value="1week">+/- 1 Week</option>
                    <option value="1month">+/- 1 Month</option>
                    <option value="3month">+/- 3 Months</option>
                    <option value="6month">+/- 6 Months</option>
                    <option value="1year">+/- 1 Year</option>
                    <option value="3year">+/- 3 Years</option>
                    <option value="5year">+/- 5 Year</option>
                    <option value="10year">+/- 10 Year</option>
                    <option value="Age1to50">Age 1 to 50</option>
                    <option value="Age50to100">Age 50 to 100</option>
                </select>
            </div>

            @* YEAR SELECTOR *@
            @if (SelectedTimeRangePreset == "selectyear")
            {
                <MonthYearTimeRangeSelector @ref="monthYearTimeRangeSelector" />
            }

            @* AGE SELECTOR *@
            @if (SelectedTimeRangePreset == "selectage")
            {
                <div>
                    <div class="input-group mb-3" style="width: @GR.W255px;">
                        <label class="input-group-text">Start</label>
                        <select @bind="SelectedLifeAgeStart" class="form-select">
                            <option selected>Choose...</option>
                            @foreach (var age in lifeAgeList)
                            {
                                <option value="@age">@age</option>
                            }
                        </select>
                    </div>
                    <div class="input-group mb-3" style="width: @GR.W255px;">
                        <label class="input-group-text">End</label>
                        <select @bind="SelectedLifeAgeEnd" class="form-select">
                            <option selected>Choose...</option>
                            @foreach (var age in lifeAgeList)
                            {
                                <option value="@age">@age</option>
                            }
                        </select>
                    </div>
                </div>
            }

            @* ADVANCED PANEL DROP *@
            <div id="LifePredictorAdvancedInputHolder" class="border-top mt-2 pt-2" style="display: none;">
                @* HEADER TEXT *@
                <span style="font-size: 9.5px;color: grey;margin-top: -18px;position: absolute;background-color: rgb(240, 242, 245);" class="px-1">Advanced Options</span>

                @* AYANAMSA *@
                <div class="input-group mb-2">
                    <label style="width:@GR.W134px;" class="input-group-text">
                        <Icon ExtraClass="me-2" IconName="solar:stars-line-broken" /> Ayanamsa
                    </label>
                    <select @bind="SelectedAyanamsa" class="form-select">

                        <optgroup label="Easy">
                            @foreach (var ayanamsa in @AppData.SimpleAyanamsaAll)
                            {
                                <option value="@ayanamsa">@Format.FormatName(ayanamsa)</option>
                            }
                        </optgroup>
                        <optgroup label="Advanced">
                            @foreach (var ayanamsa in @AppData.AdvancedAyanamsaAll)
                            {
                                <option value="@ayanamsa">@ayanamsa</option>
                            }
                        </optgroup>
                    </select>
                </div>

                @* DASA TYPE *@
                <div class="input-group mb-2">
                    <label style="width:@GR.W134px;" class="input-group-text">
                        <Icon ExtraClass="me-2" IconName="lucide:layout-list" /> Dasa Type
                    </label>
                    <select @bind="SelectedDasaType" class="form-select">
                        @foreach (var dasaType in AllDasaTypes)
                        {
                            <option value="@dasaType">@dasaType</option>
                        }
                    </select>
                </div>

                @* EVENT SELECT *@
                <div class="input-group vstack mb-2">
                    <label style="min-width:@GR.W134px;" class="input-group-text rounded">
                        <Icon ExtraClass="me-2" IconName="lucide:calendar-range" /> Events
                        <HelpIconTooltip ShowOnHover="true" HelpText="Type of events to calculate, more events takes longer" SmallIcon="true" />
                    </label>

                    <div class="form-control d-flex flex-wrap gap-2 rounded" style="width: fit-content;">
                        @if (_isResultReady)
                        {
                            @* 7 Levels : Dasa > Bhukti > Antaram > Sukshma > Prana > Avi Prana > Viprana *@
                            <div class="form-check">
                                <input @bind="@(SelectedEventTagsDictionary[EventTag.PD1])" class="form-check-input" type="checkbox" value="" id="checkbox_PD1"><!--!-->
                                <label class="form-check-label" for="checkbox_PD1">Dasa</label>
                            </div>
                            <div class="form-check">
                                <input @bind="@(SelectedEventTagsDictionary[EventTag.PD2])" class="form-check-input" type="checkbox" value="" id="checkbox_PD2"><!--!-->
                                <label class="form-check-label" for="checkbox_PD2">Bhukti</label>
                            </div>
                            <div class="form-check">
                                <input @bind="@(SelectedEventTagsDictionary[EventTag.PD3])" class="form-check-input" type="checkbox" value="" id="checkbox_PD3"><!--!-->
                                <label class="form-check-label" for="checkbox_PD3">Antaram</label>
                            </div>
                            <div class="form-check">
                                <input @bind="@(SelectedEventTagsDictionary[EventTag.PD4])" class="form-check-input" type="checkbox" value="" id="checkbox_PD4"><!--!-->
                                <label class="form-check-label" for="checkbox_PD4">Sukshma</label>
                            </div>
                            <div class="form-check">
                                <input @bind="@(SelectedEventTagsDictionary[EventTag.PD5])" class="form-check-input" type="checkbox" value="" id="checkbox_PD5"><!--!-->
                                <label class="form-check-label" for="checkbox_PD5">Prana</label>
                            </div>
                            <div class="form-check">
                                <input @bind="@(SelectedEventTagsDictionary[EventTag.PD6])" class="form-check-input" type="checkbox" value="" id="checkbox_PD6"><!--!-->
                                <label class="form-check-label" for="checkbox_PD6">Avi Prana</label>
                            </div>
                            <div class="form-check">
                                <input @bind="@(SelectedEventTagsDictionary[EventTag.PD7])" class="form-check-input" type="checkbox" value="" id="checkbox_PD7"><!--!-->
                                <label class="form-check-label" for="checkbox_PD7">Viprana</label>
                            </div>
@*                             <div class="form-check">
                                <input @bind="@(SelectedEventTagsDictionary[EventTag.PD1])" class="form-check-input" type="checkbox" value="" id="checkbox_PD8"><!--!-->
                                <label class="form-check-label" for="checkbox_PD8">PD8</label>
                            </div>
 *@                            <div class="form-check">
                                <input @bind="@(SelectedEventTagsDictionary[EventTag.AshtakvargaGochara])" class="form-check-input" type="checkbox" value="" id="checkbox_AshtakvargaGochara"><!--!-->
                                <label class="form-check-label" for="checkbox_AshtakvargaGochara">AshtakvargaGochara</label>
                            </div>
                            <div class="form-check">
                                <input @bind="@(SelectedEventTagsDictionary[EventTag.Gochara])" class="form-check-input" type="checkbox" value="" id="checkbox_Gochara"><!--!-->
                                <label class="form-check-label" for="checkbox_Gochara">Gochara</label>
                            </div>
                        }
                        

                    </div>
                </div>
                
                @* ALGORITHM SELECT *@
                <div class="input-group vstack">
                    <label style="min-width:@GR.W134px;" class="input-group-text rounded">
                        <Icon ExtraClass="me-2" IconName="fluent:math-symbols-24-filled" /> Algorithms
                        <HelpIconTooltip ShowOnHover="true" HelpText="Algorithms used in making final summary prediction" SmallIcon="true" />
                    </label>

                    <div class="form-control d-flex flex-wrap gap-2 rounded" style="width: fit-content;">
                        @if (_isResultReady)
                        {
                            @foreach (var algorithmFunc in EventsChartManager.Algorithm.All)
                            {
                                <div class="form-check">
                                    <input @bind="@(SelectedAlgorithmDictionary[algorithmFunc])" class="form-check-input" type="checkbox" value="" id="checkbox_@algorithmFunc.Name">
                                    <label class="form-check-label" for="checkbox_@algorithmFunc.Name">
                                        @algorithmFunc.Name
                                    </label>
                                </div>
                            }
                        }
                    </div>
                </div>

            </div>

            @* BUTTONS *@
            <div class="mt-2 d-flex justify-content-between">
                <IconButton TooltipPosition="bottom" TooltipText="Advanced (optional)" IconName="gala:settings" OnClickCallback="@(() => _jsRuntime.SmoothSlideToggle("LifePredictorAdvancedInputHolder"))" SmallSize="true" />
                <IconButton Id="LifePredictorCalculateButton" @ref="_calculateButton" SmallSize="true" IconName="uim:process" ButtonText="Calculate" Color="success" OnClickCallback="OnClickCalculate" ShowDelayWarning="true"></IconButton>
            </div>


        </div>
    </div>

    @*SIDEBAR*@
    <div class="mt-md-0 mt-4 me-md-5">
        <InfoBox Title="Accurate" FullWidth="true" MaxWidth="@GR.W412" IconName="noto-v1:direct-hit">
            <DescriptionHTML>
                Easy prediction of your life events
            </DescriptionHTML>
            <ImageHTML>
                <img class="img-thumbnail" src="images/life-predictor-alertbox-examples.jpg" />
            </ImageHTML>
        </InfoBox>
    </div>
</div>


@* CHART DISPLAY HERE *@
<div>
    <hr>
    @*hide until ready but initialized as well*@
    <div style="@(_isResultReady?"":"display:none;")">
        <div @ref="_holderDiv">
            <EventsChartViewer @ref="_eventsChartViewer" />
        </div>
    </div>

    @* PLACE HOLDER MESSAGE *@
    @* hide when loaded *@
    <div class="d-flex justify-content-center" style="@((!_isResultReady) ? "" : "display:none !important;")">
        @* important needed to override flex *@
        <span class="" style="color: @AppData.Grey; font-size: 14px;">Chart will appear here after you click calculate</span>
    </div>
    <hr />
</div>


@* ARTICLE HELP TEXTS *@
<div class="gap-3 mt-5" style="max-width: @GR.W667px">

    <ArticleBlock Title="Colors" IconName="noto-v1:artist-palette">
        <TextHTML>
            <p class="text-justify">
                Our eyes and brain can <strong>process and understand</strong> colors much more easily than text.
                That is why we converted complicated predictions into easy understandable colors.
            </p>

            <img src="images/life-predictor-image-1.jpg" class="img-thumbnail mb-3 mt-1" alt="...">

            <p class="text-justify">
                @RED is for bad life events, @GREEN is for good. This makes it possible to quickly read with
                <strong>zero</strong> astrological knowledge. No manuals needed.
            </p>
        </TextHTML>
    </ArticleBlock>

    <ArticleBlock Title="Smart Summary" IconName="emojione:level-slider">
        <TextHTML>
            <p class="text-justify">
                Look carefully at the "<strong>Smart Summary</strong>" row, to see how <strong>good or bad</strong> the life event is going to be.
                The intensity of the @RED or @GREEN is different.
                When it is very <span style="color: darkred;font-weight: 900;">dark red</span> and no green lines around, it means that a very bad event will happen then.
                What exactly will happen will depend on past and present karma.
            </p>
            <img src="images/life-predictor-connection.jpg" class="img-thumbnail mt-2 mb-3" alt="...">
            <p>
                What we can say <strong>for sure</strong>:- during @RED period a native
                will never say "I'm perfectly happy in life now". When it says @RED, something will be poking you. Maybe it is big, maybe small.
                But if the chart says it is there, it will be there. Prepare!
            </p>
        </TextHTML>
    </ArticleBlock>

    <ArticleBlock Title="Perfect Predictions" IconName="noto-v1:direct-hit">
        <TextHTML>
            <img class="img-thumbnail" src="images/life-predictor-alertbox-examples.jpg" />
        </TextHTML>
    </ArticleBlock>

    <ArticleBlock Title="Tis Fate Then?" IconName="twemoji:cloud-with-lightning-and-rain">
        <TextHTML>
            <p>
                <strong>No!</strong> This is astrological weather forecast. That is all.
                The planets are <BoldLink URL="@URL.StarsThatDontGiveDam">not interested</BoldLink> in your personal life, to attribute good or evil to them is illogical.
                <BoldLink URL="@URL.SwamiRamaWiki">Swami Rama</BoldLink> of the himalayas, has written many accounts
                of masters <strong>dodging karmic bullets</strong> like play things.
                How is it possible, if it is fate?
            </p>
            <p>
                You cannot choose when thunderstorms come. <strong>But you can choose</strong> to sit at home dry or to
                get wet outside. Don't take risks or make big changes in life during @RED periods (<strong>thunderstorm</strong>).
                And when you see @GREEN make good use of it. Thus you will sail life untouched by the storms that rage on.
            </p>

        </TextHTML>

    </ArticleBlock>

    <ArticleBlock Title="Astro Umbrella" IconName="emojione:umbrella">
        <TextHTML>
            <p>
                The power of gems and metals to fight the planets pull should never be underestimated.
                Wear the remedies before your @RED period starts and never take it off during this period.
            </p>
            <p>
                Even <BoldLink URL="@URL.MahatmaGandhiWiki">Mahatma Gandhi</BoldLink> noted in his writing that his father just before
                death, awoke one night from sleep <strong>took off the astro bangle</strong> he had worn for decades. Threw it
                across the room and only then did he die.
            </p>
            <p>
                This is but one of many public records from all corners of the globe, proving the power of
                gems &amp; metals to change you karma. <BoldLink URL="@PageRoute.Remedy">Read more</BoldLink> about astro remedies written by Yukteswar himself.
            </p>
        </TextHTML>
    </ArticleBlock>

    <ArticleBlock Title="Mind Predict" IconName="icon-park:brain">
        <TextHTML>
            <p>
                We use the aspect of "<strong>Mind</strong>" in astrology to make this chart. <strong>Why?</strong>
                because anything that effects your mind will make a difference to you. For your awareness of reality
                is through your mind.
            </p>
            <p>
                For instance we can make a chart to predict only "<strong>Weather</strong>" over your head,
                but if you live in the city and don't really care about rain or shine.
                Than what use is that complex chart to you. Most people will say the prediction is wrong.
                Of course it never effected them, can't tell even if correct.
            </p>
        </TextHTML>
    </ArticleBlock>

    <ArticleBlock Title="Fear Death Date?" IconName="mdi:death">
        <TextHTML>
            <p>
                There are many recorded accounts of people through history dying peacefully in their sleep.
                Death will not be a tragedy to everybody, <strong>just not possible</strong>.
                It is only a transition date, to be afraid of it is like being <strong>afraid of your birthday</strong>.
                Life will not be fun that way, we have all tried it.
                And know very well what life without knowing tomorrows tragedy is like.
            </p>
            <p>
                Even death during @GREEN period will be happy or peaceful and never tragic.
                Keep in mind this algorithm does "<strong>NOT</strong>" count <strong>death</strong> as a bad life event,
                it is <strong>how</strong> you die that is predicted to be good or bad.
                Some say, "I like not knowing". We say, "<strong>Good luck</strong>".
            </p>
        </TextHTML>
    </ArticleBlock>

    <ArticleBlock Title="Winning The Lotto" IconName="noto-v1:money-bag">
        <TextHTML>
            <p>
                Since it is without doubt that we can predict when will a person smile or frown. Than it is possible to predict when a person
                will win the lottery. The "<strong>lottery prize</strong>" is different for every person. Not everybody wants money. Some people are very
                happy when they are with others. When lonely they are sad and dont't like it.
            </p>
            <p>
                For example, for this person we can accurately predict
                that when @RED lines appear that this person will most likely be left alone,
                hence causing their <strong>lottery loss</strong>. Ergo we predict with confidence, that a person will win a <strong>real cash lottery</strong>
                if only money is equal to happiness to him. The fact is, most people want not just "cash", but also good <strong>Wife or Fame or Career or Education</strong>
                for actual happiness. Hence also proving why most people don't win the lottery in real life.
            </p>
        </TextHTML>
    </ArticleBlock>

    <ArticleBlock Title="Future of Humanity" IconName="twemoji:globe-showing-europe-africa">
        <TextHTML>
            <p>
                This tool above all holds great potential for the progress of humanity.
                Imagine a world with no accidents, a world with no tragedies, no setbacks.
                Never has has there been a time in human history, where the need has been greater.
            </p>
            <p>
                More and more is at stake at dime's turn. In our modern age a mere momentary lapse
                in judgment can cost more to the whole of humanity then it ever did before.
                Imagine a world where laughter abounds &amp; fear stands still.
                "<strong>You may say I'm a dreamer, but I'm not the only one</strong>", John Lenon.
            </p>
        </TextHTML>
    </ArticleBlock>


    <ArticleBlock Title="Source of Code" IconName="noto-v1:backhand-index-pointing-up">
        <TextHTML>
            <p>
                The people should know, the source behind many of the algorithmic patterns used to make this chart.
                It was gained only during deep prayers and dreams. This is <strong>nothing new</strong> nor surprising.
                <BoldLink URL="@URL.RamanujanQuoteWiki">Ramanujan</BoldLink> also credits his theorems to the dreams of the goddess Namagiri.
                An example of this <strong>divine guidance</strong> can be seen below.
            </p>

            <img src="images/ChartV11vsChartV12.jpg" class="img-thumbnail mt-2 mb-3" alt="...">

            <p>
                The code needed to solve V11 inaccuracy only came in the dream of the programmer.
                At first the solution seemed <strong>technically not logical</strong>, it was implemented only because of faith.
                Exactly as <BoldLink URL="@URL.StPaulWiki">St. Paul</BoldLink> said, "<strong>faith is the proof of things unseen</strong>".
                The programmer who wrote the solution did not think it would work at the time of development.
                And when the chart came out better than before, we doubted no more.
            </p>

            <QuoteTextBlock Author="Emerson" URL="@URL.EmersonWiki">
                Did the wires generate the galvanism?
            </QuoteTextBlock>

        </TextHTML>

    </ArticleBlock>


    @*     <QuoteTextBlock Author="Srinivasa Ramanujan" URL="@URL.RamanujanQuoteWiki">While asleep,
    I had an unusual experience.
    There was a red screen formed by flowing blood, as it were. I was observing it. Suddenly a hand began to write on the screen.
    I became all attention.
    That hand wrote a number of elliptic integrals. They stuck to my mind. As soon as I woke up,
    I committed them to writing.</QuoteTextBlock>
    *@

</div>


@code {

    private List<DasaType> AllDasaTypes = new List<DasaType>((DasaType[])Enum.GetValues(typeof(DasaType)));
    private List<EventTag> AllLifePredictorEventTags = new List<EventTag>
    {
        EventTag.PD1,EventTag.PD2, EventTag.PD3, EventTag.PD4,EventTag.PD5,EventTag.PD6,EventTag.PD7,EventTag.PD8,
        EventTag.AshtakvargaGochara,
        EventTag.Gochara
    };

    /// <summary>
    /// shortcut for red text
    /// NOTE : awesome way of using render fragments
    /// </summary>
    private RenderFragment RED = @<span style="color: red; font-weight: 900;">RED</span>;
    private RenderFragment GREEN = @<span style="color: green; font-weight: 900;">GREEN</span>;

    /// <summary>
    /// data from HTML when selection changes is auto updated here
    /// </summary>
    private Dictionary<MethodInfo, bool> SelectedAlgorithmDictionary;


    /// <summary>
    /// Gets all tags that have been selected in checkbox
    /// </summary>
    public List<MethodInfo> SelectedAlgorithms => SelectedAlgorithmDictionary.Where(pair => pair.Value).Select(pair => pair.Key).ToList();

    /// <summary>
    /// data from HTML when selection changes is auto updated here
    /// </summary>
    private Dictionary<EventTag, bool> SelectedEventTagsDictionary;


    /// <summary>
    /// Gets all tags that have been selected in checkbox
    /// </summary>
    public List<EventTag> SelectedEventTags => SelectedEventTagsDictionary.Where(pair => pair.Value).Select(pair => pair.Key).ToList();


    private List<string> lifeAgeList = GetAgeSelectionRange();
    private string SelectedLifeAgeStart;
    private string SelectedLifeAgeEnd;

    /// <summary>
    /// Param used in URL to set Person ID via URL
    /// also set via URL when page is loaded
    /// </summary>
    [Parameter]
    public string PersonIdUrl { get; set; } = "";

    //private HoroscopeInfoView? horoscopeInfoView;

    private ElementReference _holderDiv;

    private string _pageTitle = "Life Predictor";
    //--------------------FIELDS
    private string _selectedTimeRange = "FullLife"; //1st in list
    private string _selectedChartId = "";

    private PageHelpSection _helpSection;

    private PersonSelectorBox? _easyPersonSelectorBox;

    private EventsChartViewer? _eventsChartViewer;

    private MonthYearTimeRangeSelector? monthYearTimeRangeSelector;

    public Person SelectedPerson { get; set; }

    public string SelectedTimeRangePreset
    {
        get => _selectedTimeRange;

        //hide and show easy options based on selection
        set
        {
            //log it or better analytics
            WebLogger.Data($"Selected Time Range:{value}");

            _selectedTimeRange = value;
        }
    }

    private bool _isResultReady = false; //marks if the page ready to loaded

    //linked to selector box
    public string? SelectedPersonId { get; set; }

    /// <summary>
    /// Gets possible age list for selection 120 years
    /// </summary>
    private static List<string> GetAgeSelectionRange()
    {
        var compiledList = new List<string>();

        for (int i = 1; i < 120; i++)
        {
            compiledList.Add(i.ToString());
        }

        //make visible
        return compiledList;
    }

    private string _selectedAyanamsa = SimpleAyanamsa.LahiriChitrapaksha.ToString();

    /// <summary>
    /// if not specified will not be included in final URL
    /// default set to Lahiri Chitrapaksha, as used system wide
    /// </summary>
    public string SelectedAyanamsa
    {
        get => _selectedAyanamsa;
        set
        {
            _selectedAyanamsa = value;

            //highlight regenerate button to let user know needs recalculation
            _jsRuntime.AnimateHighlightElement("LifePredictorCalculateButton");

            //also add * to button text to let user know needs recalculation
            _calculateButton.UpdateButtonText("Calculate*");
        }
    }

    public string SelectedDasaType
    {
        get => "Vimshottari";
        set => _jsRuntime.FunFeaturePopUp("Dasa Types");
    }

    private IconButton _calculateButton;


    //█░░ █ █▀▀ █▀▀ █▀▀ █▄█ █▀▀ █░░ █▀▀   █▀▄▀█ █▀▀ ▀█▀ █░█ █▀█ █▀▄ █▀
    //█▄▄ █ █▀░ ██▄ █▄▄ ░█░ █▄▄ █▄▄ ██▄   █░▀░█ ██▄ ░█░ █▀█ █▄█ █▄▀ ▄█
    //METHODS THAT CAN IMPLEMENT ASYNC ERROR HANDLER

    protected override async Task OnAfterRenderAsync(bool firstRender) => await InvokeAsync(async () => await _OnAfterRenderAsync(firstRender)).Try(_jsRuntime);

    protected override async Task OnInitializedAsync()
    {
        await _jsRuntime.ShowLoading();

        //place holder for data from checkboxes for Algorithms and Events
        SelectedAlgorithmDictionary = EventsChartManager.Algorithm.All.ToDictionary(methodInfo => methodInfo, methodInfo => false);
        SelectedEventTagsDictionary = AllLifePredictorEventTags.ToDictionary(eventTag => eventTag, eventTag => false);

        //select default Algorithms
        var generalMf = SelectedAlgorithmDictionary.Where(x => x.Key.Name == "General").First().Key;
        SelectedAlgorithmDictionary[generalMf] = true;

        //select default Algorithms
        SelectedEventTagsDictionary[EventTag.PD1] = true;
        SelectedEventTagsDictionary[EventTag.PD2] = true;
        SelectedEventTagsDictionary[EventTag.PD3] = true;
        SelectedEventTagsDictionary[EventTag.PD4] = true;
        SelectedEventTagsDictionary[EventTag.PD5] = true;
        SelectedEventTagsDictionary[EventTag.PD6] = true;
        SelectedEventTagsDictionary[EventTag.PD7] = true;
        SelectedEventTagsDictionary[EventTag.Gochara] = true;
        // SelectedEventTagsDictionary[EventTag.PD7] = true;


        _jsRuntime.HideLoading();
        _isResultReady = true;

    }



    //█▀█ █▀█ █ █░█ ▄▀█ ▀█▀ █▀▀   █▀▄▀█ █▀▀ ▀█▀ █░█ █▀█ █▀▄ █▀
    //█▀▀ █▀▄ █ ▀▄▀ █▀█ ░█░ ██▄   █░▀░█ ██▄ ░█░ █▀█ █▄█ █▄▀ ▄█

    private async Task _OnAfterRenderAsync(bool firstRender)
    {

        //if parameter has been set then auto load person data as
        //though person was selected and don't do click cause we don't know where user whats to click
        if (PersonIdUrl != null && firstRender)
        {
            await _jsRuntime.ShowLoading();

            //programmatically select the person
            await _easyPersonSelectorBox.SetPerson(PersonIdUrl);

            //needed to see updates because any changes in OnAfterRender
            //have to be manually set
            StateHasChanged();

            _jsRuntime.HideLoading();
        }
    }

    private async Task OnClickCalculate()
    {
        //keep copy of selected time range else gets reset, on re-render
        var backUpSelection = SelectedTimeRangePreset;

        await _jsRuntime.ShowLoading();

        //only continue if passed input field validation
        if (!EasyValidationPassed()) { return; }

        //mark page as NOT ready (when button clicked 2nd time)
        _isResultReady = false;

        //get data from inputs and save it for use by other components
        SelectedPerson = await _easyPersonSelectorBox.GetSelectedPerson();

        //put person name into tab title for easy multi-tabbing
        _pageTitle = $"Life Predictor | {SelectedPerson.Name}";

        //set data into dasa viewer
        var timeRange = GetTimeRange();

        //get selected algorithms
        //TODO raise alarm if no algorithms selected
        var algorithmFuncsList = new List<AlgorithmFuncs>();
        foreach (var methodInfo in SelectedAlgorithms)
        {
            var del = (AlgorithmFuncs)Delegate.CreateDelegate(typeof(AlgorithmFuncs), methodInfo);
            algorithmFuncsList.Add(del);
        }

        var summaryOptions = new ChartOptions(algorithmFuncsList);

        //pump data into chart
        await _eventsChartViewer.ShowChart(SelectedPerson, timeRange, SelectedEventTags, summaryOptions);

        //only set url if not already set
        //note:this improves UX, as links can lead faster to data
        PersonIdUrl = SelectedPerson.Id; //save local copy
        AppData.Go($"{PageRoute.LifePredictor}/{PersonIdUrl}"); //change url

        //mark page as ready to show results
        _isResultReady = true;

        _jsRuntime.HideAlert();

        //place time preset value back
        SelectedTimeRangePreset = backUpSelection;

    }

    /// <summary>
    /// Gets parsed time from users crazy input
    /// </summary>
    /// <returns></returns>
    private TimeRange GetTimeRange()
    {
        var systemTimezone = Tools.GetSystemTimezone();

        TimeRange timeRange;

        //if user selected indiviual year than make new preset is placed in format that can be read by parser
        if (SelectedTimeRangePreset == "selectyear") //input coming from
        {
            timeRange = monthYearTimeRangeSelector.GetTimeRange(SelectedPerson.GetBirthLocation());
        }
        else
        {
            if (SelectedTimeRangePreset == "selectage") { SelectedTimeRangePreset = $"age{SelectedLifeAgeStart}to{SelectedLifeAgeEnd}"; } //exp age4to50

            timeRange = EventChartTools.AutoCalculateTimeRange(SelectedPerson, SelectedTimeRangePreset, systemTimezone);
        }

        return timeRange;
    }

    /// <summary>
    /// Checks if validation of all input fields
    /// </summary>
    private bool EasyValidationPassed()
    {
        //TEST 1
        //if person not selected, invalid
        if (!_easyPersonSelectorBox.IsPersonSelected)
        {
            //mark invalid & alert user
            _jsRuntime.ShowAlert("error", AlertText.SelectName, true);
            return false;
        }

        //TEST 2
        //if custom year selected then, make sure range selector report valid
        var customSelect = SelectedTimeRangePreset == "selectyear";
        if (customSelect && !(monthYearTimeRangeSelector?.IsValid() ?? true)) //if not available then not selected
        {
            return false;
        }

        //if control reaches here than, it's valid
        return true;
    }


}

