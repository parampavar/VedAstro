@attribute [Route(PageRoute.GoodTimeFinder)]
@using VedAstro.Library
@using System.Collections

<PageTitle>@pageTitle</PageTitle>

@* PAGE HEADER *@
<PageTopSideImage ImageName="good-time-finder.png"
                  Title="Good Time Finder"
                  DescriptionText="Find the right time for wedding, job interview, buying house and etc. Muhurtha is sanskrit for Good Time or Electional Astrology." />


@* NEEDS TO BE LOADED INSIDE SO THAT LIST READY WHEN NEEDED *@
@if (_isResultReady)
{
    @* SELECTOR AND INFO BOXES*@
    <div class="d-md-flex justify-content-between">

        @*SELECTOR*@
        <div class="me-5">
            <div class="vstack gap-3 p-3">

                @* PERSON AND TIME INPUT *@
                <PersonSelectorBox @ref="_easyPersonSelectorBox" @bind-SelectedPersonId="@SelectedPersonId" />
                <div>
                    <label class="form-label">Time Range<HelpIconTooltip SmallIcon="true" HelpText="@HelpText.DasaTimeRange" /></label>
                    <select @bind="SelectedTimeRangePreset" class="form-control" style="width: @GR.W255px;">
                        <option value="1month" selected>+/- 1 Months</option>
                        <option value="1day">+/- 1 Day</option>
                        <option value="1week">+/- 1 Week</option>
                        <option value="1month">+/- 1 Month</option>
                        <option value="2month">+/- 2 Month</option>
                        <option value="3month">+/- 3 Months</option>
                        <option value="6month">+/- 6 Months</option>
                        <option value="1year">+/- 1 Year</option>
                        <option value="3year">+/- 3 Year</option>
                        <option value="5year">+/- 5 Year</option>
                        <option value="10year">+/- 10 Year</option>
                        <option style=" font-weight: bold; color: #0d6efd; " value="selectyear">Custom Year</option>
                    </select>
                </div>

                @* EVENT SELECT *@
                <IconTitle Title="Event Type" TitleHolder="h5" MaxWidthPx="@((int)GR.W667)" />
                <div style="width: @GR.W667px;margin-top:-14px;font-size: 15px;font-family: 'Lexend Deca';" class="d-flex flex-wrap gap-1 mb-3">
                    <div style="width: @GR.W255px;" class="form-check hstack gap-2">
                        <input @bind="@(SelectedTagsDictionary[EventTag.General])" id="@EventTag.General" style=" width: 40px; height: 28px;" class="form-check-input" type="checkbox">
                        <label class="form-check-label d-flex gap-2 w-100" for="@EventTag.General">
                            <Icon IconName="fluent:people-team-20-regular" />
                            @(Format.FormatName(EventTag.General.ToString()))
                            <IconTooltip SmallIcon="true" ExtraClass="ms-auto me-3">
                                <TooltipHtml>
                                    <div style=" max-height: @GR.W157px; overflow: auto; " class="vstack gap-1">
                                        @foreach (var x in EventManager.GetEventDataListByTag(EventTag.General))
                                        {
                                            <span>@x.FormattedName</span>
                                        }
                                    </div>
                                </TooltipHtml>
                            </IconTooltip>
                        </label>
                    </div>
                    <div style="width: @GR.W255px;" class="form-check hstack gap-2">
                        <input @bind="@(SelectedTagsDictionary[EventTag.Personal])" id="@EventTag.Personal" style="width: 40px; height: 28px;" class="form-check-input" type="checkbox">
                        <label class="form-check-label d-flex gap-2 w-100" for="@EventTag.Personal">
                            <Icon IconName="bi:person-fill" />
                            @(Format.FormatName(EventTag.Personal.ToString()))
                            <IconTooltip SmallIcon="true" ExtraClass="ms-auto me-3">
                                <TooltipHtml>
                                    <div style=" max-height: @GR.W157px; overflow: auto; " class="vstack gap-1">
                                        @foreach (var x in EventManager.GetEventDataListByTag(EventTag.Personal))
                                        {
                                            <span>@x.FormattedName</span>
                                        }
                                    </div>
                                </TooltipHtml>
                            </IconTooltip>
                        </label>
                    </div>
                    <div style="width: @GR.W255px;" class="form-check hstack gap-2">
                        <input @bind="@(SelectedTagsDictionary[EventTag.Agriculture])" id="@EventTag.Agriculture" style=" width: 40px; height: 28px; " class="form-check-input" type="checkbox">
                        <label class="form-check-label d-flex gap-2 w-100" for="@EventTag.Agriculture">
                            <Icon IconName="material-symbols:potted-plant" />
                            @(Format.FormatName(EventTag.Agriculture.ToString()))
                            <IconTooltip SmallIcon="true" ExtraClass="ms-auto me-3">
                                <TooltipHtml>
                                    <div style=" max-height: @GR.W157px; overflow: auto; " class="vstack gap-1">
                                        @foreach (var x in EventManager.GetEventDataListByTag(EventTag.Agriculture))
                                        {
                                            <span>@x.FormattedName</span>
                                        }
                                    </div>
                                </TooltipHtml>
                            </IconTooltip>
                        </label>
                    </div>
                    <div style="width: @GR.W255px;" class="form-check hstack gap-2">
                        <input @bind="@(SelectedTagsDictionary[EventTag.Education])" id="@EventTag.Education" style=" width: 40px; height: 28px; " class="form-check-input" type="checkbox">
                        <label class="form-check-label d-flex gap-2 w-100" for="@EventTag.Education">
                            <Icon IconName="tabler:school" />
                            @(Format.FormatName(EventTag.Education.ToString()))
                            <IconTooltip SmallIcon="true" ExtraClass="ms-auto me-3">
                                <TooltipHtml>
                                    Coming Soon!
                                    @* <div style=" max-height: @GR.W157px; overflow: auto; " class="vstack gap-1">
                                @foreach (var x in EventManager.GetEventDataListByTag(EventTag.Agriculture))
                                {
                                <span>@x.FormattedName</span>
                                }
                                </div> *@
                                </TooltipHtml>
                            </IconTooltip>
                        </label>
                    </div>
                    <div style="width: @GR.W255px;" class="form-check hstack gap-2">
                        <input @bind="@(SelectedTagsDictionary[EventTag.Building])" id="@EventTag.Building" style=" width: 40px; height: 28px; " class="form-check-input" type="checkbox">
                        <label class="form-check-label d-flex gap-2 w-100" for="@EventTag.Building">
                            <Icon IconName="carbon:construction" />
                            @(Format.FormatName(EventTag.Building.ToString()))
                            <IconTooltip SmallIcon="true" ExtraClass="ms-auto me-3">
                                <TooltipHtml>
                                    Coming Soon!
                                    @* <div style=" max-height: @GR.W157px; overflow: auto; " class="vstack gap-1">
                                @foreach (var x in EventManager.GetEventDataListByTag(EventTag.Agriculture))
                                {
                                <span>@x.FormattedName</span>
                                }
                                </div> *@
                                </TooltipHtml>
                            </IconTooltip>
                        </label>
                    </div>
                    <div style="width: @GR.W255px;" class="form-check hstack gap-2">
                        <input @bind="@(SelectedTagsDictionary[EventTag.Travel])" id="@EventTag.Travel" style=" width: 40px; height: 28px; " class="form-check-input" type="checkbox">
                        <label class="form-check-label d-flex gap-2 w-100" for="@EventTag.Travel">
                            <Icon IconName="mdi:plane-train" />
                            @(Format.FormatName(EventTag.Travel.ToString()))
                            <IconTooltip SmallIcon="true" ExtraClass="ms-auto me-3">
                                <TooltipHtml>
                                    Coming Soon!
                                    @*
                                <div style="max-height: @GR.W157px; overflow: auto;" class="vstack gap-1">
                                @foreach (var x in EventManager.GetEventDataListByTag(EventTag.Travel))
                                {
                                <span>@x.FormattedName</span>
                                }
                                </div> *@
                                </TooltipHtml>
                            </IconTooltip>
                        </label>
                    </div>
                    <div style="width: @GR.W255px;" class="form-check hstack gap-2">
                        <input @bind="@(SelectedTagsDictionary[EventTag.Marriage])" id="@EventTag.Marriage" style=" width: 40px; height: 28px; " class="form-check-input" type="checkbox">
                        <label class="form-check-label d-flex gap-2 w-100" for="@EventTag.Marriage">
                            <Icon IconName="fluent-emoji-high-contrast:heart-with-arrow" />
                            @(Format.FormatName(EventTag.Marriage.ToString()))
                            <IconTooltip SmallIcon="true" ExtraClass="ms-auto me-3">
                                <TooltipHtml>
                                    <div style=" max-height: @GR.W157px; overflow: auto; " class="vstack gap-1">
                                        @foreach (var x in EventManager.GetEventDataListByTag(EventTag.Marriage))
                                        {
                                            <span>@x.FormattedName</span>
                                        }
                                    </div>
                                </TooltipHtml>
                            </IconTooltip>
                        </label>
                    </div>
                    <div style="width: @GR.W255px;" class="form-check hstack gap-2">
                        <input @bind="@(SelectedTagsDictionary[EventTag.BuyingSelling])" id="@EventTag.BuyingSelling" style=" width: 40px; height: 28px; " class="form-check-input" type="checkbox">
                        <label class="form-check-label d-flex gap-2 w-100" for="@EventTag.BuyingSelling">
                            <Icon IconName="clarity:dollar-solid" />
                            @(Format.FormatName(EventTag.BuyingSelling.ToString()))
                            <IconTooltip SmallIcon="true" ExtraClass="ms-auto me-3">
                                <TooltipHtml>
                                    <div style=" max-height: @GR.W157px; overflow: auto; " class="vstack gap-1">
                                        @foreach (var x in EventManager.GetEventDataListByTag(EventTag.BuyingSelling))
                                        {
                                            <span>@x.FormattedName</span>
                                        }
                                    </div>
                                </TooltipHtml>
                            </IconTooltip>
                        </label>
                    </div>
                    <div style="width: @GR.W255px;" class="form-check hstack gap-2">
                        <input @bind="@(SelectedTagsDictionary[EventTag.HairNailCutting])" id="@EventTag.HairNailCutting" style=" width: 40px; height: 28px; " class="form-check-input" type="checkbox">
                        <label class="form-check-label d-flex gap-2 w-100" for="@EventTag.HairNailCutting">
                            <Icon IconName="game-icons:hair-strands" />
                            @(Format.FormatName(EventTag.HairNailCutting.ToString()))
                            <IconTooltip SmallIcon="true" ExtraClass="ms-auto me-3">
                                <TooltipHtml>
                                    <div style=" max-height: @GR.W157px; overflow: auto; " class="vstack gap-1">
                                        @foreach (var x in EventManager.GetEventDataListByTag(EventTag.HairNailCutting))
                                        {
                                            <span>@x.FormattedName</span>
                                        }
                                    </div>
                                </TooltipHtml>
                            </IconTooltip>
                        </label>
                    </div>
                    <div style="width: @GR.W255px;" class="form-check hstack gap-2">
                        <input @bind="@(SelectedTagsDictionary[EventTag.Medical])" id="@EventTag.Medical" style=" width: 40px; height: 28px; " class="form-check-input" type="checkbox">
                        <label class="form-check-label d-flex gap-2 w-100" for="@EventTag.Medical">
                            <Icon IconName="bxs:injection" />
                            @(Format.FormatName(EventTag.Medical.ToString()))
                        </label>
                        <IconTooltip SmallIcon="true" ExtraClass="ms-auto me-3">
                            <TooltipHtml>
                                <div style=" max-height: @GR.W157px; overflow: auto; " class="vstack gap-1">
                                    @foreach (var x in EventManager.GetEventDataListByTag(EventTag.Medical))
                                    {
                                        <span>@x.FormattedName</span>
                                    }
                                </div>
                            </TooltipHtml>
                        </IconTooltip>
                    </div>
                    <div style="width: @GR.W255px;" class="form-check hstack gap-2">
                        <input @bind="@(SelectedTagsDictionary[EventTag.Dasa])" id="@EventTag.Dasa" style=" width: 40px; height: 28px; " class="form-check-input" type="checkbox">
                        <label class="form-check-label d-flex gap-2 w-100" for="@EventTag.Dasa">
                            <Icon IconName="gis:map-time" />
                            @(Format.FormatName(EventTag.Dasa.ToString()))
                        </label>
                        <IconTooltip SmallIcon="true" ExtraClass="ms-auto me-3">
                            <TooltipHtml>
                                <div style="max-height: @GR.W157px; overflow: auto;" class="vstack gap-1">
                                    @foreach (var x in EventManager.GetEventDataListByTag(EventTag.Medical))
                                    {
                                        <span>@x.FormattedName</span>
                                    }
                                </div>
                            </TooltipHtml>
                        </IconTooltip>
                    </div>
                    <div style="width: @GR.W255px;" class="form-check hstack gap-2">
                        <input @bind="@(SelectedTagsDictionary[EventTag.Gochara])" id="@EventTag.Gochara" style=" width: 40px; height: 28px; " class="form-check-input" type="checkbox">
                        <label class="form-check-label d-flex gap-2 w-100" for="@EventTag.Gochara">
                            <Icon IconName="line-md:moon" />
                            @(Format.FormatName(EventTag.Gochara.ToString()))
                        </label>
                        <IconTooltip SmallIcon="true" ExtraClass="ms-auto me-3">
                            <TooltipHtml>
                                <div style=" max-height: @GR.W157px; overflow: auto; " class="vstack gap-1">
                                    @foreach (var x in EventManager.GetEventDataListByTag(EventTag.Medical))
                                    {
                                        <span>@x.FormattedName</span>
                                    }
                                </div>
                            </TooltipHtml>
                        </IconTooltip>
                    </div>
                </div>
                
                @* ADVANCED PANEL DROP *@
                <div id="GoodTimeFinderAdvancedInputHolder" class="border-top mt-2 pt-2" style="display: none;">
                    @* HEADER TEXT *@
                    <span style="font-size: 11.5px;margin-left: 0px;color: grey;margin-top: -20px;position: absolute;background-color: rgb(240, 242, 245);" class="px-1">Advanced Options</span>

                    @* AYANAMSA *@
                    <div class="input-group mb-2">
                        <label style="width:@GR.W134px;" class="input-group-text">
                            <Icon ExtraClass="me-2" IconName="solar:stars-line-broken" /> Ayanamsa
                        </label>
                        <select @bind="SelectedAyanamsaName" class="form-select">

                            <optgroup label="Easy">
                                @foreach (var ayanamsa in @AppData.SimpleAyanamsaAll)
                                {
                                    <option value="@ayanamsa">@Format.FormatName(ayanamsa)</option>
                                }
                            </optgroup>
                            <optgroup label="Advanced">
                                @foreach (var ayanamsa in @AppData.AdvancedAyanamsaAll)
                                {
                                    <option value="@ayanamsa">@ayanamsa</option>
                                }
                            </optgroup>
                        </select>
                    </div>

                    @* PRECISION *@
                    <div class="input-group">
                        <span class="input-group-text" id="basic-addon1">
                            <Icon ExtraClass="me-2" IconName="lucide:microscope" /> Precision
                            <HelpIconTooltip ShowOnHover="true" HelpText="Days per pixel, low value is high precision larger chart for same time span. Warning! If number too low, chart will not generate. Use offline Desktop app for HD charts." SmallIcon="true"/>
                        </span>

                        <input @bind="daysPerPixelInput" type="number" class="form-control">
                    </div>
                </div>

                
                @* BUTTONS *@
                <div class="mt-2 d-flex justify-content-between">
                    <IconButton TooltipPosition="bottom" TooltipText="Advanced (optional)" IconName="gala:settings" OnClickCallback="@(() => _jsRuntime.SmoothSlideToggle("GoodTimeFinderAdvancedInputHolder"))" SmallSize="true" />
                    <IconButton @ref="_calculateButton" Id="GoodTimeFinderCalculateButton" IconName="uim:process" Color="success" ButtonText="Calculate" OnClickCallback="OnClickCalculate" ShowDelayWarning="true"/>
                </div>
            </div>
        </div>

    </div>

}

@* CHART DISPLAY HERE *@
<div>
    <hr>
    <EventsChartViewer @ref="_eventsChartViewer" />
    <hr />
</div>


@code {

    private double daysPerPixelInput;
    private string pageTitle;
    private bool _isResultReady = false;
    private ElementReference _holderDiv;
    private EventsChartViewer _eventsChartViewer;
    public string? SelectedTimeRangePreset { get; set; } = "3month"; //default to 3 months

    private PersonSelectorBox _easyPersonSelectorBox;
    public string SelectedPersonId { get; set; }

    public string SelectedLifeYearStart { get; set; }

    public string? SelectedLifeYearEnd { get; set; }

    /// <summary>
    /// Gets all tags that have been selected in checkbox
    /// </summary>
    public List<EventTag> SelectedTags => SelectedTagsDictionary.Where(pair => pair.Value).Select(pair => pair.Key).ToList();

    /// <summary>
    /// data from HTML when selection changes is auto updated here
    /// </summary>
    private Dictionary<EventTag, bool> SelectedTagsDictionary;

    private List<EventData> eventDataListFiltered = new List<EventData>();

    public List<EventTag> FullList { get; set; }

    public Person SelectedPerson { get; set; }

    private string _selectedAyanamsaName = SimpleAyanamsa.Raman.ToString();

    private IconButton _calculateButton;

    /// <summary>
    /// if not specified will not be included in final URL
    /// default set to Raman, different from system wide
    /// </summary>
    public string SelectedAyanamsaName
    {
        get => _selectedAyanamsaName;
        set
        {
            _selectedAyanamsaName = value;

            //highlight regenerate button to let user know needs recalculation
            _jsRuntime.AnimateHighlightElement("GoodTimeFinderCalculateButton");

            //also add * to button text to let user know needs recalculation
            _calculateButton.UpdateButtonText("Calculate*");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await _jsRuntime.ShowLoading();

        //set all not selected as default
        //load tag extenstion list
        FullList = EventTagExtensions.GetAll();
        SelectedTagsDictionary = new Dictionary<EventTag, bool>();
        foreach (var eventTag in FullList)
        {
            SelectedTagsDictionary.Add(eventTag, false);
        }

        //only load the xml files if not yet loaded
        //this is set here, so on 2nd search in same session it will use back
        if (!AppData.SearchFilesLoaded) { await AppData.LoadSearchFiles(); }

        //get list of all event nicely formatted via API
        EventManager.EventDataList = await AppData.API.EventsChart.GetEventDataList();

        _jsRuntime.HideLoading();
        _isResultReady = true;


    }



    //█▀█ █▀█ █ █░█ ▄▀█ ▀█▀ █▀▀   █▀▄▀█ █▀▀ ▀█▀ █░█ █▀█ █▀▄ █▀
    //█▀▀ █▀▄ █ ▀▄▀ █▀█ ░█░ ██▄   █░▀░█ ██▄ ░█░ █▀█ █▄█ █▄▀ ▄█

    /// <summary>
    /// Gets possible age list for selection 120 years
    /// </summary>
    private static List<string> GetAgeSelectionRange()
    {
        var compiledList = new List<string>();

        for (int i = 1; i < 120; i++)
        {
            compiledList.Add(i.ToString());
        }

        //make visible
        return compiledList;
    }

    private async Task OnClickCalculate()
    {
        //keep copy of selected time range else gets reset, on re-render
        var backUpSelection = SelectedTimeRangePreset;

        _jsRuntime.ShowLoading();

        //only continue if passed input field validation
        if (!IsValid()) { return; }

        //reset button text, since * can be added later
        _calculateButton.UpdateButtonText("Calculate");

        //mark page as NOT ready (when button clicked 2nd time)
        _isResultReady = false;

        //get data from inputs and save it for use by other components
        SelectedPerson = await _easyPersonSelectorBox.GetSelectedPerson();

        //put person name into tab title for easy multi-tabbing
        pageTitle = $"Muhurtha | {SelectedPerson.Name}";

        //set data into dasa viewer
        var timeRange = GetTimeRange();

        //for muhurtha standard event nature is more logical
        var algorithmFuncsList = new List<AlgorithmFuncs>() { EventsChartManager.Algorithm.General };
        var summaryOptions = new ChartOptions(algorithmFuncsList);

        //pump data into chart
        await _eventsChartViewer.ShowChart(SelectedPerson, timeRange, SelectedTags, summaryOptions, SelectedAyanamsaName);

        //mark page as ready to show results
        _isResultReady = true;

        _jsRuntime.HideAlert();

        //place time preset value back
        SelectedTimeRangePreset = backUpSelection;
    }

    /// <summary>
    /// Gets parsed time from users crazy input
    /// </summary>
    /// <returns></returns>
    private TimeRange GetTimeRange()
    {
        var systemTimezone = Tools.GetSystemTimezone();

        //if user selected indiviual year than make new preset is placed in format that can be read by parser
        if (SelectedTimeRangePreset == "selectyear") { SelectedTimeRangePreset = $"{SelectedLifeYearStart}-{SelectedLifeYearEnd}"; } //exp 2000-2010
                                                                                                                                     //else if (SelectedTimeRangePreset == "selectage") { SelectedTimeRangePreset = $"age{SelectedLifeAgeStart}to{SelectedLifeAgeEnd}"; } //exp age4to50

        var timeRange = EventChartTools.AutoCalculateTimeRange(SelectedPerson, SelectedTimeRangePreset, systemTimezone);

        return timeRange;
    }

    /// <summary>
    /// Checks if validation of all input fields
    /// </summary>
    private bool IsValid()
    {
        //TEST 1
        //if person not selected, invalid
        if (!_easyPersonSelectorBox.IsPersonSelected)
        {
            //mark invalid & alert user
            _jsRuntime.ShowAlert("error", AlertText.SelectName, true);
            return false;
        }

        //TEST 2
        //at least 1 event tag is selected
        if (!SelectedTags.Any())
        {
            //mark invalid & alert user
            _jsRuntime.ShowAlert("error", "Select at least 1 event type!", true);
            return false;
        }


        //if control reaches here than, it's valid
        return true;
    }

    private async Task<string> GetEventsByTag(EventTag tag)
    {

        //only load the xml files if not yet loaded
        //this is set here, so on 2nd search in same session it will use back
        if (!AppData.SearchFilesLoaded) { await AppData.LoadSearchFiles(); }

        EventManager.EventDataList = await Tools.ConvertXmlListFileToInstanceList<EventData>(AppData.EventDataListXML);

        //get all event data/types which has the inputed tag (FILTER)
        eventDataListFiltered = EventManager.GetEventDataListByTag(tag);

        var combined = "";
        foreach (var eventData in eventDataListFiltered)
        {
            combined += eventData.FormattedName + ",";
        }

        return combined;
    }

}
