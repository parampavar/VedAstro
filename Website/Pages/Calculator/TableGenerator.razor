@using VedAstro.Library
@using System.Collections
@using System.Reflection
@using System.Text
@using OfficeOpenXml
@using SwissEphNet
@attribute [Route(PageRoute.TableGenerator)]

<PageTitle>Data Generator | VedAstro</PageTitle>

<PageTop ImageName="table-generator-banner.png"
         Title="ML Data Generator"
         DescriptionText="Easily generate large astronomical tables for use in ML/AI Model training and Data Science for free">
</PageTop>

<div>
    @* INPUT *@
    <div class="vstack gap-5" style="max-width: @GR.W412px;">

        @* SOURCE SELECTOR *@
        <div class="vstack gap-3">
            <IconTitle IconName="flat-color-icons:list" Title="Time List" TitleHolder="h5" MaxWidthPx="@((int)GR.W667)">
                <ButtonRow>
                    <HelpIconTooltip ShowOnHover="true" HelpText="@HelpText.Column1MLData" SmallIcon="true" />
                </ButtonRow>
            </IconTitle>

            @* SOURCE SELECT *@
            <div class="input-group">
                <label class="input-group-text gap-2" for="SourceSelectInput" style="width: 165px;"><Icon IconName="flat-color-icons:data-recovery" Size="34" />Source</label>
                <select @bind="SelectedSource" class="form-select" id="SourceSelectInput" style="font-weight: 600; font-size: 17px;">
                    <option value="" selected>Select...</option>
                    <option value="generate">Generate New</option>
                    <option value="upload">Upload CSV or Excel</option>
                    <option value="sample">Public +10k Horoscopes</option>
                </select>
            </div>

            @* TIME RANGE GENERATE *@
            <div @ref="timeRangeGenerateInputHtml" style="display:none;">
                <div class="vstack gap-3">
                    <TimeLocationInput LabelText="Start Time" @ref="_inputTimeLocation" />

                    @* TIME RANGE *@
                    <div class="input-group">
                        <label class="input-group-text gap-2" for="TimeRangeInput" style="width: 165px;"><Icon IconName="flat-color-icons:calendar" Size="34" />End Time</label>
                        <select @bind="SelectedTimeRangePreset" class="form-select" id="TimeRangeInput" style="font-weight: 600; font-size: 17px;">
                            <option value="" selected>Make a choice...</option>
                            <option value="1month">+/- 1 Month</option>
                            <option value="2month">+/- 2 Month</option>
                            <option value="3month">+/- 3 Months</option>
                            <option value="6month">+/- 6 Months</option>
                            <option value="1year">+/- 1 Year</option>
                            <option value="3year">+/- 3 Year</option>
                            <option value="5year">+/- 5 Year</option>
                            <option value="10year">+/- 10 Year</option>
                            <option style=" font-weight: bold; color: #0d6efd; " value="selectyear">Custom Year</option>
                        </select>
                    </div>
                </div>
            </div>

            @* TIME RANGE UPLOAD *@
            <div @ref="timeRangeUploadInputHtml" style="display:none;">
                <div>
                    <Icon IconName="noto-v1:construction" />
                    <p>UNDER CONSTRUCTION : <a href="@PageRoute.Donate">Donate</a> to speed development</p>
                </div>
            </div>

            @* TIME RANGE SAMPLE HOROSCOPES *@
            <div @ref="timeRangeSampleInputHtml" style="display:none;">
                <div>
                    <Icon IconName="noto-v1:construction" />
                    <p>UNDER CONSTRUCTION : <a href="@PageRoute.Donate">Donate</a> to speed development</p>
                </div>
            </div>


        </div>

        @* DATA POINT / METHOD SELECT *@
        <DataColumnSelector CustomAllMethodList="@MethodListALL" @ref="_DataColumnSelector" />

        @* GENERATE BUTTON *@
        <IconButton ButtonText="Generate" FullWidth="true" FontSize="17px" FontWeight="500" TextCenter="true" SmallSize="true" Color="success" IconName="flat-color-icons:flash-auto" OnClickCallback="OnClickGenerate" />
    </div>

    @* OUTPUT TABLE *@
    <div class="vstack gap-3 mt-4">
        @*dont wrap table, looks untidy*@
        <style>
            th {
                white-space: nowrap;
            }

            td {
                white-space: nowrap;
            }
        </style>
        <hr class="mt-5" />

        @if (_isReady)
        {
            @* TITLE & OPTIONS *@
            <div class="hstack gap-4">

                <div class="hstack gap-3">
                    <IconButton SmallSize="true" IconName="iconamoon:zoom-in" TooltipText="Zoom In" OnClickCallback="OnClickZoomIn" />
                    <IconButton SmallSize="true" IconName="iconamoon:zoom-out" TooltipText="Zoom Out" OnClickCallback="OnClickZoomOut" />
                    <IconButton SmallSize="true" ButtonText="Download" IconName="line-md:cloud-download-loop">
                        <DropDownList>
                            <li>
                                <a class="dropdown-item hstack gap-1" @onclick="OnClickDownloadCSV">
                                    <Icon ExtraClass="me-2 mt-1" NextToText="true" IconName="eos-icons:csv-file" />
                                    <span>CSV</span>
                                </a>
                            </li>
                            <li>
                                <a class="dropdown-item hstack gap-1" @onclick="OnClickDownloadExcel">
                                    <Icon ExtraClass="me-2 mt-1" NextToText="true" IconName="mdi:microsoft-excel" />
                                    <span>Excel</span>
                                </a>
                            </li>
                            <li>
                                <a class="dropdown-item hstack gap-1" @onclick="OnClickDownloadExcel">
                                    <Icon ExtraClass="me-2 mt-1" NextToText="true" IconName="simple-icons:apacheparquet" />
                                    <span>Parquet</span>
                                </a>
                            </li>
                           @*  <li>
                                <a class="dropdown-item hstack gap-1" @onclick="OnClickDownloadExcel">
                                    <Icon ExtraClass="me-2 mt-1" NextToText="true" IconName="tabler:file-database" />
                                    <span>HDF5</span>
                                </a>
                            </li> *@
                        </DropDownList>
                    </IconButton>
                </div>
                <div class="hstack gap-3">
                    <span class="mt-1">Rows : <strong>@CurrentTable.RowsCount</strong></span>
                    <span class="mt-1">Columns : <strong>@CurrentTable.ColumnsCount</strong></span>
                </div>
            </div>


            @* TABLE *@
            <div id="MLTableHolder">
                @((MarkupString)CurrentTable.ToHtml())
            </div>
        }
        else
        {
            @* PLACE HOLDER MESSAGE *@
            @* hide when loaded *@
            <div class="d-flex justify-content-center" style="@((!_isReady) ? "" : "display:none !important;")">
                @* important needed to override flex *@
                <span style="color: @AppData.Grey; font-size: 14px;">Table will appear here after <strong>Generate</strong></span>
                <span style="color: @AppData.Grey; font-size: 14px;">Export as <strong>CSV</strong> or <strong>Excel</strong></span>
            </div>
        }

    </div>

</div>


@code {

    #region FIELDS

    private int CurrentZoomLevel = 100; //defaults to 100 on start

    private MLTable CurrentTable = new MLTable();

    private ElementReference timeRangeUploadInputHtml;

    private ElementReference timeRangeSampleInputHtml;

    private ElementReference timeRangeGenerateInputHtml;

    private APISelectorBox ApiSelectorBox;

    private DataColumnSelector _DataColumnSelector;

    private TimeLocationInput _inputTimeLocation;

    private static List<OpenAPIMetadata> MethodListALL
    {
        get
        {

            //get all the calc for time & planet (possible data points)
            var foundCalcs = AutoCalculator.FindCalcs(null, Time.Empty, PlanetName.Sun); //note data does not matter
            var tempAll = OpenAPIMetadata.FromMethodInfoList(foundCalcs);
            return tempAll;
        }
    }

    private bool _isReady;

    public string? SelectedTimeRangePreset
    {
        get => _selectedTimeRangePreset;
        set
        {
            //if user selected some value than only show data input
            //NOTE: this is done reduce clutter until last needed (better UX)
            if (!string.IsNullOrEmpty(value)) { _DataColumnSelector.Show(); }

            _selectedTimeRangePreset = value;
        }
    }

    public string? SelectedSource
    {
        get => _selectedSource;
        set
        {
            //hide & show the correct inputs
            switch (value)
            {
                case "generate":
                    _jsRuntime.Show(timeRangeGenerateInputHtml);
                    _jsRuntime.Hide(timeRangeUploadInputHtml);
                    _jsRuntime.Hide(timeRangeSampleInputHtml);
                    break;
                case "upload":
                    _jsRuntime.Show(timeRangeUploadInputHtml);
                    _jsRuntime.Hide(timeRangeGenerateInputHtml);
                    _jsRuntime.Hide(timeRangeSampleInputHtml);
                    break;
                case "sample":
                    _jsRuntime.Show(timeRangeSampleInputHtml);
                    _jsRuntime.Hide(timeRangeUploadInputHtml);
                    _jsRuntime.Hide(timeRangeGenerateInputHtml);
                    break;
            }

            _selectedSource = value;
        }
    }

    private List<MLTableRow> TableRowList { get; set; } = new List<MLTableRow>();

    private TimeRange timeRange = TimeRange.Empty;

    private string? _selectedSource;

    private string? _selectedTimeRangePreset = ""; //leave default empty to detect later


    #endregion

    protected override async Task OnInitializedAsync()
    {
        //give time to pop, because next is heavy
        await _jsRuntime.ShowLoading(100);

        _DataColumnSelector.Hide();

        _jsRuntime.HideLoading();

    }

    private async Task OnClickGenerate()
    {
        _jsRuntime.ShowLoading();

        //hide & also regenerates table
        _isReady = false;

        //# PREPARE DATA
        //get range to generate start & end of data
        var startTime = await _inputTimeLocation.GetTime();
        var tempPerson = new Person("", startTime, Gender.Empty); //inject start time as birth time HACK
        timeRange = EventChartTools.AutoCalculateTimeRange(tempPerson, SelectedTimeRangePreset, Tools.GetSystemTimezone());
        var timeSlices = Time.GetTimeListFromRange(startTime, timeRange.end, 24);

        //selected data points to include
        var selectedMetaList = _DataColumnSelector.SelectedMethodMetaList;

        //need to reset list, else won't update properly on 2nd generate
        TableRowList = new List<MLTableRow>();

        //using time as 1 column generate the other data columns
        foreach (var _time in timeSlices)
        {
            var finalResultList = new List<APIFunctionResult>();
            foreach (var metaInfo in selectedMetaList)
            {
                //get the planet or house selected by user in each individual data point packet
                List<object> param = metaInfo.SelectedParams.ToList(); //clone else will effect underlying list
                param.Add((object)_time); //time injected from different component

                //calculate together all the parameters given by user (heavy computation)
                var wrapped = new List<MethodInfo>() { metaInfo.MethodInfo };
                var calcDataList = AutoCalculator.ExecuteCals(wrapped, param.ToArray());

                //inject selected params for use when converting into CSV & EXCEL (HACK)
                calcDataList.ForEach(aR => aR.AddSelectedParams(param));

                //combine data columns for this row
                //check if many or just 1 result (is many results inside)
                foreach (var calcData in calcDataList)
                {
                    //if list hidden inside
                    if (calcData?.Result is List<APIFunctionResult> subResults) { finalResultList.AddRange(subResults); }

                    //else add like normal
                    else { finalResultList.AddRange(calcDataList); }

                }

            }

            //add row to table
            TableRowList.Add(new MLTableRow(_time, finalResultList));

        }

        //# BRING DATA TO LIVE AS TABLE
        CurrentTable.Update(TableRowList, selectedMetaList);


        //can show now also regenerates table
        _isReady = true;

        //update view
        StateHasChanged();

        //tactile feedback to user
        await _jsRuntime.ShowAlert("success", AlertText.IsDoneText(), false, 2200);

        _jsRuntime.PlayDoneSound();

        //auto scroll to URL display out, so user can see better
        AppData.Go(PageRoute.GeneratedTableOut);

    }

    private async Task OnClickDownloadCSV()
    {
        //show loading
        await _jsRuntime.ShowLoading(100);

        //convert created table to CSV string
        var csvString = CurrentTable.ToCSV();

        // convert string to file
        var bytes = Encoding.UTF8.GetBytes(csvString);
        var base64Raw = Convert.ToBase64String(bytes);

        //start download using JS
        var base64 = $"data:text/csv;base64,{base64Raw}";
        var filename = $"DataTable.csv"; //todo better name
        await _jsRuntime.InvokeVoidAsync(JS.SaveAsFile, filename, base64);

        //tactile feedback to user
        _jsRuntime.PlayDoneSound();
        await _jsRuntime.ShowAlert("success", AlertText.IsDoneText(), false, 2200);
    }

    private async Task OnClickDownloadParquet()
    {
        //show loading
        await _jsRuntime.ShowLoading(100);
        //convert created table to Parquet string
        var parquetString = await CurrentTable.ToParquet(); // You need to implement ToParquet() method
        var base64Raw = Convert.ToBase64String(parquetString);
        //start download using JS
        var base64 = $"data:text/plain;base64,{base64Raw}"; // Parquet is binary format, but we can use text/plain for download
        var filename = $"DataTable.parquet"; //todo better name
        await _jsRuntime.InvokeVoidAsync(JS.SaveAsFile, filename, base64);
        //tactile feedback to user
        _jsRuntime.PlayDoneSound();
        await _jsRuntime.ShowAlert("success", AlertText.IsDoneText(), false, 2200);
    }


    private async Task OnClickDownloadExcel()
    {
        //show loading
        await _jsRuntime.ShowLoading(100);

        //convert created table to CSV string
        var excelFileBytes = CurrentTable.ToExcel();

        var base64Raw = Convert.ToBase64String(excelFileBytes);
        //start download using JS
        var base64 = $"data:application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;base64,{base64Raw}";
        var filename = $"DataTable.xlsx"; //todo better name
        await _jsRuntime.InvokeVoidAsync(JS.SaveAsFile, filename, base64);
        //tactile feedback to user
        _jsRuntime.PlayDoneSound();
        await _jsRuntime.ShowAlert("success", AlertText.IsDoneText(), false, 2200);


    }

    private async Task OnClickZoomIn()
    {
        //increment current zoom level
        CurrentZoomLevel += 10;

        //note : beautiful JS use without call to JS file (AI's awesome "eval" method)
        await _jsRuntime.InvokeVoidAsync("eval", $"document.getElementById('MLTableHolder').style.zoom = '{CurrentZoomLevel}%'");
    }

    private async Task OnClickZoomOut()
    {
        //increment current zoom level
        CurrentZoomLevel -= 10;

        //note : beautiful JS use without call to JS file (AI's awesome "eval" method)
        await _jsRuntime.InvokeVoidAsync("eval", $"document.getElementById('MLTableHolder').style.zoom = '{CurrentZoomLevel}%'");
    }

}

