@using VedAstro.Library
@using System.Reflection
@using System.Text
@using System;
@using System.Collections.Generic;
@using System.IO;
@using OfficeOpenXml;
@attribute [Route(PageRoute.TableGenerator)]

<PageTitle>Data Generator | VedAstro</PageTitle>

<PageTop ImageName="table-generator-banner.png"
         Title="ML Data Generator"
         DescriptionText="Easily generate large astronomical tables for use in ML/AI Model training and Data Science for free">
</PageTop>

<div class="d-flex flex-wrap gap-5" style="max-width:@GR.W667px;">
    @* INPUT *@
    <div class="vstack gap-5" style="max-width: @GR.W412px;">

        @* SOURCE SELECTOR *@
        <div class="vstack gap-3">
            <IconTitle IconName="flat-color-icons:list" Title="Time List" TitleHolder="h5" MaxWidthPx="@((int)GR.W667)">
                <ButtonRow>
                    <HelpIconTooltip ShowOnHover="true" HelpText="@HelpText.Column1MLData" SmallIcon="true" />
                </ButtonRow>
            </IconTitle>

            @* SOURCE SELECT *@
            <div class="input-group">
                <label class="input-group-text gap-2" for="SourceSelectInput" style="width: 165px;"><Icon IconName="flat-color-icons:data-recovery" Size="34" />Source</label>
                <select @bind="SelectedSource" class="form-select" id="SourceSelectInput" style="font-weight: 600; font-size: 17px;">
                    <option value="" selected>Select...</option>
                    <option value="generate">Generate New</option>
                    <option value="upload">Upload CSV or Excel</option>
                    <option value="sample">Public +10k Horoscopes</option>
                </select>
            </div>

            @* TIME RANGE GENERATE *@
            <div @ref="timeRangeGenerateInputHtml" style="display:none;">
                <div class="vstack gap-3">
                    <TimeLocationInput LabelText="Start Time" @ref="_inputTimeLocation" />

                    @* TIME RANGE *@
                    <div class="input-group">
                        <label class="input-group-text gap-2" for="TimeRangeInput" style="width: 165px;"><Icon IconName="flat-color-icons:calendar" Size="34" />End Time</label>
                        <select @bind="SelectedTimeRangePreset" class="form-select" id="TimeRangeInput" style="font-weight: 600; font-size: 17px;">
                            <option value="" selected>Make a choice...</option>
                            <option value="1month">+/- 1 Month</option>
                            <option value="2month">+/- 2 Month</option>
                            <option value="3month">+/- 3 Months</option>
                            <option value="6month">+/- 6 Months</option>
                            <option value="1year">+/- 1 Year</option>
                            <option value="3year">+/- 3 Year</option>
                            <option value="5year">+/- 5 Year</option>
                            <option value="10year">+/- 10 Year</option>
                            <option style=" font-weight: bold; color: #0d6efd; " value="selectyear">Custom Year</option>
                        </select>
                    </div>
                </div>
            </div>

            @* TIME RANGE UPLOAD *@
            <div @ref="timeRangeUploadInputHtml" style="display:none;">
                <div class="input-group mb-3">
                    <div class="form-control">
                        <InputFile id="inputGroupFile02" OnChange="@OnInputFileChange" />
                    </div>
                    @* <label class="input-group-text" for="inputGroupFile02">Upload</label> *@
                    <button class="btn btn-outline-primary" type="button" id="button-addon2">Upload</button>
                </div>
                <div @ref="uploadFileInfoHolder" class="hstack gap-3" style="display:none;">
                    <span>File Read Complete!</span>
                    <span class="mt-1">Rows : <strong>@_timeList.Count</strong></span>
                    <span class="mt-1">Columns : <strong>@_columnNameList.Count</strong></span>
                </div>

            </div>

            @* TIME RANGE SAMPLE HOROSCOPES *@
            <div @ref="timeRangeSampleInputHtml" style="display:none;">
                <div>
                    <Icon IconName="noto-v1:construction" />
                    <p>UNDER CONSTRUCTION : <a href="@PageRoute.Donate">Donate</a> to speed development</p>
                </div>
            </div>


        </div>

        @* DATA POINT / METHOD SELECT *@
        <DataColumnSelector CustomAllMethodList="@MethodListALL" @ref="_DataColumnSelector" />

        @* GENERATE BUTTON *@
        <IconButton ButtonText="Generate" FullWidth="true" FontSize="17px" FontWeight="500" TextCenter="true" SmallSize="true" Color="success" IconName="flat-color-icons:flash-auto" OnClickCallback="OnClickGenerateHTML" />
    </div>

    @* OUTPUT TABLE *@
    <div class="vstack gap-3 mt-4">
        @*dont wrap table, looks untidy*@
        <style>
            th {
                white-space: nowrap;
            }

            td {
                white-space: nowrap;
            }
        </style>

        @if (_isReady)
        {
            @* TITLE & OPTIONS *@
            <div class="hstack gap-4">

                <div class="hstack gap-3">
                    <IconButton SmallSize="true" IconName="iconamoon:zoom-in" TooltipText="Zoom In" OnClickCallback="OnClickZoomIn" />
                    <IconButton SmallSize="true" IconName="iconamoon:zoom-out" TooltipText="Zoom Out" OnClickCallback="OnClickZoomOut" />
                    <IconButton SmallSize="true" ButtonText="Download" IconName="line-md:cloud-download-loop">
                        <DropDownList>
                            <li>
                                <a class="dropdown-item hstack gap-1" @onclick="OnClickDownloadCSV">
                                    <Icon ExtraClass="me-2 mt-1" NextToText="true" IconName="eos-icons:csv-file" />
                                    <span>CSV</span>
                                </a>
                            </li>
                            <li>
                                <a class="dropdown-item hstack gap-1" @onclick="OnClickDownloadExcel">
                                    <Icon ExtraClass="me-2 mt-1" NextToText="true" IconName="mdi:microsoft-excel" />
                                    <span>Excel</span>
                                </a>
                            </li>
                            <li>
                                <a class="dropdown-item hstack gap-1" @onclick="OnClickDownloadExcel">
                                    <Icon ExtraClass="me-2 mt-1" NextToText="true" IconName="simple-icons:apacheparquet" />
                                    <span>Parquet</span>
                                </a>
                            </li>
                            @*  <li>
                        <a class="dropdown-item hstack gap-1" @onclick="OnClickDownloadExcel">
                        <Icon ExtraClass="me-2 mt-1" NextToText="true" IconName="tabler:file-database" />
                        <span>HDF5</span>
                        </a>
                        </li> *@
                        </DropDownList>
                    </IconButton>
                </div>
                <div class="hstack gap-3">
                    <span class="mt-1">Rows : <strong>Coming soon...</strong></span>
                    <span class="mt-1">Columns : <strong>Coming soon...</strong></span>
                </div>
            </div>


            @* TABLE *@
            <div id="MLTableHolder">
                @((MarkupString)HtmlTable)
            </div>
        }
        else
        {
            <hr class="mt-5" />

            @* PLACE HOLDER MESSAGE *@
            @* hide when loaded *@
            <div class="d-flex justify-content-center" style="@((!_isReady) ? "" : "display:none !important;")">
                @* important needed to override flex *@
                <span style="color: @AppData.Grey; font-size: 14px;">
                    Table will appear here after <strong>Generate</strong><br />
                    Export as <strong>CSV</strong> or <strong>Excel</strong>
                </span>
                <span style="color: @AppData.Grey; font-size: 14px;"></span>
            </div>
            <hr class="" />

        }

    </div>


    @* DOCS *@
    <div class="">

        <ArticleBlock Title="Next Step" IconName="mdi:foot-print">
            <TextHTML>
                After download table in suitable format. You can feed it into an ML model maker, this can be done Python.
                You can also run <kbd>pip install vedastro</kbd> in your local or cloud environment.
            </TextHTML>
        </ArticleBlock>

        <ArticleBlock Title="Price &amp; Payment" IconName="flat-color-icons:like">
            <ButtonRow>
                <IconButton PlaceBottom="true" SmallSize="true" Color="warning" ButtonText="Donate" IconName="openmoji:love-letter" ClickUrl="@PageRoute.Donate" />

                @*                 <IconButton SmallSize="true" ButtonText="Guide" IconName="logos:youtube-icon" OpenNewTab="true" ClickUrl="@URL.APIGuideNextStep"/>
                *@
            </ButtonRow>
            <TextHTML>
                This service will run for <kbd>FREE</kbd>, so long there is money in the <strong>donation box</strong>.
                Below is the <strong>live</strong> balance with auto deducting server &amp; maintenance costs.

                <DonationBalanceViewer />

                Please <BoldLink URL="@PageRoute.Donate">Donate</BoldLink> to increase the speed for yourself and others.
            </TextHTML>
        </ArticleBlock>

    </div>
</div>


@code {

    #region FIELDS

    /// <summary>
    /// generated after upload or after selecting time range
    /// </summary>
    List<Time> _timeList = new List<Time>();
    List<OpenAPIMetadata> _columnNameList = new List<OpenAPIMetadata>();

    private int CurrentZoomLevel = 100; //defaults to 100 on start

    private ElementReference timeRangeUploadInputHtml;

    private ElementReference timeRangeSampleInputHtml;

    private ElementReference timeRangeGenerateInputHtml;

    private APISelectorBox ApiSelectorBox;

    private DataColumnSelector _DataColumnSelector;

    private TimeLocationInput _inputTimeLocation;

    private static List<OpenAPIMetadata> MethodListALL
    {
        get
        {

            //get all the calc for time & planet (possible data points)
            var foundCalcs = AutoCalculator.FindCalcs(null, Time.Empty, PlanetName.Sun); //note data does not matter
            var tempAll = OpenAPIMetadata.FromMethodInfoList(foundCalcs);
            return tempAll;
        }
    }

    private bool _isReady;
    public IBrowserFile UploadedFile { get; set; }
    private ElementReference uploadFileInfoHolder;

    public string? SelectedTimeRangePreset
    {
        get => _selectedTimeRangePreset;
        set
        {
            //if user selected some value than only show data input
            //NOTE: this is done reduce clutter until last needed (better UX, sweet heart's idea)
            if (!string.IsNullOrEmpty(value)) { _DataColumnSelector.Show(); }

            //auto scroll for user lower, so user can see better
            AppData.Go(PageRoute.DataColumnSelector);

            _selectedTimeRangePreset = value;
        }
    }

    public string? SelectedSource
    {
        get => _selectedSource;
        set
        {
            //hide & show the correct inputs
            switch (value)
            {
                case "generate":
                    _jsRuntime.Show(timeRangeGenerateInputHtml);
                    _jsRuntime.Hide(timeRangeUploadInputHtml);
                    _jsRuntime.Hide(timeRangeSampleInputHtml);
                    break;
                case "upload":
                    _jsRuntime.Show(timeRangeUploadInputHtml);
                    _jsRuntime.Hide(timeRangeGenerateInputHtml);
                    _jsRuntime.Hide(timeRangeSampleInputHtml);
                    break;
                case "sample":
                    _jsRuntime.Show(timeRangeSampleInputHtml);
                    _jsRuntime.Hide(timeRangeUploadInputHtml);
                    _jsRuntime.Hide(timeRangeGenerateInputHtml);
                    break;
            }

            _selectedSource = value;
        }
    }

    private List<MLTableRow> TableRowList { get; set; } = new List<MLTableRow>();

    private TimeRange timeRange = TimeRange.Empty;

    private string? _selectedSource;

    /// <summary>
    /// Filled with data when Generate button is clicked
    /// </summary>
    private string? HtmlTable;

    private string? _selectedTimeRangePreset = ""; //leave default empty to detect later


    #endregion

    protected override async Task OnInitializedAsync()
    {
        //give time to pop, because next is heavy
        await _jsRuntime.ShowLoading(100);

        _DataColumnSelector.Hide();

        _jsRuntime.HideLoading();

    }


    //// <summary>
    /// Once received file send for processing (API) to extract time list for later use
    /// </summary>
    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null)
        {
            //keep a copy of the file to be used later
            UploadedFile = file;

            //show icon that file is being processed hold tight
            _jsRuntime.ShowLoading();

            //once updated here, files rows count can be seen by user
            using var ms = new MemoryStream();
            await UploadedFile.OpenReadStream().CopyToAsync(ms);
            _timeList = await AppData.API.MLTable.GetTimeListFromExcel(ms.ToArray());

            //let user know upload success
            _jsRuntime.Show(uploadFileInfoHolder);


            _jsRuntime.HideLoading();

        }
    }


    public async Task<List<DateTimeOffset>> ExtractTimeColumnFromExcel(Stream input)
    {
        Console.WriteLine($"File Size : {input.Length}");

        ExcelPackage.LicenseContext = LicenseContext.NonCommercial; // Set the license context for EPPlus
        var timeList = new List<DateTimeOffset>();
        int timeColumnIndex = -1;

        var excelFileStream = new MemoryStream();
        await input.CopyToAsync(excelFileStream);
        excelFileStream.Position = 0; // Reset the position of the MemoryStream to the beginning

        using (var package = new ExcelPackage(excelFileStream))
        {
            var worksheet = package.Workbook.Worksheets[0]; // Get the first worksheet
                                                            // Start from the second row (index 2) to skip the header
            for (int rowIndex = 2; rowIndex <= worksheet.Dimension.Rows; rowIndex++)
            {
                // If we haven't found the time column yet, search for it
                if (timeColumnIndex == -1)
                {
                    for (int colIndex = 1; colIndex <= worksheet.Dimension.Columns; colIndex++)
                    {
                        var cellValue = worksheet.Cells[rowIndex, colIndex].Value?.ToString();
                        // If the cell value can be parsed as a Time, this is the time column
                        if (Time.TryParseStd(cellValue, out _))
                        {
                            timeColumnIndex = colIndex;
                            break;
                        }
                    }
                }
                // If we've found the time column, add the cell value to the list
                if (timeColumnIndex != -1)
                {
                    var cellValue = worksheet.Cells[rowIndex, timeColumnIndex].Value?.ToString();
                    if (Time.TryParseStd(cellValue, out var time))
                    {
                        timeList.Add(time);
                    }
                }
            }
        }

        Console.WriteLine($"Rows Found : {timeList.Count}");

        return timeList;
    }


    /// <summary>
    /// Only generates
    /// </summary>
    /// <returns></returns>
    private async Task OnClickGenerateHTML()
    {

        await _jsRuntime.ShowLoading();

        //hide & also regenerates table
        _isReady = false;

        //convert inputed data via API into fully calculated html table (conversion to CSV,.. on client side)
        //note: Time list should be generated by previous API call and should be ready for use
        HtmlTable = await AppData.API.MLTable.GenerateMLTableHtml(_timeList, _columnNameList);

        //can show now also regenerates table
        _isReady = true;

        //tactile feedback to user
        await _jsRuntime.ShowAlert("success", AlertText.IsDoneText(), false, 2200);

        _jsRuntime.PlayDoneSound();

        //update view
        StateHasChanged();


        //auto scroll to URL display out, so user can see better
        AppData.Go(PageRoute.GeneratedTableOut);

    }

    private async Task OnClickDownloadCSV()
    {
        //show loading
        await _jsRuntime.ShowLoading(100);

        //convert created table to CSV string
        var csvString = await AppData.API.MLTable.GenerateMLTableCsv(_timeList, _columnNameList);

        // convert string to file
        var bytes = Encoding.UTF8.GetBytes(csvString);
        var base64Raw = Convert.ToBase64String(bytes);

        //start download using JS
        var base64 = $"data:text/csv;base64,{base64Raw}";
        var filename = $"DataTable.csv"; //todo better name
        await _jsRuntime.InvokeVoidAsync(JS.SaveAsFile, filename, base64);

        //tactile feedback to user
        _jsRuntime.PlayDoneSound();
        await _jsRuntime.ShowAlert("success", AlertText.IsDoneText(), false, 2200);
    }


    private async Task OnClickDownloadExcel()
    {
        //show loading
        await _jsRuntime.ShowLoading(100);

        //convert created table to Excel file
        var excelFileBytes = await AppData.API.MLTable.GenerateMLTableExcel(_timeList, _columnNameList);

        var base64Raw = Convert.ToBase64String(excelFileBytes);
        //start download using JS
        var base64 = $"data:application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;base64,{base64Raw}";
        var filename = $"DataTable.xlsx"; //todo better name
        await _jsRuntime.InvokeVoidAsync(JS.SaveAsFile, filename, base64);
        //tactile feedback to user
        _jsRuntime.PlayDoneSound();
        await _jsRuntime.ShowAlert("success", AlertText.IsDoneText(), false, 2200);


    }

    private async Task OnClickZoomIn()
    {
        //increment current zoom level
        CurrentZoomLevel += 10;

        //note : beautiful JS use without call to JS file (AI's awesome "eval" method)
        await _jsRuntime.InvokeVoidAsync("eval", $"document.getElementById('MLTableHolder').style.zoom = '{CurrentZoomLevel}%'");
    }

    private async Task OnClickZoomOut()
    {
        //increment current zoom level
        CurrentZoomLevel -= 10;

        //note : beautiful JS use without call to JS file (AI's awesome "eval" method)
        await _jsRuntime.InvokeVoidAsync("eval", $"document.getElementById('MLTableHolder').style.zoom = '{CurrentZoomLevel}%'");
    }

}

