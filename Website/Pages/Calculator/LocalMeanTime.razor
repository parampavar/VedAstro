@attribute [Route(PageRoute.LocalMeanTime)]
@using VedAstro.Library

<PageTitle>Local Mean Time (LMT)</PageTitle>

<h3>Local Mean Time (LMT)</h3>
<p>
    LMT is the real time at a place based on it's longitude.
    <br />
    At 12PM LMT the Sun will be directly overhead.
</p>

<ul class="nav nav-tabs">
    <li class="nav-item">
        <a href="#calc1" class="nav-link active" data-bs-toggle="tab">Time Now</a>
    </li>
    <li class="nav-item">
        <a href="#calc2" class="nav-link" data-bs-toggle="tab">Long. To Timezone</a>
    </li>
    <li class="nav-item">
        <a href="#calc3" class="nav-link" data-bs-toggle="tab">LMT to STD</a>
    </li>
    <li class="nav-item">
        <a href="#calc4" class="nav-link" data-bs-toggle="tab">Location to Timezone</a>
    </li>
</ul>
<div class="tab-content p-2 border">
    <div class="tab-pane fade show active" id="calc1">
        <div class="vstack gap-3">
            <p>Local and Standard time now at a given location.</p>
            <h5>LMT: @_lmtString</h5>
            <h5>STD: @_stdString1</h5>
            <GeoLocationInput @ref="_geoLocationInput"></GeoLocationInput>
            <hr />
            <IconButton ButtonText="Calculate" IconName="ep:refresh" OnClickCallback="UpdateLocalMeanTime"></IconButton>
        </div>
    </div>
    <div class="tab-pane fade" id="calc2">
        <p>Input a longitude to see the LMT offset used for that location</p>
        <h5>LMT Offset: @_lmtOffset</h5>
        <div class="input-group mb-3">
            <span class="input-group-text">Longitude</span>
            <input @bind="_longitudeInput1" type="text" class="form-control" placeholder="-180 to 180">
        </div>
        <hr />
        <IconButton ButtonText="Calculate" IconName="ep:refresh" OnClickCallback="OnClickCalcLMTOffset"></IconButton>
    </div>
    <div class="tab-pane fade" id="calc3">
        <p>LMT date time convert to STD date time</p>
        <h5>STD Time: @_stdString2</h5>
        <div class="input-group mb-3">
            <span class="input-group-text">LMT</span>
            <input @bind="_lmtInput" type="text" class="form-control">
        </div>
        <div class="input-group mb-3">
            <span class="input-group-text">Longitude</span>
            <input @bind="_longitudeInput2" type="text" class="form-control">
        </div>
        <hr />
        <IconButton ButtonText="Calculate" IconName="ep:refresh" OnClickCallback="OnClickCalcLmtToStd"></IconButton>
    </div>
    <div class="tab-pane fade" id="calc4">
        <p>Uses Google API to get the standard timezone offset used at location, at a point in time</p>
        <h5>Offset (UTC/GMT): @_timezoneOffsetOutput</h5>
        <div class="input-group mb-3">
            <span class="input-group-text">STD Time</span>
            <input @bind="_stdTimeInput" type="text" class="form-control">
        </div>
        <div class="input-group mb-3">
            <span class="input-group-text">Location Name</span>
            <input @bind="_locationNameInput" type="text" class="form-control">
        </div>
        <hr />
        <IconButton ButtonText="Calculate" IconName="ep:refresh" OnClickCallback="OnClickCalcLocationToOffset"></IconButton>
    </div>
</div>

@code {

    string? _longitudeInput1 = "0"; //parsed to double later
    string? _longitudeInput2 = "0"; //parsed to double later
    string? _lmtInput = "00:00 01/01/0001"; //parsed to time later
    string? _lmtString = "Click Calculate";
    string? _stdString1 = "Click Calculate";
    string? _stdString2 = "Click Calculate";
    string? _timezoneOffsetOutput = "Click Calculate";
    string? _stdTimeInput = DateTime.Now.ToString(Time.DateTimeFormatNoTimezone); //set default now time
    string? _locationNameInput = "Singapore";
    string? _lmtOffset = "Click Calculate";
    private GeoLocationInput _geoLocationInput;


    //auto update "time" after location is updated
    //called every time after the component has finished rendering
    protected override void OnAfterRender(bool firstRender) => UpdateLocalMeanTime();

    protected override async Task OnInitializedAsync()
    {
        //update time every 5s
        var timer = new PeriodicTimer(TimeSpan.FromSeconds(5));
        while (await timer.WaitForNextTickAsync()) { UpdateLocalMeanTime(); }
    }

    private void OnClickCalcLmtToStd()
    {
        //get longitude from input
        var longitudeInput = double.Parse(_longitudeInput2);

        //calculate LMT offset
        var offsetTimeSpan = Time.GetLocalTimeOffset(longitudeInput);

        //calculate STD time
        var lmtDateTime = DateTimeOffset.ParseExact(_lmtInput, Time.DateTimeFormatNoTimezone, null);
        var std = Calculate.LmtToStd(lmtDateTime, offsetTimeSpan);

        //update view with STD time
        _stdString2 = std.ToString(Time.DateTimeFormat);
    }

    private async void OnClickCalcLocationToOffset()
    {
        //gets timezone data from Google API & display to user
        _timezoneOffsetOutput = await Tools.GetTimezoneOffsetString(_locationNameInput, _stdTimeInput);
    }

    private void OnClickCalcLMTOffset()
    {
        //get longitude from input
        var longitudeInput = double.Parse(_longitudeInput1);

        //calculate LMT offset
        var offsetTimeSpan = Time.GetLocalTimeOffset(longitudeInput);

        //show to user in correct format, exp: +03:00
        _lmtOffset = new DateTimeOffset(2000, 1, 1, 1, 1, 1, offsetTimeSpan).ToString("zzz");
    }

    private async Task UpdateLocalMeanTime()
    {
        //parse location received from user
        var geoLocation = _geoLocationInput.GetGeoLocation();

        //get time now
        var timeNow = await Time.Now(geoLocation);

        //show lmt time as string
        _lmtString = timeNow.GetLmtDateTimeOffsetText();
        _stdString1 = timeNow.GetStdDateTimeOffsetText();
    }

}