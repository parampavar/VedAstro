@using VedAstro.Library
@attribute [Route(PageRoute.APIBuilder)]


<PageTitle>Easy Open API | VedAstro</PageTitle>

<PageTop ImageName="api-builder-banner.png"
         Title="Open API"
         DescriptionText="Advanced astronomical data via a simple HTTP request for free.
 Enabling you to build your app or service faster and cheaper. Including Python library.">
</PageTop>

@*
    This makes sure API Builder is loaded first.
    Else loading of other components start at the same time
*@
@if (_mainPageInitDone)
{
    @*API DROP DOWN SELECTORS*@
    <div>
        <div class="d-flex flex-wrap gap-5" style="max-width:@GR.W667px;">

            @*GENERATOR*@
            <div class="vstack gap-4" style="max-width: @GR.W412px;">

                <div class="vstack gap-4">

                    @* FUNCTION NAME SELECT *@
                    <div>
                        <IconTitle IconName="flat-color-icons:calculator" Title="Calculator" TitleHolder="h5" MaxWidthPx="@((int)GR.W667)" />
                        <APISelectorBox @ref="ApiSelectorBox" />
                    </div>


                    @* INPUT PARAM NAME SELECT *@
                    <div @ref="_paramInputHolderElement" style="display: none">
                        <IconTitle IconName="flat-color-icons:multiple-inputs" Title="Input Parameters" TitleHolder="h5" MaxWidthPx="@((int)GR.W667)" />
                        <ParameterInputPanel @ref="_parameterInputPanel" />
                    </div>


                    @* ADVANCED *@
                    <div @ref="_paramInputHolderElement2" style="display: none">
                        <span class="mb-3 p-1 hstack gap-2 border-bottom" style="font-size:18px; font-weight:300;">
                            <Icon IconName="gala:settings" Size="30" /> Advanced (optional)
                            <Icon ExtraClass="ms-auto" IconName="icon-park-solid:down-c" OnClickCallback="OnClickShowAdvanced" />
                        </span>
                        @* AYANAMSA *@
                        <div id="AyanamsaInputHolder" style="display: none">
                            <div class="input-group mb-2">
                                <label style="width:@GR.W134px;" class="input-group-text"><Icon ExtraClass="me-2" IconName="solar:stars-line-broken" /> Ayanamsa</label>
                                <select @bind="_selectedAyanamsa" class="form-select">

                                    <optgroup label="Easy">
                                        @foreach (var ayanamsa in @SimpleAyanamsaAll)
                                        {
                                            <option value="@ayanamsa">@Format.FormatName(ayanamsa)</option>
                                        }
                                    </optgroup>
                                    <optgroup label="Advanced">
                                        @foreach (var ayanamsa in @AdvancedAyanamsaAll)
                                        {
                                            <option value="@ayanamsa">@ayanamsa</option>
                                        }
                                    </optgroup>
                                </select>
                            </div>
                            <div class="input-group" style="display: none">
                                <span class="input-group-text">Year of Zero Coincidence</span>
                                <input type="text" class="form-control" placeholder="397">
                            </div>
                        </div>
                    </div>

                </div>


                @* -------- BOTTOM BUTTONS --------*@
                <IconButton ButtonText="Generate" FullWidth="true" FontSize="17px" FontWeight="500" TextCenter="true" SmallSize="true" Color="success" IconName="flat-color-icons:flash-auto" OnClickCallback="@OnClickGenerateButton" />

                @*OUTPUT ARROW ICON*@
                <Icon IconName="flat-color-icons:down" ExtraStyle="text-align: center;" Size="80" />

                @*URL DISPLAY OUT*@
                @* id so we can scroll to on complete *@
                <div class="vstack gap-1" style="margin-top: -32px;">
                    <span style="font-size: 14px; color: @AppData.Grey;">URL</span>
                    <kbd id="UrlDisplayOut" style="padding: 12px; font-size: 18px; overflow-wrap: break-word; line-height: 33px;">@_finalApiGetCall</kbd>
                </div>

                @*COPY AND CALL BUTTON*@
                <div class="d-flex justify-content-center gap-3">

                    <IconButton TooltipPosition="bottom" TooltipText="Copy code snippet" SmallSize="true" ButtonText="Copy Code" IconName="ph:code-fill">
                        <DropDownList>
                            <li>
                                <a class="dropdown-item hstack gap-1" @onclick="@(() => WebsiteTools.OnClickCopyPythonSnippet(ApiSelectorBox.SelectedMethod, this))">
                                    <Icon ExtraClass="me-2 mt-1" NextToText="true" IconName="vscode-icons:file-type-python" />
                                    <span>Python</span>
                                </a>
                            </li>
                            <li>
                                <a class="dropdown-item hstack gap-1" @onclick="@(() => _jsRuntime.FunFeaturePopUp("JavaScript"))">
                                    <Icon ExtraClass="me-2 mt-1" NextToText="true" IconName="skill-icons:javascript" />
                                    <span>JavaScript</span>
                                </a>
                            </li>
                            <li>
                                <a class="dropdown-item hstack gap-1" @onclick="@(() => _jsRuntime.FunFeaturePopUp("Swift"))">
                                    <Icon ExtraClass="me-2 mt-1" NextToText="true" IconName="devicon:swift" />
                                    <span>Swift</span>
                                </a>
                            </li>
                            <li>
                                <a class="dropdown-item hstack gap-1" @onclick="@(() => _jsRuntime.FunFeaturePopUp("Java"))">
                                    <Icon ExtraClass="me-2 mt-1" NextToText="true" IconName="devicon:java" />
                                    <span>Java</span>
                                </a>
                            </li>
                            <li>
                                <a class="dropdown-item hstack gap-1" @onclick="@(() => _jsRuntime.FunFeaturePopUp("C#"))">
                                    <Icon ExtraClass="me-2 mt-1" NextToText="true" IconName="devicon:csharp" />
                                    <span>C# .NET</span>
                                </a>
                            </li>
                            <li>
                                <a class="dropdown-item hstack gap-1" @onclick="@(() => _jsRuntime.FunFeaturePopUp("PHP"))">
                                    <Icon ExtraClass="me-2 mt-1" NextToText="true" IconName="devicon:php" />
                                    <span>PHP</span>
                                </a>
                            </li>
                        </DropDownList>
                    </IconButton>
                    <IconButton ButtonText="Copy URL" TooltipPosition="bottom" TooltipText="Copy HTTP GET request URL" IconName="carbon:link" OnClickCallback="OnClickCopyChartLink" SmallSize="true" />
                    <IconButton ButtonText="Test Call" TooltipPosition="bottom" TooltipText="Demo call to see output" IconName="ph:phone-call-light" OnClickCallback="OnDemoCallGeneratedUrl" SmallSize="true" />
                </div>
            </div>

            @*GUIDE TEXT*@
            <div class="vstack gap-3">
                <ArticleBlock Title="Next Step" IconName="mdi:foot-print">
                    <ButtonRow>
                        <IconButton SmallSize="true" ButtonText="Guide" IconName="logos:youtube-icon" OpenNewTab="true" ClickUrl="@URL.APIGuideNextStep" />
                    </ButtonRow>
                    <TextHTML>
                        <p>
                            Make a <kbd>HTTP GET</kbd> request from your app or website. It can be in any language
                            <strong>JS, Python, C#, Java</strong> or even your browsers' URL.
                        </p>
                        <p>
                            You can also run <kbd>pip install vedastro</kbd> in your local or cloud environment.
                            <BoldLink URL="@URL.YoutubePythonGuide">Watch Python Guide</BoldLink>
                        </p>
                    </TextHTML>
                </ArticleBlock>

                @* LIST OF ALL API CALLS *@
                <APICallList />

                <ArticleBlock Title="Price" IconName="flat-color-icons:money-transfer">
                    <ButtonRow>
                        <IconButton PlaceBottom="true" SmallSize="true" Color="warning" ButtonText="Donate" IconName="openmoji:love-letter" ClickUrl="@PageRoute.Donate" />
                    </ButtonRow>
                    <TextHTML>
                        This service will run for <kbd>FREE</kbd>, so long there is money in the <strong>donation box</strong>.
                        Below is the <strong>live</strong> balance with auto deducting server &amp; maintenance costs.

                        <DonationBalanceViewer />

                        Please <BoldLink URL="@PageRoute.Donate">Donate</BoldLink> to keep this service running for yourself and others.
                    </TextHTML>
                </ArticleBlock>


                <ArticleBlock Title="Simple Response" IconName="bi:filetype-json">
                    <TextHTML>
                        Data is returned in <strong>JSON</strong>. Only 2 properties. First field is always <kbd>Status</kbd>, it can be only <kbd style="background-color:green;">Pass</kbd> or <kbd style="background-color:red;">Fail</kbd>.
                        If it shows <kbd style="background-color:red;">Fail</kbd> then most likely cause is invalid data on your part. More details about the
                        error will be in <kbd>Payload</kbd> property. If call is successful, all the data you need will be alphabetically stored in <kbd>Payload</kbd> property.
                    </TextHTML>
                </ArticleBlock>

                <ArticleBlock Title="No Manuals Needed" IconName="emojione:clamp">
                    <TextHTML>
                        This API is made to be easy for any beginner to get started.
                        The biggest problem with consuming any API, is the <strong>learning curve</strong> .
                        Normally the first 3-5 hours will be spent learning the small nuances or semantics used by the API provider.
                        We hope to reduce this lag with this simple &amp; intuitive <strong>API Builder</strong>.
                    </TextHTML>
                </ArticleBlock>

                <ArticleBlock Title="Sponsor Music" IconName="emojione:violin">
                    <ButtonRow>
                        <IconButton ClickUrl="@PageRoute.Donate" IconName="flat-color-icons:donate" ButtonText="Tip" Outline="true" SmallSize="true"></IconButton>
                    </ButtonRow>
                    <TextHTML>
                        Running this API service, is like playing a <strong>beautiful public orchestra</strong>.
                        It is only possible because of many moving parts by many people.
                        Servers need to be optimized, updated and maintained. Code needs to be improved, tested and cleaned.

                        <img src="images/public-orchestra.jpg" class="img-thumbnail my-3" alt="...">

                        And all this has to be juggled to create the final product you see. Its a group effort.
                        Please consider supporting this service to keep the "music" playing.
                        <strong>Everybody</strong> can enjoy the music, so long as there's <strong>one</strong> person, willing to <BoldLink URL="@PageRoute.Donate">tip</BoldLink>

                        <QuoteTextBlock Author="W.H. Auden" URL="@URL.WHAudenWiki">
                            We are all here on earth to help others:<br />what on earth the others are here for,<br />I don't know.
                        </QuoteTextBlock>
                    </TextHTML>
                </ArticleBlock>

                <ArticleBlock Title="Reverse Engineer" IconName="emojione:hammer-and-wrench">
                    <TextHTML>
                        To maximize the use of the API, you need to understand its <strong>basic structure</strong>.
                        And the best way todo so is to <strong>play with it</strong>. Try modifying the API URL in your browser,
                        and see what data you get. Experiment with different data formats.
                        The API is designed to handle this, so don't worry about breaking it. Have fun.
                    </TextHTML>
                </ArticleBlock>

            </div>
        </div>
    </div>

}


@code {

    #region FIELDS

    /// <summary>
    /// if not specified will not be included in final URL
    /// default set to Raman, as used system wide
    /// </summary>
    private string _selectedAyanamsa = SimpleAyanamsa.LahiriChitrapaksha.ToString();

    /// <summary>
    /// list that is shown to user and is changed by search
    /// </summary>
    private List<OpenAPIMetadata> MethodListFiltered { get; set; } = new List<OpenAPIMetadata>();

    private List<OpenAPIMetadata> MethodListALL = new List<OpenAPIMetadata>();

    private APISelectorBox ApiSelectorBox;

    private ElementReference _paramInputHolderElement;
    private ElementReference _paramInputHolderElement2;
    private ParameterInputPanel _parameterInputPanel;

    private string _finalApiGetCall = "https://api.vedastro.org/Home";

    /// <summary>
    /// Marker to control component loading
    /// start as false
    /// </summary>
    bool _mainPageInitDone = false;

    /// <summary>
    /// marker to make sure only attache handler once
    /// </summary>
    private bool _isEventAttached = false;

    private List<SimpleAyanamsa> SimpleAyanamsaAll { get; set; }

    private List<Ayanamsa> AdvancedAyanamsaAll { get; set; }


    #endregion

    /// <summary>
    /// For use in websites
    /// </summary>
    private enum SimpleAyanamsa
    {
        /// <summary>
        ///
        /// </summary>
        LahiriChitrapaksha = 1,

        /// <summary>
        /// Krishnamurti: This is another popular ayanamsa in Vedic astrology, especially among the followers of the Krishnamurti Paddhati (KP) system. It is based on the position of the star Ashwini at 0 degrees Aries, as proposed by K.S. Krishnamurti.
        /// It is also known as KP Ayanamsa, and it has been widely
        /// used for horary astrology and stellar astrology
        /// </summary>
        KrishnamurtiKP = 5,

        /// <summary>
        /// This is a well-known ayanamsa in Vedic astrology, especially among the followers of B.V. Raman. It is based on the position of the star Revati at 0 degrees Pisces, as suggested by B.V. Raman.
        /// It is also known as Revati Paksha Ayanamsa,
        /// and it has been used for natal astrology and mundane astrology
        /// </summary>
        Raman = 3,

        /// <summary>
        /// This is a prominent ayanamsa in Western sidereal astrology, especially among the followers of Cyril Fagan and Donald Bradley. It is based on the position of the star Aldebaran at 15 degrees Taurus, as advocated by Cyril Fagan.
        /// It is also known as Aldebaran 15 Tau Ayanamsa,
        /// and it has been used for tropical-sidereal conversion
        /// and zodiacal releasing.
        /// </summary>
        FaganBradley = 0,

        /// <summary>
        /// J2000: This is a standard ayanamsa in modern astronomy,
        /// especially for celestial coordinate systems. It is based on the position of the vernal equinox at 0 degrees Aries at noon on January 1st, 2000 (J2000 epoch).
        /// It is also known as J2000 Equinox Ayanamsa,
        /// and it has been used for astronomical calculations
        /// and observations.
        /// </summary>
        J2000 = 18,

        /// <summary>
        /// Yukteshwar: This is a spiritual ayanamsa in Vedic astrology, especially for
        /// Yogananda's teachings. It is based on the position of the star Dhanishta at 0 degrees Aquarius,
        /// as proposed by Sri Yukteshwar.
        /// It is also known as Dhanishta Paksha Ayanamsa,
        /// and it has been used for esoteric astrology and cosmic cycles.
        /// </summary>
        Yukteshwar = 7,

    }


    protected override async Task OnInitializedAsync()
    {
        //NOTE: small needed else, components rendering gets messed up (time to pop)
        await _jsRuntime.ShowLoading(100);

        SimpleAyanamsaAll = new List<SimpleAyanamsa>()
        {
            SimpleAyanamsa.LahiriChitrapaksha,
            SimpleAyanamsa.KrishnamurtiKP,
            SimpleAyanamsa.Raman,
            SimpleAyanamsa.FaganBradley,
            SimpleAyanamsa.J2000,
            SimpleAyanamsa.Yukteshwar,

        };

        AdvancedAyanamsaAll = new List<Ayanamsa>()
        {

            Ayanamsa.FAGAN_BRADLEY,

            Ayanamsa.LAHIRI,

            Ayanamsa.DELUCE,

            Ayanamsa.RAMAN,

            Ayanamsa.USHASHASHI,

            Ayanamsa.KRISHNAMURTI,

            Ayanamsa.DJWHAL_KHUL,

            Ayanamsa.YUKTESHWAR,

            Ayanamsa.JN_BHASIN,

            Ayanamsa.BABYL_KUGLER1,

            Ayanamsa.BABYL_KUGLER2,

            Ayanamsa.BABYL_KUGLER3,

            Ayanamsa.BABYL_HUBER,

            Ayanamsa.BABYL_ETPSC,

            Ayanamsa.ALDEBARAN_15TAU,

            Ayanamsa.HIPPARCHOS,

            Ayanamsa.SASSANIAN,

            Ayanamsa.GALCENT_0SAG,

            Ayanamsa.J1900,

            Ayanamsa.B1950,

            Ayanamsa.SURYASIDDHANTA,

            Ayanamsa.SURYASIDDHANTA_MSUN,

            Ayanamsa.ARYABHATA,

            Ayanamsa.ARYABHATA_MSUN,

            Ayanamsa.SS_REVATI ,

            Ayanamsa.SS_CITRA,

            Ayanamsa.TRUE_CITRA,

            Ayanamsa.TRUE_REVATI,

            Ayanamsa.TRUE_PUSHYA,

            Ayanamsa.GALCENT_RGBRAND ,

            Ayanamsa.GALEQU_IAU1958,

            Ayanamsa.GALEQU_TRUE,

            Ayanamsa.GALEQU_MULA,
            Ayanamsa.GALALIGN_MARDYKS,

            Ayanamsa.TRUE_MULA ,

            Ayanamsa.GALCENT_MULA_WILHELM,

            Ayanamsa.ARYABHATA_522,

            Ayanamsa.BABYL_BRITTON,

            Ayanamsa.TRUE_SHEORAN,

            Ayanamsa.GALCENT_COCHRANE,

            Ayanamsa.GALEQU_FIORENZA,

            Ayanamsa.VALENS_MOON,

            Ayanamsa.LAHIRI_1940,

            Ayanamsa.LAHIRI_VP285,

            Ayanamsa.KRISHNAMURTI_VP291,

            Ayanamsa.LAHIRI_ICRC,
        };


        //other components can start loading now (heavy computation starts)
        _mainPageInitDone = true;

        //show data on display
        _jsRuntime.HideAlert();

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (ApiSelectorBox != null && !_isEventAttached)
        {
            //sub event: when an method is selected, auto show inputs panel
            ApiSelectorBox.OnChangeSelectMethod += OnChangeSelectMethod;
            _isEventAttached = true;
        }
    }

    /// <summary>
    /// Checks if validation of all input fields
    /// </summary>
    public async Task<bool> IsValidationPassed()
    {
        //TEST 1 : Calculator name
        var isSelected = await ApiSelectorBox.IsSelected();
        if (!isSelected)
        {
            //mark invalid & alert user
            await _jsRuntime.ShowAlert("error", "Please select a Calculator first!", true);
            return false;
        }

        //TEST 2 : All input drop down selected
        var isValid = await _parameterInputPanel.IsValidationPassed(); //will raise own error
        if (!isValid) { return false; }


        //if control reaches here than, it's valid
        return true;

    }



    //█▀█ █▀█ █ █░█ ▄▀█ ▀█▀ █▀▀   █▀▄▀█ █▀▀ ▀█▀ █░█ █▀█ █▀▄ █▀
    //█▀▀ █▀▄ █ ▀▄▀ █▀█ ░█░ ██▄   █░▀░█ ██▄ ░█░ █▀█ █▄█ █▄▀ ▄█

    /// <summary>
    /// When user selects a method, this is code is called
    /// </summary>
    private void OnChangeSelectMethod(object sender, EventArgs e)
    {
        if (ApiSelectorBox.GetSelectedMethodName() != "")
        {
            //set new params
            _parameterInputPanel.Show(ApiSelectorBox.SelectedMethod.ParameterTypes);

            //make param input panel visible
            _jsRuntime.Show(_paramInputHolderElement);
            _jsRuntime.Show(_paramInputHolderElement2);
        }
    }

    /// <summary>
    /// After user click generate check data validity, generate final url
    /// </summary>
    /// <returns></returns>
    private async Task OnClickGenerateButton()
    {
        await _jsRuntime.ShowLoading(100);

        //only continue if passed input field validation
        if (!(await IsValidationPassed())) { return; }

        //STAGE 2 :
        //combine the call
        var domain = AppData.URL.ApiUrl; //get stable or beta as needed


        //format of the API call
        //.../Calculator/DistanceBetweenPlanets/PlanetName/Sun/PlanetName/Moon/Location/Singapore/Time/23:59/31/12/2000/+08:00
        var placeHolder = "";
        var calcName = $"/Calculate/{ApiSelectorBox.GetSelectedMethodName()}";
        var paramInput = await _parameterInputPanel.ToApiUrl();
        var ayanamsaUrl = _selectedAyanamsa == SimpleAyanamsa.LahiriChitrapaksha.ToString() ? "" : $"/Ayanamsa/{_selectedAyanamsa}";
        placeHolder = domain + calcName + paramInput + ayanamsaUrl;


        _finalApiGetCall = placeHolder;

        //tactile feedback to user
        await _jsRuntime.ShowAlert("success", AlertText.IsDoneText(), false, 2200);

        _jsRuntime.PlayDoneSound();

        //auto scroll to URL display out, so user can see better
        AppData.Go(PageRoute.UrlDisplayOut);
    }

    private async Task OnDemoCallGeneratedUrl()
    {
        //make API GET direct call on new tab
        _jsRuntime.OpenNewTab(_finalApiGetCall);
    }

    private async Task OnClickCopyChartLink()
    {
        //use js to transfer to clipboard
        await _jsRuntime.InvokeVoidAsync(JS.CopyToClipboard, _finalApiGetCall);

        //let user know link copied
        await _jsRuntime.ShowAlert("success", $"Call Copied!", false, 2600);
    }

    private async Task FilterMethodList(string searchKeyword)
    {

        //if no search text then show all
        if (string.IsNullOrEmpty(searchKeyword) || searchKeyword == "All")
        {
            MethodListFiltered = MethodListALL;
        }
        else
        {
            MethodListFiltered = MethodListALL.FindAll(apiCalc => apiCalc.SearchText.SearchText(searchKeyword));
        }

        // User has stopped typing, perform your action here
        await InvokeAsync(StateHasChanged); // To refresh the UI

    }

    private void OnClickShowAdvanced()
    {
        //advanced inputs visible
        _jsRuntime.ToggleDisplay("AyanamsaInputHolder");
    }

}
