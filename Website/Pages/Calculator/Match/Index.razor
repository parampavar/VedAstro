@attribute [Route(PageRoute.Match)]
@using Microsoft.AspNetCore.Components
@using VedAstro.Library
@using System.Xml.Linq


<PageTitle>Match Checker | VedAstro</PageTitle>

<PageTop ImageName="match-checker.svg"
         Title="Match Checker"
         DescriptionText="Check compatibility between two people. Easily predict your relationship's future.">
</PageTop>


<div class="d-md-flex justify-content-between">
    @*SELECTOR*@
    <div class="me-5">
        <div class="vstack gap-3">
            <PersonSelectorBox @ref="_malePeopleSelector" @bind-SelectedPersonId="@SelectedMale" Label="Male" />
            <PersonSelectorBox @ref="_femalePeopleSelector" @bind-SelectedPersonId="@SelectedFemale" Label="Female" />
            <IconButton IconName="uim:process" ExtraClass="mt-1" Color="success" ButtonText="Calculate" OnClickCallback="@OnClickSubmitButton" />
        </div>
    </div>
    @*SIDEBAR*@
    <div class="mt-md-0 mt-4 me-md-5"><!--when small give at top-->
        <div class="vstack gap-0 gap-md-2">
            <InfoBox Title="Find Perfect Match" Description="Your soulmate is out there. Start a search in our global database" Color="#ffbdf7" ClickUrl="@PageRoute.MatchFinder" MaxWidth="365" FullWidth="@true" IconName="emojione:heart-with-arrow"/>
            <InfoBox Title="Full Check" Description="16 astrological factors used to make this accurate prediction" Color="#d1e7dd" MaxWidth="365" FullWidth="@true" IconName="line-md:check-list-3-twotone"/>
        </div>
    </div>
</div>


<div class="mt-3">
    <IconTitle Title="Accurate" IconName="noto-v1:direct-hit" />
    <MatchReportListViewer @ref="savedMatchReportList" />
</div>

<div class="vstack gap-3" style="max-width: @GR.W764px">

    <ArticleBlock Title="Marriage Karma" IconName="mdi:state-machine">
        <ButtonRow>
            <IconButton IconName="wpf:wedding-cake" ButtonText="Predict Marriage" ClickUrl="@PageRoute.LifePredictor" SmallSize="true" Outline="true" />
        </ButtonRow>
        <TextHTML>
            <p class="text-justify">
                In each life the probability for marriage <strong>comes and goes</strong> multiple times. During the high period,
                your mind and environment around you will be geared towards romance and marriage.
                When this happens you will be attracted to people for partnership, even if they are <strong>not in-tune</strong>.
            </p>
            <img src="images/how-marriage-karma.png" class="img-thumbnail mt-2 mb-3" alt="...">
            <p class="text-justify">
                If this "<strong>marriage karma</strong>" lasted forever, there would be no problem. You can even <strong>marry your enemy</strong>, and you will not fight.
                But in reality this <strong>period ends</strong>, so that next periods can come. When this happens, if your "<strong>life partner</strong>" is not in-tune with you,
                then comes the fights, broken hearts, and divorces. This is how <strong>bad marriages</strong> are made.
            </p>
        </TextHTML>
    </ArticleBlock>



    <ArticleBlock Title="Imagine Perfect Marriages" IconName="emojione:heart-with-arrow">
        <ButtonRow>
            <IconButton IconName="mdi:find-love" ButtonText="Find Match" ClickUrl="@PageRoute.MatchFinder" SmallSize="true" Outline="true" />
        </ButtonRow>
        <TextHTML>
            <p>
                Do we need <strong>more proof?</strong> Is it not high time, for us as a human species to stop hunting for partners blindly like
                animals based on our <strong>senses and circumstances</strong>. But rather use intelligence guided by cosmic laws that guarantee
                a perfect union.
            </p>
            <p>
                The age of "imperfection", the age of <BoldLink OpenInNewTab="false" URL="@PageRoute.NowInDwapara">"Kali" is over</BoldLink>. We have before us a new age of thinking men, the age of "<BoldLink OpenInNewTab="false" URL="@PageRoute.NowInDwapara">Dwarpara</BoldLink>". Gone are the ways of old.
                Just imagine a world with <strong>no divorces</strong>, a world where <strong>happy marriages</strong> is common sight. Where laughter abounds &amp; fear stands still.
            </p>
            
            <QuoteTextBlock Author="John Lenon" URL="@URL.JohnLenonImagine">
                You may say I'm dreamer, <br /> but I'm not the only one.
            </QuoteTextBlock>
        </TextHTML>
    </ArticleBlock>

</div>


@code {

    //VARIABLES
    public string? SelectedMale { get; set; }
    public string? SelectedFemale { get; set; }
    private PersonSelectorBox _malePeopleSelector;
    private PersonSelectorBox _femalePeopleSelector;
    private PersonSelectorBox _SavedMatchReport;
    private MatchReportListViewer savedMatchReportList;
    private bool NothingToShow = false; //start by showing when start



    //--------------------EVENT HANDLERS


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var exampleReport = await WebsiteTools.GetSavedMatchList("101", "101"); //public list used for showing examples
            savedMatchReportList.Show(exampleReport);
        }
    }



    private async Task OnClickSubmitButton()
    {
        await _jsRuntime.ShowLoading();

        //only continue if passed input field validation
        if (!(await IsValidationPassed())) { return; } //if nothing than back to normal

        //navigate page to match report
        AppData.Go($"{PageRoute.MatchReport}/{SelectedMale}/{SelectedFemale}");
    }

    /// <summary>
    /// Checks if validation of all input fields
    /// </summary>
    private async Task<bool> IsValidationPassed()
    {

        //TEST 1
        //if person not selected, invalid
        if (!_malePeopleSelector.IsPersonSelected)
        {
            //mark invalid & alert user
            var msg = $"Select 1st person";
            await _jsRuntime.ShowAlert("error", msg, "How to check match if you don't select a person?");
            return false;

        }

        //TEST 2
        //if person not selected, invalid
        if (!_femalePeopleSelector.IsPersonSelected)
        {
            //mark invalid & alert user
            var msg = $"Select 2nd person";
            await _jsRuntime.ShowAlert("error", msg, "We need two people minimum to tango.");
            return false;
        }

        //TEST 3 : same person knock knock?
        var isSamePerson = _femalePeopleSelector.SelectedPersonId == _malePeopleSelector.SelectedPersonId;
        if (isSamePerson)
        {

            //prepare question to ask user
            var alertData = new
            {
                icon = "question",
                title = $"Are you sure?",
                html = $"You selected the <strong>same person</strong> for both. Seriously, what's the point of checking match then?",
                showCancelButton = true,
                confirmButtonColor = "#3085d6",
                cancelButtonColor = "#d33",
                confirmButtonText = "Yes, sure!"
            };
            var sweetAlertResult = await _jsRuntime.ShowAlertResult(alertData);

            //if user clicked continue, then 00:00 is correct, so pass validation
            var continueClicked = sweetAlertResult.GetProperty("isConfirmed").GetBoolean();
            if (!continueClicked) { return false; }

        }


        //TEST 4 : reversed?
        var isMaleFemale = _malePeopleSelector.SelectedPerson.Gender == Gender.Female;
        var isFemaleMale = _malePeopleSelector.SelectedPerson.Gender == Gender.Female;
        var isReversed = isMaleFemale && isFemaleMale;
        if (isReversed)
        {

            //prepare question to ask user
            var alertData = new
            {
                icon = "question",
                title = $"Are you sure?",
                html = $@"<strong>{_malePeopleSelector.SelectedPerson.Name}</strong> is Female but in selected as Male!",
                showCancelButton = true,
                confirmButtonColor = "#3085d6",
                cancelButtonColor = "#d33",
                confirmButtonText = "Yes, sure!"
            };
            var sweetAlertResult = await _jsRuntime.ShowAlertResult(alertData);

            //if user clicked continue, then 00:00 is correct, so pass validation
            var continueClicked = sweetAlertResult.GetProperty("isConfirmed").GetBoolean();
            if (!continueClicked) { return false; }

        }



        //if control reaches here than, it's valid
        return true;

    }


}