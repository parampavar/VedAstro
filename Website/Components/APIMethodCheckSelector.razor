@namespace Website.Pages
@using VedAstro.Library;
@using System.Xml.Linq
@using System.Reflection


<div @ref="mainElementRef">

    <IconTitle IconName="flat-color-icons:data-sheet" Title="Data Points" TitleHolder="h5" MaxWidthPx="@((int)GR.W667)">
        <ButtonRow>
            <HelpIconTooltip ShowOnHover="true" HelpText="@HelpText.Column2MLData" SmallIcon="true" />
            @*             <Icon ExtraStyle="cursor: pointer;" TooltipText="Suggest New Data Points" IconName="fluent:person-feedback-28-regular" OnClickCallback="@_ApiSelectorBox.OnClickSuggestNewApi"/>
            *@
        </ButtonRow>
    </IconTitle>

    <style>
        .hovered:hover {
            transform: scale(1.05); /* Increase the size of the card */
            box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15); /* Add a shadow effect */
            transition: all 0.3s ease; /* Add a transition effect */
        }

            .hovered:hover span {
                font-weight: 600;
                /* your styles here */
            }
    </style>
    @if (SelectedMethodMetaList.Any())
    {
        @* LIST OF SELECTED DATA POINTS *@
        <div class="vstack gap-2">
            @foreach (var methodData in SelectedMethodMetaList)
            {
                <div class="hovered border-secondary border px-4 py-2 rounded-4 border-2 hstack d-flex justify-content-between">
                    <span class="" style="font-size: 17.5px; color: #030ce1;">@Format.FormatName(methodData.Name)</span>
                    <select class="ms-1">
                        <option value="Sun" selected>Sun</option>
                        <option value="Moon">Moon</option>
                        <option value="Mars">Mars</option>
                        <option value="Mercury">Mercury</option>
                        <option value="Jupiter">Jupiter</option>
                        <option value="Venus">Venus</option>
                        <option value="Saturn">Saturn</option>
                        <option value="Rahu">Rahu</option>
                        <option value="Ketu">Ketu</option>
                    </select>
                    <Icon Size="15" ExtraStyle="cursor: pointer;" TooltipText="Remove" IconName="twemoji:cross-mark" OnClickCallback="@(() => OnClickRemoveMethod(methodData))" />
                </div>
            }
        </div>
    }

    @* special option to add new hidden until needed *@
    <APISelectorBox CustomAllMethodList="@CustomAllMethodList" ExtraClass="mt-2" @ref="_ApiSelectorBox" HideButton="true" />

</div>

@code {

    [Parameter]
    public List<OpenAPIMetadata> CustomAllMethodList { get; set; }

    private bool _showAddNewField = false;
    private ElementReference selectorHtml;
    private ElementReference mainElementRef;

    private APISelectorBox _ApiSelectorBox;
    private List<OpenAPIMetadata> allMethodMetaList = new List<OpenAPIMetadata>();

    /// <summary>
    /// The list of selected methods by user
    /// </summary>
    public List<OpenAPIMetadata?> SelectedMethodMetaList = new List<OpenAPIMetadata?>();

    private bool _isEventAttached = false;


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (_ApiSelectorBox != null && !_isEventAttached)
        {
            //sub event: when an method is selected, auto show inputs panel
            _ApiSelectorBox.OnChangeSelectMethod += OnChangeSelectMethod;
            _isEventAttached = true;
        }
    }

    /// <summary>
    /// Gets selected methods
    /// </summary>
    /// <returns></returns>
    public List<MethodInfo> SelectedMethodInfo() => SelectedMethodMetaList.Select(x => x.MethodInfo).ToList();

    public void Hide() => _jsRuntime.Hide(mainElementRef);

    public void Show() => _jsRuntime.Show(mainElementRef);



    //█▀█ █▀█ █ █░█ ▄▀█ ▀█▀ █▀▀   █▀▄▀█ █▀▀ ▀█▀ █░█ █▀█ █▀▄ █▀
    //█▀▀ █▀▄ █ ▀▄▀ █▀█ ░█░ ██▄   █░▀░█ ██▄ ░█░ █▀█ █▄█ █▄▀ ▄█

    /// <summary>
    /// When user selects a method, this is code is called
    /// basically adds new method
    /// </summary>
    private void OnChangeSelectMethod(object sender, EventArgs e)
    {
        if (_ApiSelectorBox.GetSelectedMethodName() != "")
        {
            //add newly selected data point to main list
            var newMethod = _ApiSelectorBox.SelectedMethod;
            SelectedMethodMetaList.Add(newMethod);

            //reset selector to go back to "make new selection"
            _ApiSelectorBox.Reset();

            //refresh to make changes appear
            StateHasChanged();
        }
    }

    private void OnClickRemoveMethod(OpenAPIMetadata? methodData)
    {
        //remove method from list
        SelectedMethodMetaList.Remove(methodData);

        StateHasChanged();
    }


}
