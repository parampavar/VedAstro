@*SIMPLE BOX TO RENDER IMAGE TOOLTIP OF PERSON BY NAME*@

@namespace Website.Pages
@using VedAstro.Library;
@using System.Xml.Linq



@*this element is auto hidden by Tippy, and made visible when on hover*@
<div @ref="tooltipElement" class="@nameof(this.GetType) hstack gap-2 shadow rounded-4 border-dark-subtle" style="width: max-content;">
    @*only show image if exist, don't waste that nice space*@
    <img style="width: @GR.W157px;" src="@($"{AppData.URL.GetPersonImage}/{Person.Id}")" class="img-thumbnail mt-1" alt="..." />

    @*buttons related to account*@
    <div class="vstack gap-2 my-1">
        <span class="ms-2" style="text-align: center;">@Person.BirthTimeString</span>
        <IconButton OpenNewTab="true" FullWidth="true" ButtonText="Horoscope" IconName="fluent:book-star-20-filled" SmallSize="true" ClickUrl="@($"{PageRoute.Horoscope}/{Person.Id}")" />
        <IconButton OpenNewTab="true" FullWidth="true" ButtonText="Journal" IconName="game-icons:secret-book" SmallSize="true" ClickUrl="@($"{PageRoute.Journal}/{Person.Id}")" />
        <IconButton OpenNewTab="true" FullWidth="true" ButtonText="Life Predictor" IconName="gis:map-time" SmallSize="true" ClickUrl="@($"{PageRoute.LifePredictor}/{Person.Id}")" />
        <div class="hstack gap-2">
            <IconButton TooltipText="Share" FullWidth="true" IconName="ic:baseline-ios-share" SmallSize="true" OnClickCallback="@(() => _jsRuntime.FunFeaturePopUp("Share"))" />
            <IconButton TooltipText="Edit" FullWidth="true" IconName="material-symbols:edit-square" SmallSize="true" ClickUrl="@($"{PageRoute.PersonEditor}/{Person.Id}")" />
            <IconButton TooltipText="Delete" FullWidth="true" IconName="material-symbols:delete" SmallSize="true" OnClickCallback="@OnClickDeleteButton" />
        </div>
    </div>
</div>

@*extra css to make always appear inline*@
<div style="cursor: pointer;white-space: nowrap; display: inline-table;" @ref="nameHolderElement">
    @DisplayName
</div>


@code {

    /// <summary>
    /// image name is expected to exist in images folder with .JPG format
    /// </summary>
    [Parameter]
    public Person Person
    {
        get => _person;
        set
        {
            //if person is empty no tooltip please
            if (Person.Empty.Equals(value))
            {
                _jsRuntime.Hide(tooltipElement);
            }
            else
            {
                _jsRuntime.Show(tooltipElement);

            }
            _person = value;
        }
    }

    private Person _person;

    /// <summary>
    /// specially formatted name to note break beyond 18 char limit
    /// </summary>
    private string DisplayName
    {
        get
        {
            var personName = Person.Name.Truncate(18);
            personName += $" - {Person.BirthYear}";

            //if person empty, than say please select name, used in sub sub-component in dropdown
            return Person.Equals(Person.Empty) ? "Select Person" : personName;
        }
    }

    /// <summary>
    /// element that is shown in tool tip is referenced here to be accessed by Tippy.js
    /// </summary>
    private ElementReference tooltipElement { get; set; }

    /// <summary>
    /// reference to element that shows the name, when mouse over is triggers Tippy
    /// </summary>
    private ElementReference nameHolderElement { get; set; }


    protected override async Task OnAfterRenderAsync(bool firstRender) => await InvokeAsync(async () => await _OnAfterRender(firstRender)).Try(_jsRuntime);

    private async Task _OnAfterRender(bool firstRender)
    {

        if (firstRender)
        {
            //attach tooltip lib element if tooltip provided
            //construct html to show image
            var tooltipSettings =
                new
                {
                    placement = "right",
                    content = tooltipElement,
                    theme = "light",
                    allowHTML = true,
                    arrow = true,
                    interactive = true //so that can click button
                };

            await _jsRuntime.Tippy(nameHolderElement, tooltipSettings);

        }
    }

    private async Task OnClickDeleteButton()
    {

        //ask user if really want to delete
        //prepare question to ask user
        var alertData = new
        {
            icon = "question",
            title = $"Are you sure?",
            html = $"This action will <strong style=\"color:red;\">delete</strong> {Person.Name}",
            showCancelButton = true,
            confirmButtonColor = "#3085d6",
            cancelButtonColor = "#d33",
            confirmButtonText = "Yes, delete"
        };
        var sweetAlertResult = await _jsRuntime.ShowAlertResult(alertData);

        //if user clicked continue, then delete, else end here
        var continueClicked = sweetAlertResult.GetProperty("isConfirmed").GetBoolean();
        if (!continueClicked) { return; }

        //NOTE:
        //once control here, than delete start no ask anymore!

        //show loading message
        await _jsRuntime.ShowLoading();

        //tell API to delete person
        await AppData.API.Person.DeletePerson(Person);

        //page ready
        _jsRuntime.HideAlert();

        //refresh page
        await _jsRuntime.ReloadPage();
    }

}
