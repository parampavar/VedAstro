@namespace Website.Pages
@using VedAstro.Library;



@if (_apiCallData != null)
{

	@if (_apiCallData == typeof(Time))
	{
		<TimeLocationInput @ref="_inputTimeLocation" />
	}
	else if (_apiCallData == typeof(PlanetName))
	{
		<div class="input-group">
			<label class="input-group-text" for="@InstanceId">Planet</label>
			<select @bind="_inputPlanetName" class="form-select" id="@InstanceId">
				<option selected>Choose...</option>
				@{
					foreach (var value in PlanetName.All9Planets)
					{
						<option value="@value">@value</option>
					}
				}
			</select>
		</div>
	}
	else if (_apiCallData == typeof(Angle))
	{
		<div class="input-group">
			<span class="input-group-text" id="basic-addon1">Degrees</span>
			<input @bind="_inputTotalDegrees" type="text" class="form-control" placeholder="23.456">
		</div>
	}
	else if (_apiCallData == typeof(string))
	{
		<div class="input-group">
			<span class="input-group-text" id="basic-addon1">Text</span>
			<input @bind="_inputText" type="text" class="form-control" placeholder="...">
		</div>
	}
	else if (_apiCallData.IsEnum)
	{
		<div class="input-group">
			<label class="input-group-text" for="@InstanceId">@(Format.FormatName(_apiCallData.Name))</label>
			<select @bind="_inputEnumName" class="form-select" id="@InstanceId">
				<option selected>Choose...</option>
				@{
					foreach (var value in Enum.GetValues(_apiCallData))
					{
						<option value="@value">@value</option>
					}
				}
			</select>
		</div>
	}
	else
	{
		<div>
			<Icon IconName="noto-v1:construction" />
			<p>UNDER CONSTRUCTION : <a href="@PageRoute.Donate">Donate</a> to speed development</p>
			<span style="font-size=4px;">@_apiCallData.FullName</span>
		</div>
	}


}

@code {
	/// <summary>
	/// id used to sync labels and inputs, for HTML sake
	/// </summary>
	private static string InstanceId = Guid.NewGuid().ToString();
	private Type _apiCallData;
	private double _inputTotalDegrees;
	private string _inputText;
	private string _inputPlanetName;
	private string _inputEnumName;
	private TimeLocationInput _inputTimeLocation;

	public void SetValue(Type apiCallData)
	{
		this._apiCallData = apiCallData;

		StateHasChanged(); //needed to propagate updates
	}

	public async Task<string> ToApiUrl()
	{
		var combinedUrl = "";

		if (_apiCallData == typeof(Time)) { combinedUrl = await _inputTimeLocation.ToApiUrl(); }
		else if (_apiCallData == typeof(PlanetName)) { combinedUrl = $"/PlanetName/{_inputPlanetName}"; }
		else if (_apiCallData == typeof(Angle)) { combinedUrl = $"/Angle/{_inputTotalDegrees}"; }
		else if (_apiCallData == typeof(string)) { combinedUrl = $"/Text/{_inputText}"; }
		else if (_apiCallData?.IsEnum ?? false) { combinedUrl = $"/{_apiCallData.Name}/{_inputEnumName}"; }


		return combinedUrl;
	}

	/// <summary>
	/// Check if all fields has been filled
	/// </summary>
	/// <returns></returns>
	public async Task<bool> IsValidationPassed()
	{
		//TEST 1 : ENUM
		if (_apiCallData?.IsEnum ?? false)
		{
			var isNotSelected = string.IsNullOrEmpty(_inputEnumName);

			if (isNotSelected)
			{
				//mark invalid & alert user
				await _jsRuntime.ShowAlert("error", $"Please select a {_apiCallData.Name} first!", true);
				return false;

			}
		}


		//TEST 2 : PLANET NAME
		if (_apiCallData == typeof(PlanetName))
		{
			var isNotSelected = string.IsNullOrEmpty(_inputPlanetName);
			if (isNotSelected)
			{
				//mark invalid & alert user
				await _jsRuntime.ShowAlert("error", $"Please select a Planet first!", true);
				return false;

			}
		}


		//if control reaches here than, it's valid
		return true;
	}
}
