@using VedAstro.Library
@using System.Reflection.Emit
@namespace Website.Pages
@using System.Xml.Linq


@*
    A simplified version of time input for:
     - quick adding person and
     - timezone not auto set here, parent has to do it
*@


<style>
    /*to fix time input style in JS date picker*/
    #CalendarPickerHolder input {
        border: 0;
        background-color: #f7f7f7;
    }

    /*to fix time input style in JS date picker*/
    .vanilla-calendar-time__content button {
        margin-top: -2px;
        font-size: 19px;
        border: 0;
        color: black;
    }

    #TimeInputHolder {
        text-align-last: center;
        cursor: pointer;
        font-size: 18px;
    }

    .inputPerfect {
        cursor: pointer;
        font-weight: 600;
        background: transparent;
        font-size: 18px;
    }

</style>


<div class="input-group">

    <span class="input-group-text gap-2"><Icon IconName="noto-v1:timer-clock" Size="30" />@LabelText</span>
    <div class="form-control" >
        @*note : on click will toggle picker, so picker cannot be inside TimeInputHolder*@
        <div id="TimeInputHolder" @onclick="OnClickDateTimeInput" class="d-flex justify-content-between" style="text-wrap: nowrap; overflow: hidden;">
            <div class="hstack">
                <span class="border-0 inputPerfect" id="HourInput" style="width: 33px;" @onclick:stopPropagation="false">@Hour</span>:
                <span class="border-0 inputPerfect" id="MinuteInput" style="width: 33px;" @onclick:stopPropagation="false">@Minute</span>
                <span class="border-0 inputPerfect" id="MeridianInput" style="width: 37px;" @onclick:stopPropagation="false">@Meridian</span>
            </div>
            <div class="hstack">
                <span class="border-0 inputPerfect" id="DateInput" style="width: 33px;" @onclick:stopPropagation="false">@Date</span>/
                <span class="border-0 inputPerfect" id="MonthInput" style="width: 33px;" @onclick:stopPropagation="false">@Month</span>/
                <span class="border-0 inputPerfect" id="YearInput" style="width: 56px;" @onclick:stopPropagation="false">@Year</span>
            </div>
        </div>
        @*this is where js date picker will be created*@
        <div @ref="CalendarPickerHolder"
             class="mt-2 vanilla-calendar visually-hidden border border-primary"
             style="position: absolute; z-index: 999; background: #f7f7f7;"
             id="CalendarPickerHolder" />
    </div>
</div>



@code {

    [Parameter]
    public string? LabelText { get; set; } = "Time";

    public string? Hour
    {
        get => _hour;
        set
        {
            _hour = value;
            StateHasChanged();
        }
    }

    public string? Minute
    {
        get => _minute;
        set
        {
            _minute = value;
            StateHasChanged();
        }
    }

    public string? Meridian
    {
        get => _meridian;
        set
        {
            _meridian = value;
            StateHasChanged();
        }
    }

    public string? Date
    {
        get => _date;
        set
        {
            _date = value;
            StateHasChanged();
        }
    }

    public string? Month
    {
        get => _month;
        set
        {
            _month = value;
            StateHasChanged();
        }
    }

    public string? Year
    {
        get => _year;
        set
        {
            _year = value;
            StateHasChanged();
        }
    }

    public string? TimeZone
    {
        get => _timeZone;
        set
        {
            _timeZone = value;
            StateHasChanged();
        }
    }

    private string? _hour = DateTime.Today.ToString("HH");
    private string? _minute = DateTime.Today.ToString("mm");
    private string? _meridian = DateTime.Today.ToString("tt");
    private string? _date = DateTime.Today.ToString("dd");
    private string? _month = DateTime.Today.ToString("MM");
    private string? _year = DateTime.Today.ToString("yyyy");
    private string? _timeZone = DateTimeOffset.Now.ToString("zzz");

    private ElementReference CalendarPickerHolder;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await _jsRuntime.InvokeVoidAsync(JS.InitCalendarPicker);
        }
    }

    /// <summary>
    /// Creates a new Time instance with inputed time data
    /// </summary>
    public async Task<Time> GetTime(GeoLocation geoLocation) => new Time(await this.GetFullTimeString(), geoLocation);

    /// <summary>
    /// Creates a new DateTimeOffset instance with inputed time data
    /// </summary>
    public async Task<DateTimeOffset> GetDateTimeOffset()
    {
        var fullTimeString = await GetFullTimeString();
        return DateTimeOffset.ParseExact(fullTimeString, Time.DateTimeFormat, null);
    }

    /// <summary>
    /// Gets parseable time string from JS calendar plugin
    /// </summary>
    public async Task<string> GetFullTimeString()
    {
        try
        {
            //get latest values using JS
            var hour = await _jsRuntime.GetText("#HourInput");
            var minute = await _jsRuntime.GetText("#MinuteInput");
            var meridian = await _jsRuntime.GetText("#MeridianInput");
            var date = await _jsRuntime.GetText("#DateInput");
            var month = await _jsRuntime.GetText("#MonthInput");
            var year = await _jsRuntime.GetText("#YearInput");


            //convert 12H time from input to 24H
            DateTime dt = DateTime.Parse($"{hour}:{minute} {meridian}");
            var hour24 = dt.ToString("HH:mm");

            //create 24H standard time format used
            //note: time zone is set by parent
            return $"{hour24} {date}/{month}/{year} {TimeZone}";
        }
        catch (Exception e)
        {
            //log, print and return empty data
            WebLogger.Error(e);
            Console.WriteLine(e);
            return $"00:00 01/01/2000 +00:00";
        }
    }

    private async Task OnClickDateTimeInput()
    {

        //get latest values using JS
        var hour = await _jsRuntime.GetText("#HourInput");
        var minute = await _jsRuntime.GetText("#MinuteInput");
        var meridian = await _jsRuntime.GetText("#MeridianInput");
        var date = await _jsRuntime.GetText("#DateInput");
        var month = await _jsRuntime.GetText("#MonthInput");
        var year = await _jsRuntime.GetText("#YearInput");


        //initialize picker with needed values
        //note: we get values using JS, because set via JS and Blazor Bind doesn't get it
        //note: timeInput.js holds LoadCalendar
        await _jsRuntime.InvokeVoidAsync(JS.LoadCalendar, hour, minute, meridian, date, month, year);

        //toggle picker
        await _jsRuntime.ToggleClass(CalendarPickerHolder, "visually-hidden");
    }

    /// <summary>
    /// time converted to the format used in OPEN API url
    /// Time/ + 00:00/22/05/2023/+00:00
    /// </summary>
    /// <returns></returns>
    public string GetUrlString()
    {
        //reconstruct into URL pattern
        //00:00/22/05/2023/+00:00
        var returnVal = $"{this.Hour}:{this.Minute}/{this.Date}/{this.Month}/{this.Year}/{this.TimeZone}";
        return returnVal;
    }

    /// <summary>
    /// Sets time into field
    /// </summary>
    public async Task SetTime(Time startTime)
    {
        //note leading 0 must be added else parsing will fail
        this.Hour = startTime.GetStdDateTimeOffset().ToString("hh"); //small hh is for 12H format
        this.Minute = startTime.GetStdDateTimeOffset().ToString("mm");
        this.Meridian = startTime.GetStdDateTimeOffset().ToString("tt");

        //note leading 0 must be added else parsing will fail
        var dateTemp = startTime.GetStdDateTimeOffset().Day.ToString();
        string paddedDate = dateTemp.PadLeft(2, '0'); // "01"
        this.Date = paddedDate;

        //note leading 0 must be added else parsing will fail
        var monthTemp = startTime.GetStdDateTimeOffset().Month.ToString();
        string paddedMonth = monthTemp.PadLeft(2, '0'); // "01"
        this.Month = paddedMonth;

        this.Year = startTime.GetStdDateTimeOffset().Year.ToString();
        this.TimeZone = startTime.StdTimezoneText;
    }

}
