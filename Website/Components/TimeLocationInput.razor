@namespace Website.Pages
@using VedAstro.Library;


<TimeInputSimple @ref="_timeInput" LabelText="@LabelText" />
<GeoLocationInput @ref="_geoLocationInput" LabelText="Location" HideLongLat="@true" />


@code {
    [Parameter]
    public string? LabelText { get; set; } = "Time";

    private TimeInputSimple _timeInput;
    private GeoLocationInput _geoLocationInput;

    public async Task<DateTimeOffset> GetDateTimeOffset() => await _timeInput.GetDateTimeOffset();
    public async Task<string> GetFullTimeString() => await _timeInput.GetFullTimeString();

    /// <summary>
    /// gets data from user input to URL format for API use
    /// </summary>
    public async Task<string> ToApiUrl()
    {

        //auto set correct Timezone based on location & birth date
        var dateTimeOffset = await _timeInput.GetDateTimeOffset(); //offset is ignored here
        _timeInput.TimeZone = await Tools.GetTimezoneOffsetApi(_geoLocationInput.GetGeoLocation(), dateTimeOffset);

        //parse data received from user
        var geoLocation = _geoLocationInput.GetGeoLocation();

        //create a new person from the inputed data
        var timeInputed = await _timeInput.GetTime(geoLocation);

        var localNameNoSpace = Tools.RemoveWhiteSpace(_geoLocationInput.LocationName);
        var location = $"/Location/{localNameNoSpace}";

        string hhmmStr = timeInputed.GetStdDateTimeOffset().ToString("HH:mm");
        string dateSt = timeInputed.GetStdDateTimeOffset().ToString("dd");
        string monthStr = timeInputed.GetStdDateTimeOffset().ToString("MM");
        string yearStr = timeInputed.GetStdDateTimeOffset().ToString("yyyy");
        string offsetStr = timeInputed.GetStdDateTimeOffset().ToString("zzz");
        var time = $"/Time/{hhmmStr}/{dateSt}/{monthStr}/{yearStr}/{offsetStr}";

        //format of the API call
        //.../Location/Singapore/Time/23:59/31/12/2000/+08:00
        var placeHolder = "";
        placeHolder = location + time;

        return placeHolder;
    }


    public async Task<Time> GetTime()
    {
        //auto set correct Timezone based on location & birth date
        var dateTimeOffset = await _timeInput.GetDateTimeOffset(); //offset is ignored here
        _timeInput.TimeZone = await Tools.GetTimezoneOffsetApi(_geoLocationInput.GetGeoLocation(), dateTimeOffset);

        //parse data received from user
        var geoLocation = _geoLocationInput.GetGeoLocation();

        var time = await _timeInput.GetTime(geoLocation);

        return time;
    }

    public async Task<bool> IsValid()
    {
        //TEST 1 : Location
        var isValid = await _geoLocationInput.IsValid();
        if (!isValid)
        {
            //mark invalid & alert user
            await _jsRuntime.ShowAlert("error", AlertText.InvalidLocation, true);
            return false;
        }

        //if control reaches here than, it's valid
        return true;

    }

}
